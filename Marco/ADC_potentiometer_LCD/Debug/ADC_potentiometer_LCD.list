
ADC_potentiometer_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009dbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08009f60  08009f60  0000af60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e0  0800a3e0  0000c1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3e0  0800a3e0  0000b3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e8  0800a3e8  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e8  0800a3e8  0000b3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3ec  0800a3ec  0000b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800a3f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  200001fc  0800a5ec  0000c1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  0800a5ec  0000c5ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb57  00000000  00000000  0000c22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cd  00000000  00000000  0001bd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  0001e250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd5  00000000  00000000  0001f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ae7  00000000  00000000  0001fd55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011c10  00000000  00000000  0003883c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b7be  00000000  00000000  0004a44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005528  00000000  00000000  000e5c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000eb178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009f44 	.word	0x08009f44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08009f44 	.word	0x08009f44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <DWT_Delay_Init+0x58>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	@ (800104c <DWT_Delay_Init+0x58>)
 8000ffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001002:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <DWT_Delay_Init+0x58>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	4a10      	ldr	r2, [pc, #64]	@ (800104c <DWT_Delay_Init+0x58>)
 800100a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800100e:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001010:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <DWT_Delay_Init+0x5c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0e      	ldr	r2, [pc, #56]	@ (8001050 <DWT_Delay_Init+0x5c>)
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800101c:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <DWT_Delay_Init+0x5c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <DWT_Delay_Init+0x5c>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <DWT_Delay_Init+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800102e:	bf00      	nop
    __ASM volatile ("NOP");
 8001030:	bf00      	nop
    __ASM volatile ("NOP");
 8001032:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8001034:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <DWT_Delay_Init+0x5c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 800103c:	2300      	movs	r3, #0
 800103e:	e000      	b.n	8001042 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8001040:	2301      	movs	r3, #1
    }
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000edf0 	.word	0xe000edf0
 8001050:	e0001000 	.word	0xe0001000

08001054 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <DWT_Delay_us+0x48>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8001062:	f003 f837 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 8001066:	4603      	mov	r3, r0
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <DWT_Delay_us+0x4c>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	0c9b      	lsrs	r3, r3, #18
 8001070:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 800107c:	bf00      	nop
 800107e:	4b07      	ldr	r3, [pc, #28]	@ (800109c <DWT_Delay_us+0x48>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	1ad2      	subs	r2, r2, r3
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	1acb      	subs	r3, r1, r3
 800108c:	429a      	cmp	r2, r3
 800108e:	d3f6      	bcc.n	800107e <DWT_Delay_us+0x2a>
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e0001000 	.word	0xe0001000
 80010a0:	431bde83 	.word	0x431bde83

080010a4 <lcd_enable>:


//  LCD code


void lcd_enable(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 80010a8:	2201      	movs	r2, #1
 80010aa:	2102      	movs	r1, #2
 80010ac:	4807      	ldr	r0, [pc, #28]	@ (80010cc <lcd_enable+0x28>)
 80010ae:	f002 fb93 	bl	80037d8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80010b2:	2032      	movs	r0, #50	@ 0x32
 80010b4:	f7ff ffce 	bl	8001054 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2102      	movs	r1, #2
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <lcd_enable+0x28>)
 80010be:	f002 fb8b 	bl	80037d8 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 80010c2:	2032      	movs	r0, #50	@ 0x32
 80010c4:	f7ff ffc6 	bl	8001054 <DWT_Delay_us>
}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40020400 	.word	0x40020400

080010d0 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e8:	4816      	ldr	r0, [pc, #88]	@ (8001144 <lcd_write4+0x74>)
 80010ea:	f002 fb75 	bl	80037d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	105b      	asrs	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001100:	4810      	ldr	r0, [pc, #64]	@ (8001144 <lcd_write4+0x74>)
 8001102:	f002 fb69 	bl	80037d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	109b      	asrs	r3, r3, #2
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	b2db      	uxtb	r3, r3
 8001112:	461a      	mov	r2, r3
 8001114:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001118:	480a      	ldr	r0, [pc, #40]	@ (8001144 <lcd_write4+0x74>)
 800111a:	f002 fb5d 	bl	80037d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	10db      	asrs	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
 800112a:	461a      	mov	r2, r3
 800112c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <lcd_write4+0x74>)
 8001132:	f002 fb51 	bl	80037d8 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 8001136:	f7ff ffb5 	bl	80010a4 <lcd_enable>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020400 	.word	0x40020400

08001148 <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffb9 	bl	80010d0 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ffb5 	bl	80010d0 <lcd_write4>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800117a:	2200      	movs	r2, #0
 800117c:	2104      	movs	r1, #4
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <lcd_command+0x24>)
 8001180:	f002 fb2a 	bl	80037d8 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ffde 	bl	8001148 <lcd_write>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40020400 	.word	0x40020400

08001198 <lcd_clear>:

void lcd_clear(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	lcd_command(LCD_CLEAR_COMMAND);
 800119c:	2001      	movs	r0, #1
 800119e:	f7ff ffe7 	bl	8001170 <lcd_command>
	DWT_Delay_us(2000);
 80011a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011a6:	f7ff ff55 	bl	8001054 <DWT_Delay_us>
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <lcd_data>:

//  send data to the LCD
void lcd_data(uint8_t byte){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 80011ba:	2201      	movs	r2, #1
 80011bc:	2104      	movs	r1, #4
 80011be:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <lcd_data+0x24>)
 80011c0:	f002 fb0a 	bl	80037d8 <HAL_GPIO_WritePin>
	lcd_write(byte);
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffbe 	bl	8001148 <lcd_write>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020400 	.word	0x40020400

080011d8 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	3301      	adds	r3, #1
 80011ec:	79ba      	ldrb	r2, [r7, #6]
 80011ee:	3201      	adds	r2, #1
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	2b4f      	cmp	r3, #79	@ 0x4f
 80011f6:	dc10      	bgt.n	800121a <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 80011f8:	79bb      	ldrb	r3, [r7, #6]
 80011fa:	461a      	mov	r2, r3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4413      	add	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	b2da      	uxtb	r2, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4413      	add	r3, r2
 8001208:	b2db      	uxtb	r3, r3
 800120a:	b25b      	sxtb	r3, r3
 800120c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001210:	b25b      	sxtb	r3, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ffab 	bl	8001170 <lcd_command>
	}
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff f828 	bl	8000280 <strlen>
 8001230:	4603      	mov	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 8001234:	e006      	b.n	8001244 <lcd_print+0x22>
		lcd_data(*string++);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffb6 	bl	80011b0 <lcd_data>
	while (size--){
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	1e5a      	subs	r2, r3, #1
 8001248:	60fa      	str	r2, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f3      	bne.n	8001236 <lcd_print+0x14>
	}
}
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 8001264:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <lcd_println+0x6c>)
 8001266:	f107 0408 	add.w	r4, r7, #8
 800126a:	461d      	mov	r5, r3
 800126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001270:	682b      	ldr	r3, [r5, #0]
 8001272:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f803 	bl	8000280 <strlen>
 800127a:	4603      	mov	r3, r0
 800127c:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	2b10      	cmp	r3, #16
 8001282:	dd0c      	ble.n	800129e <lcd_println+0x46>
		size = 16;
 8001284:	2310      	movs	r3, #16
 8001286:	61fb      	str	r3, [r7, #28]

	while (size--){
 8001288:	e009      	b.n	800129e <lcd_println+0x46>
		line[size] = string[size];
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	7819      	ldrb	r1, [r3, #0]
 8001292:	f107 0208 	add.w	r2, r7, #8
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	4413      	add	r3, r2
 800129a:	460a      	mov	r2, r1
 800129c:	701a      	strb	r2, [r3, #0]
	while (size--){
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	1e5a      	subs	r2, r3, #1
 80012a2:	61fa      	str	r2, [r7, #28]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <lcd_println+0x32>
	}
	setCursor(0, row);
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	4619      	mov	r1, r3
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff ff93 	bl	80011d8 <setCursor>
	lcd_print(line);
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ffb3 	bl	8001222 <lcd_print>
}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bdb0      	pop	{r4, r5, r7, pc}
 80012c4:	08009f60 	.word	0x08009f60

080012c8 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff40 	bl	8001170 <lcd_command>
	for (int i = 0; i<8; i++){
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	e009      	b.n	800130a <writeCustomChar+0x42>
		lcd_data(map[i]);	
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff56 	bl	80011b0 <lcd_data>
	for (int i = 0; i<8; i++){
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3301      	adds	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2b07      	cmp	r3, #7
 800130e:	ddf2      	ble.n	80012f6 <writeCustomChar+0x2e>
	}
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 8001320:	490a      	ldr	r1, [pc, #40]	@ (800134c <loadCustomChars+0x30>)
 8001322:	2001      	movs	r0, #1
 8001324:	f7ff ffd0 	bl	80012c8 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 8001328:	4909      	ldr	r1, [pc, #36]	@ (8001350 <loadCustomChars+0x34>)
 800132a:	2002      	movs	r0, #2
 800132c:	f7ff ffcc 	bl	80012c8 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 8001330:	4908      	ldr	r1, [pc, #32]	@ (8001354 <loadCustomChars+0x38>)
 8001332:	2003      	movs	r0, #3
 8001334:	f7ff ffc8 	bl	80012c8 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 8001338:	4907      	ldr	r1, [pc, #28]	@ (8001358 <loadCustomChars+0x3c>)
 800133a:	2004      	movs	r0, #4
 800133c:	f7ff ffc4 	bl	80012c8 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 8001340:	4906      	ldr	r1, [pc, #24]	@ (800135c <loadCustomChars+0x40>)
 8001342:	2005      	movs	r0, #5
 8001344:	f7ff ffc0 	bl	80012c8 <writeCustomChar>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000008 	.word	0x20000008
 8001354:	20000010 	.word	0x20000010
 8001358:	20000018 	.word	0x20000018
 800135c:	20000020 	.word	0x20000020

08001360 <lcd_drawBar>:

void lcd_drawBar(int value){ //draws a bar using custom characters and spaces
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	setCursor(0,1); //bar is placed in the bottom row
 8001368:	2101      	movs	r1, #1
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff ff34 	bl	80011d8 <setCursor>

	if (value>80)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b50      	cmp	r3, #80	@ 0x50
 8001374:	dd01      	ble.n	800137a <lcd_drawBar+0x1a>
		value = 80;
 8001376:	2350      	movs	r3, #80	@ 0x50
 8001378:	607b      	str	r3, [r7, #4]
	int quotient = value / 5;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a25      	ldr	r2, [pc, #148]	@ (8001414 <lcd_drawBar+0xb4>)
 800137e:	fb82 1203 	smull	r1, r2, r2, r3
 8001382:	1052      	asrs	r2, r2, #1
 8001384:	17db      	asrs	r3, r3, #31
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	613b      	str	r3, [r7, #16]
	int modulo = value % 5;
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <lcd_drawBar+0xb4>)
 800138e:	fb83 1302 	smull	r1, r3, r3, r2
 8001392:	1059      	asrs	r1, r3, #1
 8001394:	17d3      	asrs	r3, r2, #31
 8001396:	1ac9      	subs	r1, r1, r3
 8001398:	460b      	mov	r3, r1
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	440b      	add	r3, r1
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	60fb      	str	r3, [r7, #12]
	
	int i = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
	
	while (i<quotient){ //we write the required number of CHAR_5_5
 80013a6:	e007      	b.n	80013b8 <lcd_drawBar+0x58>
		bar[i] = CHAR_5_5;
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <lcd_drawBar+0xb8>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	4413      	add	r3, r2
 80013ae:	2205      	movs	r2, #5
 80013b0:	701a      	strb	r2, [r3, #0]
		i++;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	3301      	adds	r3, #1
 80013b6:	617b      	str	r3, [r7, #20]
	while (i<quotient){ //we write the required number of CHAR_5_5
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	dbf3      	blt.n	80013a8 <lcd_drawBar+0x48>
	}
	if (i < 16){
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	2b0f      	cmp	r3, #15
 80013c4:	dc1b      	bgt.n	80013fe <lcd_drawBar+0x9e>
	if (modulo == 0) bar[i] = ' '; //then we either place a space
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <lcd_drawBar+0x78>
 80013cc:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <lcd_drawBar+0xb8>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	4413      	add	r3, r2
 80013d2:	2220      	movs	r2, #32
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	e006      	b.n	80013e6 <lcd_drawBar+0x86>
	else {
		bar[i] = CHAR_1_5 + modulo -1; //or the correct partial block
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	b2d9      	uxtb	r1, r3
 80013dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001418 <lcd_drawBar+0xb8>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	4413      	add	r3, r2
 80013e2:	460a      	mov	r2, r1
 80013e4:	701a      	strb	r2, [r3, #0]
	}
	i++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
	}
	while (i<16){ //and we fill the remainder with spaces
 80013ec:	e007      	b.n	80013fe <lcd_drawBar+0x9e>
		bar[i] = ' ';
 80013ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <lcd_drawBar+0xb8>)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	4413      	add	r3, r2
 80013f4:	2220      	movs	r2, #32
 80013f6:	701a      	strb	r2, [r3, #0]
		i++;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
	while (i<16){ //and we fill the remainder with spaces
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	ddf4      	ble.n	80013ee <lcd_drawBar+0x8e>
	}
	lcd_print(bar); //finally we write to the LCD
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <lcd_drawBar+0xb8>)
 8001406:	f7ff ff0c 	bl	8001222 <lcd_print>
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	66666667 	.word	0x66666667
 8001418:	20000218 	.word	0x20000218

0800141c <lcd_initialize>:

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 8001420:	2032      	movs	r0, #50	@ 0x32
 8001422:	f000 fe11 	bl	8002048 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4824      	ldr	r0, [pc, #144]	@ (80014bc <lcd_initialize+0xa0>)
 800142c:	f002 f9d4 	bl	80037d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2102      	movs	r1, #2
 8001434:	4821      	ldr	r0, [pc, #132]	@ (80014bc <lcd_initialize+0xa0>)
 8001436:	f002 f9cf 	bl	80037d8 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 800143a:	f7ff fddb 	bl	8000ff4 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 800143e:	2003      	movs	r0, #3
 8001440:	f7ff fe46 	bl	80010d0 <lcd_write4>
	HAL_Delay(5);
 8001444:	2005      	movs	r0, #5
 8001446:	f000 fdff 	bl	8002048 <HAL_Delay>
	lcd_write4(0x03);
 800144a:	2003      	movs	r0, #3
 800144c:	f7ff fe40 	bl	80010d0 <lcd_write4>
	HAL_Delay(5);
 8001450:	2005      	movs	r0, #5
 8001452:	f000 fdf9 	bl	8002048 <HAL_Delay>
	lcd_write4(0x03);
 8001456:	2003      	movs	r0, #3
 8001458:	f7ff fe3a 	bl	80010d0 <lcd_write4>
	HAL_Delay(5);
 800145c:	2005      	movs	r0, #5
 800145e:	f000 fdf3 	bl	8002048 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8001462:	2002      	movs	r0, #2
 8001464:	f7ff fe34 	bl	80010d0 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8001468:	2028      	movs	r0, #40	@ 0x28
 800146a:	f7ff fe6d 	bl	8001148 <lcd_write>
	HAL_Delay(5);
 800146e:	2005      	movs	r0, #5
 8001470:	f000 fdea 	bl	8002048 <HAL_Delay>
	lcd_write(0x08); //display off;
 8001474:	2008      	movs	r0, #8
 8001476:	f7ff fe67 	bl	8001148 <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800147a:	2001      	movs	r0, #1
 800147c:	f7ff fe64 	bl	8001148 <lcd_write>
	HAL_Delay(5);
 8001480:	2005      	movs	r0, #5
 8001482:	f000 fde1 	bl	8002048 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8001486:	2006      	movs	r0, #6
 8001488:	f7ff fe5e 	bl	8001148 <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 800148c:	2201      	movs	r2, #1
 800148e:	2110      	movs	r1, #16
 8001490:	480b      	ldr	r0, [pc, #44]	@ (80014c0 <lcd_initialize+0xa4>)
 8001492:	f002 f9a1 	bl	80037d8 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <lcd_initialize+0xa8>)
 8001498:	220c      	movs	r2, #12
 800149a:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <lcd_initialize+0xa8>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe51 	bl	8001148 <lcd_write>
	lcd_write(0x02); //go home
 80014a6:	2002      	movs	r0, #2
 80014a8:	f7ff fe4e 	bl	8001148 <lcd_write>
	HAL_Delay(2);
 80014ac:	2002      	movs	r0, #2
 80014ae:	f000 fdcb 	bl	8002048 <HAL_Delay>
	loadCustomChars();
 80014b2:	f7ff ff33 	bl	800131c <loadCustomChars>

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020000 	.word	0x40020000
 80014c4:	20000228 	.word	0x20000228

080014c8 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2110      	movs	r1, #16
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <lcd_backlight_ON+0x14>)
 80014d2:	f002 f981 	bl	80037d8 <HAL_GPIO_WritePin>
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40020000 	.word	0x40020000

080014e0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	6078      	str	r0, [r7, #4]

	lcd_clear();
 80014e8:	f7ff fe56 	bl	8001198 <lcd_clear>

	voltage = in1_data*3.3/4096.0;
 80014ec:	4b32      	ldr	r3, [pc, #200]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0xd8>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f81f 	bl	8000534 <__aeabi_i2d>
 80014f6:	a32e      	add	r3, pc, #184	@ (adr r3, 80015b0 <HAL_ADC_ConvCpltCallback+0xd0>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f884 	bl	8000608 <__aeabi_dmul>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <HAL_ADC_ConvCpltCallback+0xdc>)
 800150e:	f7ff f9a5 	bl	800085c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb6d 	bl	8000bf8 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4a27      	ldr	r2, [pc, #156]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001522:	6013      	str	r3, [r2, #0]

	string_length = snprintf(string, sizeof(string), "Voltage: %.3f\n", voltage);
 8001524:	4b26      	ldr	r3, [pc, #152]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f815 	bl	8000558 <__aeabi_f2d>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	e9cd 2300 	strd	r2, r3, [sp]
 8001536:	4a23      	ldr	r2, [pc, #140]	@ (80015c4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001538:	2140      	movs	r1, #64	@ 0x40
 800153a:	4823      	ldr	r0, [pc, #140]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800153c:	f005 f896 	bl	800666c <sniprintf>
 8001540:	4603      	mov	r3, r0
 8001542:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <HAL_ADC_ConvCpltCallback+0xec>)
 8001544:	6013      	str	r3, [r2, #0]
	LCD_string_length = snprintf(LCD_string, sizeof(string), "Voltage: %.3f", voltage);
 8001546:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff f804 	bl	8000558 <__aeabi_f2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	e9cd 2300 	strd	r2, r3, [sp]
 8001558:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_ADC_ConvCpltCallback+0xf0>)
 800155a:	2140      	movs	r1, #64	@ 0x40
 800155c:	481d      	ldr	r0, [pc, #116]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0xf4>)
 800155e:	f005 f885 	bl	800666c <sniprintf>
 8001562:	4603      	mov	r3, r0
 8001564:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8001566:	6013      	str	r3, [r2, #0]


	HAL_UART_Transmit_DMA(&huart2, string, string_length);
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_ADC_ConvCpltCallback+0xec>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4915      	ldr	r1, [pc, #84]	@ (80015c8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001572:	481a      	ldr	r0, [pc, #104]	@ (80015dc <HAL_ADC_ConvCpltCallback+0xfc>)
 8001574:	f003 f938 	bl	80047e8 <HAL_UART_Transmit_DMA>

	bars     = (in1_data*80/4096);
 8001578:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <HAL_ADC_ConvCpltCallback+0xd8>)
 800157a:	881b      	ldrh	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	2b00      	cmp	r3, #0
 8001588:	da01      	bge.n	800158e <HAL_ADC_ConvCpltCallback+0xae>
 800158a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800158e:	131b      	asrs	r3, r3, #12
 8001590:	461a      	mov	r2, r3
 8001592:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x100>)
 8001594:	601a      	str	r2, [r3, #0]
	lcd_println(LCD_string, 0);
 8001596:	2100      	movs	r1, #0
 8001598:	480e      	ldr	r0, [pc, #56]	@ (80015d4 <HAL_ADC_ConvCpltCallback+0xf4>)
 800159a:	f7ff fe5d 	bl	8001258 <lcd_println>
	lcd_drawBar(bars);
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <HAL_ADC_ConvCpltCallback+0x100>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fedc 	bl	8001360 <lcd_drawBar>

}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	66666666 	.word	0x66666666
 80015b4:	400a6666 	.word	0x400a6666
 80015b8:	200003c4 	.word	0x200003c4
 80015bc:	40b00000 	.word	0x40b00000
 80015c0:	200003c8 	.word	0x200003c8
 80015c4:	08009f74 	.word	0x08009f74
 80015c8:	200003cc 	.word	0x200003cc
 80015cc:	2000044c 	.word	0x2000044c
 80015d0:	08009f84 	.word	0x08009f84
 80015d4:	2000040c 	.word	0x2000040c
 80015d8:	20000450 	.word	0x20000450
 80015dc:	2000031c 	.word	0x2000031c
 80015e0:	20000454 	.word	0x20000454

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e8:	f000 fcbc 	bl	8001f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ec:	f000 f81e 	bl	800162c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f0:	f000 f988 	bl	8001904 <MX_GPIO_Init>
  MX_DMA_Init();
 80015f4:	f000 f950 	bl	8001898 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015f8:	f000 f924 	bl	8001844 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015fc:	f000 f882 	bl	8001704 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001600:	f000 f8d2 	bl	80017a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  lcd_initialize();
 8001604:	f7ff ff0a 	bl	800141c <lcd_initialize>
  lcd_backlight_ON ();
 8001608:	f7ff ff5e 	bl	80014c8 <lcd_backlight_ON>

  HAL_ADC_Start_DMA(&hadc1, &in1_data, 1);
 800160c:	2201      	movs	r2, #1
 800160e:	4904      	ldr	r1, [pc, #16]	@ (8001620 <main+0x3c>)
 8001610:	4804      	ldr	r0, [pc, #16]	@ (8001624 <main+0x40>)
 8001612:	f000 fe91 	bl	8002338 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim2);
 8001616:	4804      	ldr	r0, [pc, #16]	@ (8001628 <main+0x44>)
 8001618:	f002 fde0 	bl	80041dc <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <main+0x38>
 8001620:	200003c4 	.word	0x200003c4
 8001624:	2000022c 	.word	0x2000022c
 8001628:	200002d4 	.word	0x200002d4

0800162c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b094      	sub	sp, #80	@ 0x50
 8001630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2230      	movs	r2, #48	@ 0x30
 8001638:	2100      	movs	r1, #0
 800163a:	4618      	mov	r0, r3
 800163c:	f005 f8ad 	bl	800679a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001640:	f107 030c 	add.w	r3, r7, #12
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <SystemClock_Config+0xd0>)
 8001656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001658:	4a28      	ldr	r2, [pc, #160]	@ (80016fc <SystemClock_Config+0xd0>)
 800165a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001660:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <SystemClock_Config+0xd0>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b23      	ldr	r3, [pc, #140]	@ (8001700 <SystemClock_Config+0xd4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001678:	4a21      	ldr	r2, [pc, #132]	@ (8001700 <SystemClock_Config+0xd4>)
 800167a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b1f      	ldr	r3, [pc, #124]	@ (8001700 <SystemClock_Config+0xd4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800168c:	2302      	movs	r3, #2
 800168e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001690:	2301      	movs	r3, #1
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001694:	2310      	movs	r3, #16
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001698:	2302      	movs	r3, #2
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016a0:	2310      	movs	r3, #16
 80016a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016aa:	2304      	movs	r3, #4
 80016ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016ae:	2307      	movs	r3, #7
 80016b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 f8a8 	bl	800380c <HAL_RCC_OscConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016c2:	f000 f9a5 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	230f      	movs	r3, #15
 80016c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ca:	2302      	movs	r3, #2
 80016cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fb0a 	bl	8003cfc <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016ee:	f000 f98f 	bl	8001a10 <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3750      	adds	r7, #80	@ 0x50
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000

08001704 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800170a:	463b      	mov	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001718:	4a22      	ldr	r2, [pc, #136]	@ (80017a4 <MX_ADC1_Init+0xa0>)
 800171a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 800171e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001722:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001724:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800172a:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001730:	4b1b      	ldr	r3, [pc, #108]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001732:	2200      	movs	r2, #0
 8001734:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001736:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800173e:	4b18      	ldr	r3, [pc, #96]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001748:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800174c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174e:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001754:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001756:	2201      	movs	r2, #1
 8001758:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800175a:	4b11      	ldr	r3, [pc, #68]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 8001764:	2201      	movs	r2, #1
 8001766:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001768:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 800176a:	f000 fc91 	bl	8002090 <HAL_ADC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001774:	f000 f94c 	bl	8001a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001778:	2301      	movs	r3, #1
 800177a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001780:	2307      	movs	r3, #7
 8001782:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001784:	463b      	mov	r3, r7
 8001786:	4619      	mov	r1, r3
 8001788:	4805      	ldr	r0, [pc, #20]	@ (80017a0 <MX_ADC1_Init+0x9c>)
 800178a:	f000 fee3 	bl	8002554 <HAL_ADC_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001794:	f000 f93c 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000022c 	.word	0x2000022c
 80017a4:	40012000 	.word	0x40012000

080017a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	463b      	mov	r3, r7
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 80017cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017ce:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80017d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10) - 1;
 80017da:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017dc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80017e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ee:	4814      	ldr	r0, [pc, #80]	@ (8001840 <MX_TIM2_Init+0x98>)
 80017f0:	f002 fca4 	bl	800413c <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017fa:	f000 f909 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001802:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4619      	mov	r1, r3
 800180a:	480d      	ldr	r0, [pc, #52]	@ (8001840 <MX_TIM2_Init+0x98>)
 800180c:	f002 fd40 	bl	8004290 <HAL_TIM_ConfigClockSource>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001816:	f000 f8fb 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800181a:	2320      	movs	r3, #32
 800181c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001822:	463b      	mov	r3, r7
 8001824:	4619      	mov	r1, r3
 8001826:	4806      	ldr	r0, [pc, #24]	@ (8001840 <MX_TIM2_Init+0x98>)
 8001828:	f002 ff20 	bl	800466c <HAL_TIMEx_MasterConfigSynchronization>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001832:	f000 f8ed 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002d4 	.word	0x200002d4

08001844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <MX_USART2_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_USART2_UART_Init+0x4c>)
 800187c:	f002 ff64 	bl	8004748 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f000 f8c3 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	2000031c 	.word	0x2000031c
 8001894:	40004400 	.word	0x40004400

08001898 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <MX_DMA_Init+0x68>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	4a16      	ldr	r2, [pc, #88]	@ (8001900 <MX_DMA_Init+0x68>)
 80018a8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ae:	4b14      	ldr	r3, [pc, #80]	@ (8001900 <MX_DMA_Init+0x68>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <MX_DMA_Init+0x68>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001900 <MX_DMA_Init+0x68>)
 80018c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001900 <MX_DMA_Init+0x68>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2011      	movs	r0, #17
 80018dc:	f001 f9bf 	bl	8002c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018e0:	2011      	movs	r0, #17
 80018e2:	f001 f9d8 	bl	8002c96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	2038      	movs	r0, #56	@ 0x38
 80018ec:	f001 f9b7 	bl	8002c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018f0:	2038      	movs	r0, #56	@ 0x38
 80018f2:	f001 f9d0 	bl	8002c96 <HAL_NVIC_EnableIRQ>

}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800

08001904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	@ 0x28
 8001908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
 8001918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b38      	ldr	r3, [pc, #224]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a37      	ldr	r2, [pc, #220]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b35      	ldr	r3, [pc, #212]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b31      	ldr	r3, [pc, #196]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a30      	ldr	r2, [pc, #192]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b2e      	ldr	r3, [pc, #184]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a29      	ldr	r2, [pc, #164]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a22      	ldr	r2, [pc, #136]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <MX_GPIO_Init+0xfc>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	2130      	movs	r1, #48	@ 0x30
 800198e:	481d      	ldr	r0, [pc, #116]	@ (8001a04 <MX_GPIO_Init+0x100>)
 8001990:	f001 ff22 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001994:	2200      	movs	r2, #0
 8001996:	f24f 0106 	movw	r1, #61446	@ 0xf006
 800199a:	481b      	ldr	r0, [pc, #108]	@ (8001a08 <MX_GPIO_Init+0x104>)
 800199c:	f001 ff1c 	bl	80037d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80019aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b0:	f107 0314 	add.w	r3, r7, #20
 80019b4:	4619      	mov	r1, r3
 80019b6:	4815      	ldr	r0, [pc, #84]	@ (8001a0c <MX_GPIO_Init+0x108>)
 80019b8:	f001 fd8a 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 80019bc:	2330      	movs	r3, #48	@ 0x30
 80019be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4619      	mov	r1, r3
 80019d2:	480c      	ldr	r0, [pc, #48]	@ (8001a04 <MX_GPIO_Init+0x100>)
 80019d4:	f001 fd7c 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80019d8:	f24f 0306 	movw	r3, #61446	@ 0xf006
 80019dc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ea:	f107 0314 	add.w	r3, r7, #20
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <MX_GPIO_Init+0x104>)
 80019f2:	f001 fd6d 	bl	80034d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	@ 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023800 	.word	0x40023800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <Error_Handler+0x8>

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <HAL_MspInit+0x4c>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <HAL_MspInit+0x4c>)
 8001a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <HAL_MspInit+0x4c>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_MspInit+0x4c>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <HAL_MspInit+0x4c>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a5a:	2007      	movs	r0, #7
 8001a5c:	f001 f8f4 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a33      	ldr	r2, [pc, #204]	@ (8001b58 <HAL_ADC_MspInit+0xec>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d15f      	bne.n	8001b4e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <HAL_ADC_MspInit+0xf0>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	4a31      	ldr	r2, [pc, #196]	@ (8001b5c <HAL_ADC_MspInit+0xf0>)
 8001a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_ADC_MspInit+0xf0>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <HAL_ADC_MspInit+0xf0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b5c <HAL_ADC_MspInit+0xf0>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <HAL_ADC_MspInit+0xf0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aca:	2303      	movs	r3, #3
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4821      	ldr	r0, [pc, #132]	@ (8001b60 <HAL_ADC_MspInit+0xf4>)
 8001ada:	f001 fcf9 	bl	80034d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ade:	4b21      	ldr	r3, [pc, #132]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001ae0:	4a21      	ldr	r2, [pc, #132]	@ (8001b68 <HAL_ADC_MspInit+0xfc>)
 8001ae2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001af8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001afc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b06:	4b17      	ldr	r3, [pc, #92]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b13      	ldr	r3, [pc, #76]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b22:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b24:	f001 f8d2 	bl	8002ccc <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001b2e:	f7ff ff6f 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b38:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <HAL_ADC_MspInit+0xf8>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2100      	movs	r1, #0
 8001b42:	2012      	movs	r0, #18
 8001b44:	f001 f88b 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b48:	2012      	movs	r0, #18
 8001b4a:	f001 f8a4 	bl	8002c96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	@ 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40012000 	.word	0x40012000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	20000274 	.word	0x20000274
 8001b68:	40026410 	.word	0x40026410

08001b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b7c:	d10d      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a08      	ldr	r2, [pc, #32]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_TIM_Base_MspInit+0x3c>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08a      	sub	sp, #40	@ 0x28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a34      	ldr	r2, [pc, #208]	@ (8001c9c <HAL_UART_MspInit+0xf0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d161      	bne.n	8001c92 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_UART_MspInit+0xf4>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <HAL_UART_MspInit+0xf4>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <HAL_UART_MspInit+0xf4>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca0 <HAL_UART_MspInit+0xf4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	@ (8001ca0 <HAL_UART_MspInit+0xf4>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <HAL_UART_MspInit+0xf4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c06:	230c      	movs	r3, #12
 8001c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4820      	ldr	r0, [pc, #128]	@ (8001ca4 <HAL_UART_MspInit+0xf8>)
 8001c22:	f001 fc55 	bl	80034d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c26:	4b20      	ldr	r3, [pc, #128]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c28:	4a20      	ldr	r2, [pc, #128]	@ (8001cac <HAL_UART_MspInit+0x100>)
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001c32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c34:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c36:	2240      	movs	r2, #64	@ 0x40
 8001c38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c46:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c66:	4810      	ldr	r0, [pc, #64]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c68:	f001 f830 	bl	8002ccc <HAL_DMA_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001c72:	f7ff fecd 	bl	8001a10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_UART_MspInit+0xfc>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2100      	movs	r1, #0
 8001c86:	2026      	movs	r0, #38	@ 0x26
 8001c88:	f000 ffe9 	bl	8002c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c8c:	2026      	movs	r0, #38	@ 0x26
 8001c8e:	f001 f802 	bl	8002c96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	@ 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	40020000 	.word	0x40020000
 8001ca8:	20000364 	.word	0x20000364
 8001cac:	400260a0 	.word	0x400260a0

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <BusFault_Handler+0x4>

08001cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <UsageFault_Handler+0x4>

08001cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f000 f97f 	bl	8002008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <DMA1_Stream6_IRQHandler+0x10>)
 8001d16:	f001 f971 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000364 	.word	0x20000364

08001d24 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <ADC_IRQHandler+0x10>)
 8001d2a:	f000 f9f4 	bl	8002116 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000022c 	.word	0x2000022c

08001d38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <USART2_IRQHandler+0x10>)
 8001d3e:	f002 fdc3 	bl	80048c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2000031c 	.word	0x2000031c

08001d4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d50:	4802      	ldr	r0, [pc, #8]	@ (8001d5c <DMA2_Stream0_IRQHandler+0x10>)
 8001d52:	f001 f953 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000274 	.word	0x20000274

08001d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_kill>:

int _kill(int pid, int sig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d7a:	f004 fd61 	bl	8006840 <__errno>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2216      	movs	r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
  return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_exit>:

void _exit (int status)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffe7 	bl	8001d70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001da2:	bf00      	nop
 8001da4:	e7fd      	b.n	8001da2 <_exit+0x12>

08001da6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b086      	sub	sp, #24
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e00a      	b.n	8001dce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db8:	f3af 8000 	nop.w
 8001dbc:	4601      	mov	r1, r0
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	b2ca      	uxtb	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	dbf0      	blt.n	8001db8 <_read+0x12>
  }

  return len;
 8001dd6:	687b      	ldr	r3, [r7, #4]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	e009      	b.n	8001e06 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	60ba      	str	r2, [r7, #8]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	3301      	adds	r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	dbf1      	blt.n	8001df2 <_write+0x12>
  }
  return len;
 8001e0e:	687b      	ldr	r3, [r7, #4]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <_close>:

int _close(int file)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e40:	605a      	str	r2, [r3, #4]
  return 0;
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_isatty>:

int _isatty(int file)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e58:	2301      	movs	r3, #1
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b085      	sub	sp, #20
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f004 fcc6 	bl	8006840 <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	@ (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20018000 	.word	0x20018000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	20000458 	.word	0x20000458
 8001ee8:	200005b0 	.word	0x200005b0

08001eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	@ (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f14:	f7ff ffea 	bl	8001eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	@ (8001f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f004 fc85 	bl	800684c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f42:	f7ff fb4f 	bl	80015e4 <main>
  bx  lr    
 8001f46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001f54:	0800a3f0 	.word	0x0800a3f0
  ldr r2, =_sbss
 8001f58:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001f5c:	200005ac 	.word	0x200005ac

08001f60 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <DMA1_Stream0_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <HAL_Init+0x40>)
 8001f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_Init+0x40>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_Init+0x40>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f80:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <HAL_Init+0x40>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a07      	ldr	r2, [pc, #28]	@ (8001fa4 <HAL_Init+0x40>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8c:	2003      	movs	r0, #3
 8001f8e:	f000 fe5b 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f92:	2000      	movs	r0, #0
 8001f94:	f000 f808 	bl	8001fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f98:	f7ff fd40 	bl	8001a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023c00 	.word	0x40023c00

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb0:	4b12      	ldr	r3, [pc, #72]	@ (8001ffc <HAL_InitTick+0x54>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_InitTick+0x58>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fe73 	bl	8002cb2 <HAL_SYSTICK_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e00e      	b.n	8001ff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b0f      	cmp	r3, #15
 8001fda:	d80a      	bhi.n	8001ff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe4:	f000 fe3b 	bl	8002c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fe8:	4a06      	ldr	r2, [pc, #24]	@ (8002004 <HAL_InitTick+0x5c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	e000      	b.n	8001ff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000028 	.word	0x20000028
 8002000:	20000030 	.word	0x20000030
 8002004:	2000002c 	.word	0x2000002c

08002008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800200c:	4b06      	ldr	r3, [pc, #24]	@ (8002028 <HAL_IncTick+0x20>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_IncTick+0x24>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4a04      	ldr	r2, [pc, #16]	@ (800202c <HAL_IncTick+0x24>)
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	20000030 	.word	0x20000030
 800202c:	2000045c 	.word	0x2000045c

08002030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return uwTick;
 8002034:	4b03      	ldr	r3, [pc, #12]	@ (8002044 <HAL_GetTick+0x14>)
 8002036:	681b      	ldr	r3, [r3, #0]
}
 8002038:	4618      	mov	r0, r3
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	2000045c 	.word	0x2000045c

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002050:	f7ff ffee 	bl	8002030 <HAL_GetTick>
 8002054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d005      	beq.n	800206e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_Delay+0x44>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800206e:	bf00      	nop
 8002070:	f7ff ffde 	bl	8002030 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	429a      	cmp	r2, r3
 800207e:	d8f7      	bhi.n	8002070 <HAL_Delay+0x28>
  {
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000030 	.word	0x20000030

08002090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e033      	b.n	800210e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff fcdc 	bl	8001a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d118      	bne.n	8002100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80020d6:	f023 0302 	bic.w	r3, r3, #2
 80020da:	f043 0202 	orr.w	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fb58 	bl	8002798 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	f043 0201 	orr.w	r2, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80020fe:	e001      	b.n	8002104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d049      	beq.n	80021e0 <HAL_ADC_IRQHandler+0xca>
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d046      	beq.n	80021e0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 0310 	and.w	r3, r3, #16
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d12b      	bne.n	80021d0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d127      	bne.n	80021d0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002186:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002198:	2b00      	cmp	r3, #0
 800219a:	d119      	bne.n	80021d0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0220 	bic.w	r2, r2, #32
 80021aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff f985 	bl	80014e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f06f 0212 	mvn.w	r2, #18
 80021de:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d057      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x190>
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d054      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d139      	bne.n	8002296 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002228:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800223a:	2b00      	cmp	r3, #0
 800223c:	d12b      	bne.n	8002296 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002248:	2b00      	cmp	r3, #0
 800224a:	d124      	bne.n	8002296 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002256:	2b00      	cmp	r3, #0
 8002258:	d11d      	bne.n	8002296 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002270:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fbfc 	bl	8002a94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 020c 	mvn.w	r2, #12
 80022a4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <HAL_ADC_IRQHandler+0x1d6>
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d014      	beq.n	80022ec <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d10d      	bne.n	80022ec <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 f925 	bl	800252c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f06f 0201 	mvn.w	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0320 	and.w	r3, r3, #32
 80022f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022fa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d015      	beq.n	800232e <HAL_ADC_IRQHandler+0x218>
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230c:	f043 0202 	orr.w	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0220 	mvn.w	r2, #32
 800231c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f90e 	bl	8002540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0220 	mvn.w	r2, #32
 800232c:	601a      	str	r2, [r3, #0]
  }
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_ADC_Start_DMA+0x1e>
 8002352:	2302      	movs	r3, #2
 8002354:	e0ce      	b.n	80024f4 <HAL_ADC_Start_DMA+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b01      	cmp	r3, #1
 800236a:	d018      	beq.n	800239e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 0201 	orr.w	r2, r2, #1
 800237a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800237c:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <HAL_ADC_Start_DMA+0x1c4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a5f      	ldr	r2, [pc, #380]	@ (8002500 <HAL_ADC_Start_DMA+0x1c8>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0c9a      	lsrs	r2, r3, #18
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002390:	e002      	b.n	8002398 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	3b01      	subs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f9      	bne.n	8002392 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023ac:	d107      	bne.n	80023be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023bc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 8086 	bne.w	80024da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d007      	beq.n	8002400 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800240c:	d106      	bne.n	800241c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	f023 0206 	bic.w	r2, r3, #6
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	645a      	str	r2, [r3, #68]	@ 0x44
 800241a:	e002      	b.n	8002422 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242a:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_ADC_Start_DMA+0x1cc>)
 800242c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002432:	4a35      	ldr	r2, [pc, #212]	@ (8002508 <HAL_ADC_Start_DMA+0x1d0>)
 8002434:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243a:	4a34      	ldr	r2, [pc, #208]	@ (800250c <HAL_ADC_Start_DMA+0x1d4>)
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	4a33      	ldr	r2, [pc, #204]	@ (8002510 <HAL_ADC_Start_DMA+0x1d8>)
 8002444:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800244e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800245e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800246e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	334c      	adds	r3, #76	@ 0x4c
 800247a:	4619      	mov	r1, r3
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f000 fcd2 	bl	8002e28 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10f      	bne.n	80024b0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d129      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024ac:	609a      	str	r2, [r3, #8]
 80024ae:	e020      	b.n	80024f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a17      	ldr	r2, [pc, #92]	@ (8002514 <HAL_ADC_Start_DMA+0x1dc>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d11b      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x1ba>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d114      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e00b      	b.n	80024f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	f043 0210 	orr.w	r2, r3, #16
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	f043 0201 	orr.w	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000028 	.word	0x20000028
 8002500:	431bde83 	.word	0x431bde83
 8002504:	40012300 	.word	0x40012300
 8002508:	08002991 	.word	0x08002991
 800250c:	08002a4b 	.word	0x08002a4b
 8002510:	08002a67 	.word	0x08002a67
 8002514:	40012000 	.word	0x40012000

08002518 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x1c>
 800256c:	2302      	movs	r3, #2
 800256e:	e105      	b.n	800277c <HAL_ADC_ConfigChannel+0x228>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b09      	cmp	r3, #9
 800257e:	d925      	bls.n	80025cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68d9      	ldr	r1, [r3, #12]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	3b1e      	subs	r3, #30
 8002596:	2207      	movs	r2, #7
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43da      	mvns	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	400a      	ands	r2, r1
 80025a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68d9      	ldr	r1, [r3, #12]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	4603      	mov	r3, r0
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4403      	add	r3, r0
 80025be:	3b1e      	subs	r3, #30
 80025c0:	409a      	lsls	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	e022      	b.n	8002612 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6919      	ldr	r1, [r3, #16]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	2207      	movs	r2, #7
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	400a      	ands	r2, r1
 80025ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6919      	ldr	r1, [r3, #16]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	4618      	mov	r0, r3
 8002602:	4603      	mov	r3, r0
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4403      	add	r3, r0
 8002608:	409a      	lsls	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b06      	cmp	r3, #6
 8002618:	d824      	bhi.n	8002664 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3b05      	subs	r3, #5
 800262c:	221f      	movs	r2, #31
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43da      	mvns	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	4618      	mov	r0, r3
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	3b05      	subs	r3, #5
 8002656:	fa00 f203 	lsl.w	r2, r0, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	635a      	str	r2, [r3, #52]	@ 0x34
 8002662:	e04c      	b.n	80026fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d824      	bhi.n	80026b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	4413      	add	r3, r2
 800267c:	3b23      	subs	r3, #35	@ 0x23
 800267e:	221f      	movs	r2, #31
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43da      	mvns	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	400a      	ands	r2, r1
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	b29b      	uxth	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4413      	add	r3, r2
 80026a6:	3b23      	subs	r3, #35	@ 0x23
 80026a8:	fa00 f203 	lsl.w	r2, r0, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80026b4:	e023      	b.n	80026fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b41      	subs	r3, #65	@ 0x41
 80026c8:	221f      	movs	r2, #31
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	400a      	ands	r2, r1
 80026d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	3b41      	subs	r3, #65	@ 0x41
 80026f2:	fa00 f203 	lsl.w	r2, r0, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026fe:	4b22      	ldr	r3, [pc, #136]	@ (8002788 <HAL_ADC_ConfigChannel+0x234>)
 8002700:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a21      	ldr	r2, [pc, #132]	@ (800278c <HAL_ADC_ConfigChannel+0x238>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d109      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x1cc>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b12      	cmp	r3, #18
 8002712:	d105      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a19      	ldr	r2, [pc, #100]	@ (800278c <HAL_ADC_ConfigChannel+0x238>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d123      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b10      	cmp	r3, #16
 8002730:	d003      	beq.n	800273a <HAL_ADC_ConfigChannel+0x1e6>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2b11      	cmp	r3, #17
 8002738:	d11b      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b10      	cmp	r3, #16
 800274c:	d111      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_ADC_ConfigChannel+0x23c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a10      	ldr	r2, [pc, #64]	@ (8002794 <HAL_ADC_ConfigChannel+0x240>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	0c9a      	lsrs	r2, r3, #18
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002764:	e002      	b.n	800276c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	3b01      	subs	r3, #1
 800276a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f9      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40012300 	.word	0x40012300
 800278c:	40012000 	.word	0x40012000
 8002790:	20000028 	.word	0x20000028
 8002794:	431bde83 	.word	0x431bde83

08002798 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027a0:	4b79      	ldr	r3, [pc, #484]	@ (8002988 <ADC_Init+0x1f0>)
 80027a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	021a      	lsls	r2, r3, #8
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80027f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6859      	ldr	r1, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002812:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6899      	ldr	r1, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	4a58      	ldr	r2, [pc, #352]	@ (800298c <ADC_Init+0x1f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d022      	beq.n	8002876 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800283e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002860:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6899      	ldr	r1, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e00f      	b.n	8002896 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002884:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002894:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0202 	bic.w	r2, r2, #2
 80028a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6899      	ldr	r1, [r3, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	005a      	lsls	r2, r3, #1
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80028d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80028e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6859      	ldr	r1, [r3, #4]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	3b01      	subs	r3, #1
 80028f0:	035a      	lsls	r2, r3, #13
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e007      	b.n	800290c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800290a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800291a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	3b01      	subs	r3, #1
 8002928:	051a      	lsls	r2, r3, #20
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002940:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800294e:	025a      	lsls	r2, r3, #9
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689a      	ldr	r2, [r3, #8]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002966:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	029a      	lsls	r2, r3, #10
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	430a      	orrs	r2, r1
 800297a:	609a      	str	r2, [r3, #8]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40012300 	.word	0x40012300
 800298c:	0f000001 	.word	0x0f000001

08002990 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800299c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d13c      	bne.n	8002a24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d12b      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d127      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d006      	beq.n	80029e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d119      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0220 	bic.w	r2, r2, #32
 80029f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d105      	bne.n	8002a1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f043 0201 	orr.w	r2, r3, #1
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f7fe fd5f 	bl	80014e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a22:	e00e      	b.n	8002a42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff fd85 	bl	8002540 <HAL_ADC_ErrorCallback>
}
 8002a36:	e004      	b.n	8002a42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	4798      	blx	r3
}
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff fd5d 	bl	8002518 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a72:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2240      	movs	r2, #64	@ 0x40
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	f043 0204 	orr.w	r2, r3, #4
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7ff fd5a 	bl	8002540 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ada:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	60d3      	str	r3, [r2, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af4:	4b04      	ldr	r3, [pc, #16]	@ (8002b08 <__NVIC_GetPriorityGrouping+0x18>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0307 	and.w	r3, r3, #7
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0b      	blt.n	8002b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4907      	ldr	r1, [pc, #28]	@ (8002b44 <__NVIC_EnableIRQ+0x38>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000e100 	.word	0xe000e100

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	@ (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	@ (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	@ 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	@ 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f7ff ff8e 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	@ (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	@ (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff29 	bl	8002aa8 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff3e 	bl	8002af0 <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff8e 	bl	8002b9c <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5d 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff31 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ffa2 	bl	8002c04 <SysTick_Config>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff f9aa 	bl	8002030 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e099      	b.n	8002e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d08:	e00f      	b.n	8002d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d0a:	f7ff f991 	bl	8002030 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b05      	cmp	r3, #5
 8002d16:	d908      	bls.n	8002d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2203      	movs	r2, #3
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e078      	b.n	8002e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1e8      	bne.n	8002d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d40:	697a      	ldr	r2, [r7, #20]
 8002d42:	4b38      	ldr	r3, [pc, #224]	@ (8002e24 <HAL_DMA_Init+0x158>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f023 0307 	bic.w	r3, r3, #7
 8002daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d117      	bne.n	8002dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 fb01 	bl	80033d8 <DMA_CheckFifoParam>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2240      	movs	r2, #64	@ 0x40
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dea:	2301      	movs	r3, #1
 8002dec:	e016      	b.n	8002e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fab8 	bl	800336c <DMA_CalcBaseAndBitshift>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	223f      	movs	r2, #63	@ 0x3f
 8002e06:	409a      	lsls	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	f010803f 	.word	0xf010803f

08002e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_DMA_Start_IT+0x26>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e040      	b.n	8002ed0 <HAL_DMA_Start_IT+0xa8>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d12f      	bne.n	8002ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2202      	movs	r2, #2
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fa4a 	bl	8003310 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e80:	223f      	movs	r2, #63	@ 0x3f
 8002e82:	409a      	lsls	r2, r3
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0216 	orr.w	r2, r2, #22
 8002e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0208 	orr.w	r2, r2, #8
 8002eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	e005      	b.n	8002ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ee6:	f7ff f8a3 	bl	8002030 <HAL_GetTick>
 8002eea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d008      	beq.n	8002f0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e052      	b.n	8002fb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0216 	bic.w	r2, r2, #22
 8002f18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d103      	bne.n	8002f3a <HAL_DMA_Abort+0x62>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0201 	bic.w	r2, r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f5a:	e013      	b.n	8002f84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5c:	f7ff f868 	bl	8002030 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	d90c      	bls.n	8002f84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2203      	movs	r2, #3
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e015      	b.n	8002fb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1e4      	bne.n	8002f5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f96:	223f      	movs	r2, #63	@ 0x3f
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e00c      	b.n	8002ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2205      	movs	r2, #5
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003008:	4b8e      	ldr	r3, [pc, #568]	@ (8003244 <HAL_DMA_IRQHandler+0x248>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a8e      	ldr	r2, [pc, #568]	@ (8003248 <HAL_DMA_IRQHandler+0x24c>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2208      	movs	r2, #8
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01a      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0204 	bic.w	r2, r2, #4
 800304e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003054:	2208      	movs	r2, #8
 8003056:	409a      	lsls	r2, r3
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003060:	f043 0201 	orr.w	r2, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2201      	movs	r2, #1
 800306e:	409a      	lsls	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4013      	ands	r3, r2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00b      	beq.n	800309e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308a:	2201      	movs	r2, #1
 800308c:	409a      	lsls	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2204      	movs	r2, #4
 80030a4:	409a      	lsls	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d012      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c0:	2204      	movs	r2, #4
 80030c2:	409a      	lsls	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	2210      	movs	r2, #16
 80030da:	409a      	lsls	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4013      	ands	r3, r2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d043      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d03c      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	2210      	movs	r2, #16
 80030f8:	409a      	lsls	r2, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d108      	bne.n	800312c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d024      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
 800312a:	e01f      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	4798      	blx	r3
 800313c:	e016      	b.n	800316c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0208 	bic.w	r2, r2, #8
 800315a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003170:	2220      	movs	r2, #32
 8003172:	409a      	lsls	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 808f 	beq.w	800329c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8087 	beq.w	800329c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003192:	2220      	movs	r2, #32
 8003194:	409a      	lsls	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d136      	bne.n	8003214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0216 	bic.w	r2, r2, #22
 80031b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x1da>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d007      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0208 	bic.w	r2, r2, #8
 80031e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ea:	223f      	movs	r2, #63	@ 0x3f
 80031ec:	409a      	lsls	r2, r3
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003206:	2b00      	cmp	r3, #0
 8003208:	d07e      	beq.n	8003308 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	4798      	blx	r3
        }
        return;
 8003212:	e079      	b.n	8003308 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d01d      	beq.n	800325e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10d      	bne.n	800324c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003234:	2b00      	cmp	r3, #0
 8003236:	d031      	beq.n	800329c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	4798      	blx	r3
 8003240:	e02c      	b.n	800329c <HAL_DMA_IRQHandler+0x2a0>
 8003242:	bf00      	nop
 8003244:	20000028 	.word	0x20000028
 8003248:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d023      	beq.n	800329c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	4798      	blx	r3
 800325c:	e01e      	b.n	800329c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10f      	bne.n	800328c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0210 	bic.w	r2, r2, #16
 800327a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d032      	beq.n	800330a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d022      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2205      	movs	r2, #5
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d307      	bcc.n	80032e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1f2      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x2cc>
 80032e2:	e000      	b.n	80032e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	4798      	blx	r3
 8003306:	e000      	b.n	800330a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003308:	bf00      	nop
    }
  }
}
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800332c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b40      	cmp	r3, #64	@ 0x40
 800333c:	d108      	bne.n	8003350 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800334e:	e007      	b.n	8003360 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	3b10      	subs	r3, #16
 800337c:	4a14      	ldr	r2, [pc, #80]	@ (80033d0 <DMA_CalcBaseAndBitshift+0x64>)
 800337e:	fba2 2303 	umull	r2, r3, r2, r3
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003386:	4a13      	ldr	r2, [pc, #76]	@ (80033d4 <DMA_CalcBaseAndBitshift+0x68>)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b03      	cmp	r3, #3
 8003398:	d909      	bls.n	80033ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ac:	e007      	b.n	80033be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	aaaaaaab 	.word	0xaaaaaaab
 80033d4:	08009fac 	.word	0x08009fac

080033d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d11f      	bne.n	8003432 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d856      	bhi.n	80034a6 <DMA_CheckFifoParam+0xce>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <DMA_CheckFifoParam+0x28>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003411 	.word	0x08003411
 8003404:	08003423 	.word	0x08003423
 8003408:	08003411 	.word	0x08003411
 800340c:	080034a7 	.word	0x080034a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d046      	beq.n	80034aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003420:	e043      	b.n	80034aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800342a:	d140      	bne.n	80034ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003430:	e03d      	b.n	80034ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800343a:	d121      	bne.n	8003480 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b03      	cmp	r3, #3
 8003440:	d837      	bhi.n	80034b2 <DMA_CheckFifoParam+0xda>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <DMA_CheckFifoParam+0x70>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	08003459 	.word	0x08003459
 800344c:	0800345f 	.word	0x0800345f
 8003450:	08003459 	.word	0x08003459
 8003454:	08003471 	.word	0x08003471
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      break;
 800345c:	e030      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d025      	beq.n	80034b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800346e:	e022      	b.n	80034b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003478:	d11f      	bne.n	80034ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800347e:	e01c      	b.n	80034ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d903      	bls.n	800348e <DMA_CheckFifoParam+0xb6>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d003      	beq.n	8003494 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800348c:	e018      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	73fb      	strb	r3, [r7, #15]
      break;
 8003492:	e015      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	73fb      	strb	r3, [r7, #15]
      break;
 80034a4:	e00b      	b.n	80034be <DMA_CheckFifoParam+0xe6>
      break;
 80034a6:	bf00      	nop
 80034a8:	e00a      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
 80034ac:	e008      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034ae:	bf00      	nop
 80034b0:	e006      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034b2:	bf00      	nop
 80034b4:	e004      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034b6:	bf00      	nop
 80034b8:	e002      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80034ba:	bf00      	nop
 80034bc:	e000      	b.n	80034c0 <DMA_CheckFifoParam+0xe8>
      break;
 80034be:	bf00      	nop
    }
  } 
  
  return status; 
 80034c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e159      	b.n	80037a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	f040 8148 	bne.w	800379a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d005      	beq.n	8003522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	2b02      	cmp	r3, #2
 8003520:	d130      	bne.n	8003584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003558:	2201      	movs	r2, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0201 	and.w	r2, r3, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b03      	cmp	r3, #3
 800358e:	d017      	beq.n	80035c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d123      	bne.n	8003614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	08da      	lsrs	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3208      	adds	r2, #8
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a2 	beq.w	800379a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b57      	ldr	r3, [pc, #348]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	4a56      	ldr	r2, [pc, #344]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003664:	6453      	str	r3, [r2, #68]	@ 0x44
 8003666:	4b54      	ldr	r3, [pc, #336]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003672:	4a52      	ldr	r2, [pc, #328]	@ (80037bc <HAL_GPIO_Init+0x2ec>)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a49      	ldr	r2, [pc, #292]	@ (80037c0 <HAL_GPIO_Init+0x2f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x202>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a48      	ldr	r2, [pc, #288]	@ (80037c4 <HAL_GPIO_Init+0x2f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x1fe>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a47      	ldr	r2, [pc, #284]	@ (80037c8 <HAL_GPIO_Init+0x2f8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x1fa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a46      	ldr	r2, [pc, #280]	@ (80037cc <HAL_GPIO_Init+0x2fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x1f6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a45      	ldr	r2, [pc, #276]	@ (80037d0 <HAL_GPIO_Init+0x300>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x1f2>
 80036be:	2304      	movs	r3, #4
 80036c0:	e008      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e004      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036d2:	2300      	movs	r3, #0
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f002 0203 	and.w	r2, r2, #3
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	4093      	lsls	r3, r2
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e4:	4935      	ldr	r1, [pc, #212]	@ (80037bc <HAL_GPIO_Init+0x2ec>)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003716:	4a2f      	ldr	r2, [pc, #188]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003740:	4a24      	ldr	r2, [pc, #144]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376a:	4a1a      	ldr	r2, [pc, #104]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003794:	4a0f      	ldr	r2, [pc, #60]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3301      	adds	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b0f      	cmp	r3, #15
 80037a4:	f67f aea2 	bls.w	80034ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3724      	adds	r7, #36	@ 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e267      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d075      	beq.n	8003916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800382a:	4b88      	ldr	r3, [pc, #544]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f003 030c 	and.w	r3, r3, #12
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00c      	beq.n	8003850 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003836:	4b85      	ldr	r3, [pc, #532]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800383e:	2b08      	cmp	r3, #8
 8003840:	d112      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	4b82      	ldr	r3, [pc, #520]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800384e:	d10b      	bne.n	8003868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003850:	4b7e      	ldr	r3, [pc, #504]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d05b      	beq.n	8003914 <HAL_RCC_OscConfig+0x108>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d157      	bne.n	8003914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e242      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x74>
 8003872:	4b76      	ldr	r3, [pc, #472]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a75      	ldr	r2, [pc, #468]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e01d      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003888:	d10c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x98>
 800388a:	4b70      	ldr	r3, [pc, #448]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a6f      	ldr	r2, [pc, #444]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b6d      	ldr	r3, [pc, #436]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a6c      	ldr	r2, [pc, #432]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e00b      	b.n	80038bc <HAL_RCC_OscConfig+0xb0>
 80038a4:	4b69      	ldr	r3, [pc, #420]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a68      	ldr	r2, [pc, #416]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	4b66      	ldr	r3, [pc, #408]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a65      	ldr	r2, [pc, #404]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d013      	beq.n	80038ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c4:	f7fe fbb4 	bl	8002030 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038cc:	f7fe fbb0 	bl	8002030 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b64      	cmp	r3, #100	@ 0x64
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e207      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038de:	4b5b      	ldr	r3, [pc, #364]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0xc0>
 80038ea:	e014      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fba0 	bl	8002030 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fb9c 	bl	8002030 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e1f3      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003906:	4b51      	ldr	r3, [pc, #324]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0xe8>
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d063      	beq.n	80039ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003922:	4b4a      	ldr	r3, [pc, #296]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 030c 	and.w	r3, r3, #12
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800392e:	4b47      	ldr	r3, [pc, #284]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003936:	2b08      	cmp	r3, #8
 8003938:	d11c      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393a:	4b44      	ldr	r3, [pc, #272]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d116      	bne.n	8003974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003946:	4b41      	ldr	r3, [pc, #260]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d005      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e1c7      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4937      	ldr	r1, [pc, #220]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003972:	e03a      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d020      	beq.n	80039be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800397c:	4b34      	ldr	r3, [pc, #208]	@ (8003a50 <HAL_RCC_OscConfig+0x244>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe fb55 	bl	8002030 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398a:	f7fe fb51 	bl	8002030 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1a8      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800399c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a8:	4b28      	ldr	r3, [pc, #160]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	4925      	ldr	r1, [pc, #148]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	600b      	str	r3, [r1, #0]
 80039bc:	e015      	b.n	80039ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039be:	4b24      	ldr	r3, [pc, #144]	@ (8003a50 <HAL_RCC_OscConfig+0x244>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c4:	f7fe fb34 	bl	8002030 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039cc:	f7fe fb30 	bl	8002030 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e187      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039de:	4b1b      	ldr	r3, [pc, #108]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d036      	beq.n	8003a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d016      	beq.n	8003a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039fe:	4b15      	ldr	r3, [pc, #84]	@ (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7fe fb14 	bl	8002030 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7fe fb10 	bl	8002030 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e167      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a4c <HAL_RCC_OscConfig+0x240>)
 8003a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0f0      	beq.n	8003a0c <HAL_RCC_OscConfig+0x200>
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2c:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <HAL_RCC_OscConfig+0x248>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a32:	f7fe fafd 	bl	8002030 <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a38:	e00e      	b.n	8003a58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3a:	f7fe faf9 	bl	8002030 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d907      	bls.n	8003a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e150      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	42470000 	.word	0x42470000
 8003a54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1ea      	bne.n	8003a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8097 	beq.w	8003ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b81      	ldr	r3, [pc, #516]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b7d      	ldr	r3, [pc, #500]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b7a      	ldr	r3, [pc, #488]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa2:	4b77      	ldr	r3, [pc, #476]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d118      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aae:	4b74      	ldr	r3, [pc, #464]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a73      	ldr	r2, [pc, #460]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fab9 	bl	8002030 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac2:	f7fe fab5 	bl	8002030 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e10c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8003c80 <HAL_RCC_OscConfig+0x474>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0f0      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d106      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2ea>
 8003ae8:	4b64      	ldr	r3, [pc, #400]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aec:	4a63      	ldr	r2, [pc, #396]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af4:	e01c      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x30c>
 8003afe:	4b5f      	ldr	r3, [pc, #380]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b02:	4a5e      	ldr	r2, [pc, #376]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b04:	f043 0304 	orr.w	r3, r3, #4
 8003b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0x324>
 8003b18:	4b58      	ldr	r3, [pc, #352]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b1c:	4a57      	ldr	r2, [pc, #348]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b24:	4b55      	ldr	r3, [pc, #340]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b28:	4a54      	ldr	r2, [pc, #336]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b2a:	f023 0304 	bic.w	r3, r3, #4
 8003b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b38:	f7fe fa7a 	bl	8002030 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	e00a      	b.n	8003b56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b40:	f7fe fa76 	bl	8002030 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e0cb      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	4b49      	ldr	r3, [pc, #292]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0ee      	beq.n	8003b40 <HAL_RCC_OscConfig+0x334>
 8003b62:	e014      	b.n	8003b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b64:	f7fe fa64 	bl	8002030 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6c:	f7fe fa60 	bl	8002030 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b5      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	4b3e      	ldr	r3, [pc, #248]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b94:	4b39      	ldr	r3, [pc, #228]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b98:	4a38      	ldr	r2, [pc, #224]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 80a1 	beq.w	8003cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003baa:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d05c      	beq.n	8003c70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d141      	bne.n	8003c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fa34 	bl	8002030 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fa30 	bl	8002030 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e087      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	019b      	lsls	r3, r3, #6
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c00:	085b      	lsrs	r3, r3, #1
 8003c02:	3b01      	subs	r3, #1
 8003c04:	041b      	lsls	r3, r3, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0c:	061b      	lsls	r3, r3, #24
 8003c0e:	491b      	ldr	r1, [pc, #108]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b1b      	ldr	r3, [pc, #108]	@ (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fa09 	bl	8002030 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe fa05 	bl	8002030 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e05c      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x416>
 8003c40:	e054      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <HAL_RCC_OscConfig+0x478>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe f9f2 	bl	8002030 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe f9ee 	bl	8002030 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e045      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c62:	4b06      	ldr	r3, [pc, #24]	@ (8003c7c <HAL_RCC_OscConfig+0x470>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x444>
 8003c6e:	e03d      	b.n	8003cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d107      	bne.n	8003c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e038      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40007000 	.word	0x40007000
 8003c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c88:	4b1b      	ldr	r3, [pc, #108]	@ (8003cf8 <HAL_RCC_OscConfig+0x4ec>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d028      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d121      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d11a      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cb8:	4013      	ands	r3, r2
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	085b      	lsrs	r3, r3, #1
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d107      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023800 	.word	0x40023800

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e0cc      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b68      	ldr	r3, [pc, #416]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d90c      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b65      	ldr	r3, [pc, #404]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b63      	ldr	r3, [pc, #396]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0b8      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d50:	4b59      	ldr	r3, [pc, #356]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	4a58      	ldr	r2, [pc, #352]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0308 	and.w	r3, r3, #8
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d68:	4b53      	ldr	r3, [pc, #332]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a52      	ldr	r2, [pc, #328]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d74:	4b50      	ldr	r3, [pc, #320]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	494d      	ldr	r1, [pc, #308]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d044      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	4b47      	ldr	r3, [pc, #284]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d119      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e07f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d003      	beq.n	8003dba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b3f      	ldr	r3, [pc, #252]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e06f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b3b      	ldr	r3, [pc, #236]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e067      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b37      	ldr	r3, [pc, #220]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4934      	ldr	r1, [pc, #208]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fe f920 	bl	8002030 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fe f91c 	bl	8002030 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e04f      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b25      	ldr	r3, [pc, #148]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d20c      	bcs.n	8003e44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b22      	ldr	r3, [pc, #136]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e32:	4b20      	ldr	r3, [pc, #128]	@ (8003eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e032      	b.n	8003eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e50:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4916      	ldr	r1, [pc, #88]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e6e:	4b12      	ldr	r3, [pc, #72]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	490e      	ldr	r1, [pc, #56]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e82:	f000 f821 	bl	8003ec8 <HAL_RCC_GetSysClockFreq>
 8003e86:	4602      	mov	r2, r0
 8003e88:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	091b      	lsrs	r3, r3, #4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	490a      	ldr	r1, [pc, #40]	@ (8003ebc <HAL_RCC_ClockConfig+0x1c0>)
 8003e94:	5ccb      	ldrb	r3, [r1, r3]
 8003e96:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e9e:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe f880 	bl	8001fa8 <HAL_InitTick>

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023c00 	.word	0x40023c00
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	08009f94 	.word	0x08009f94
 8003ec0:	20000028 	.word	0x20000028
 8003ec4:	2000002c 	.word	0x2000002c

08003ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ecc:	b094      	sub	sp, #80	@ 0x50
 8003ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee0:	4b79      	ldr	r3, [pc, #484]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x40>
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	f200 80e1 	bhi.w	80040b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x34>
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8003efa:	e0db      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b73      	ldr	r3, [pc, #460]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x204>)
 8003efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f00:	e0db      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f02:	4b73      	ldr	r3, [pc, #460]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f06:	e0d8      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f08:	4b6f      	ldr	r3, [pc, #444]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f12:	4b6d      	ldr	r3, [pc, #436]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d063      	beq.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	099b      	lsrs	r3, r3, #6
 8003f24:	2200      	movs	r2, #0
 8003f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	0159      	lsls	r1, r3, #5
 8003f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4c:	0150      	lsls	r0, r2, #5
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4621      	mov	r1, r4
 8003f54:	1a51      	subs	r1, r2, r1
 8003f56:	6139      	str	r1, [r7, #16]
 8003f58:	4629      	mov	r1, r5
 8003f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	018b      	lsls	r3, r1, #6
 8003f70:	4651      	mov	r1, sl
 8003f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f76:	4651      	mov	r1, sl
 8003f78:	018a      	lsls	r2, r1, #6
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f80:	4659      	mov	r1, fp
 8003f82:	eb63 0901 	sbc.w	r9, r3, r1
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9a:	4690      	mov	r8, r2
 8003f9c:	4699      	mov	r9, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	eb18 0303 	adds.w	r3, r8, r3
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	eb49 0303 	adc.w	r3, r9, r3
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	024b      	lsls	r3, r1, #9
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	024a      	lsls	r2, r1, #9
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4619      	mov	r1, r3
 8003fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fce:	2200      	movs	r2, #0
 8003fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd8:	f7fc fe5e 	bl	8000c98 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe4:	e058      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fe6:	4b38      	ldr	r3, [pc, #224]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	099b      	lsrs	r3, r3, #6
 8003fec:	2200      	movs	r2, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ff6:	623b      	str	r3, [r7, #32]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004000:	4642      	mov	r2, r8
 8004002:	464b      	mov	r3, r9
 8004004:	f04f 0000 	mov.w	r0, #0
 8004008:	f04f 0100 	mov.w	r1, #0
 800400c:	0159      	lsls	r1, r3, #5
 800400e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004012:	0150      	lsls	r0, r2, #5
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4641      	mov	r1, r8
 800401a:	ebb2 0a01 	subs.w	sl, r2, r1
 800401e:	4649      	mov	r1, r9
 8004020:	eb63 0b01 	sbc.w	fp, r3, r1
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004038:	ebb2 040a 	subs.w	r4, r2, sl
 800403c:	eb63 050b 	sbc.w	r5, r3, fp
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	00eb      	lsls	r3, r5, #3
 800404a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800404e:	00e2      	lsls	r2, r4, #3
 8004050:	4614      	mov	r4, r2
 8004052:	461d      	mov	r5, r3
 8004054:	4643      	mov	r3, r8
 8004056:	18e3      	adds	r3, r4, r3
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	464b      	mov	r3, r9
 800405c:	eb45 0303 	adc.w	r3, r5, r3
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800406e:	4629      	mov	r1, r5
 8004070:	028b      	lsls	r3, r1, #10
 8004072:	4621      	mov	r1, r4
 8004074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004078:	4621      	mov	r1, r4
 800407a:	028a      	lsls	r2, r1, #10
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004082:	2200      	movs	r2, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	61fa      	str	r2, [r7, #28]
 8004088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408c:	f7fc fe04 	bl	8000c98 <__aeabi_uldivmod>
 8004090:	4602      	mov	r2, r0
 8004092:	460b      	mov	r3, r1
 8004094:	4613      	mov	r3, r2
 8004096:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	0c1b      	lsrs	r3, r3, #16
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	3301      	adds	r3, #1
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80040a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b2:	e002      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b4:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x204>)
 80040b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3750      	adds	r7, #80	@ 0x50
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c6:	bf00      	nop
 80040c8:	40023800 	.word	0x40023800
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	007a1200 	.word	0x007a1200

080040d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d8:	4b03      	ldr	r3, [pc, #12]	@ (80040e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	20000028 	.word	0x20000028

080040ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040f0:	f7ff fff0 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80040f4:	4602      	mov	r2, r0
 80040f6:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	0a9b      	lsrs	r3, r3, #10
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	4903      	ldr	r1, [pc, #12]	@ (8004110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004102:	5ccb      	ldrb	r3, [r1, r3]
 8004104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004108:	4618      	mov	r0, r3
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40023800 	.word	0x40023800
 8004110:	08009fa4 	.word	0x08009fa4

08004114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004118:	f7ff ffdc 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0b5b      	lsrs	r3, r3, #13
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	@ (8004138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	08009fa4 	.word	0x08009fa4

0800413c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e041      	b.n	80041d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d106      	bne.n	8004168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd fd02 	bl	8001b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3304      	adds	r3, #4
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f000 f950 	bl	8004420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d001      	beq.n	80041f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e03c      	b.n	800426e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1e      	ldr	r2, [pc, #120]	@ (800427c <HAL_TIM_Base_Start+0xa0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <HAL_TIM_Base_Start+0x5c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420e:	d013      	beq.n	8004238 <HAL_TIM_Base_Start+0x5c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1a      	ldr	r2, [pc, #104]	@ (8004280 <HAL_TIM_Base_Start+0xa4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <HAL_TIM_Base_Start+0x5c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a19      	ldr	r2, [pc, #100]	@ (8004284 <HAL_TIM_Base_Start+0xa8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_TIM_Base_Start+0x5c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a17      	ldr	r2, [pc, #92]	@ (8004288 <HAL_TIM_Base_Start+0xac>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_TIM_Base_Start+0x5c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <HAL_TIM_Base_Start+0xb0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d111      	bne.n	800425c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b06      	cmp	r3, #6
 8004248:	d010      	beq.n	800426c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 0201 	orr.w	r2, r2, #1
 8004258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425a:	e007      	b.n	800426c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000

08004290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_TIM_ConfigClockSource+0x1c>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0b4      	b.n	8004416 <HAL_TIM_ConfigClockSource+0x186>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042e4:	d03e      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0xd4>
 80042e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ea:	f200 8087 	bhi.w	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f2:	f000 8086 	beq.w	8004402 <HAL_TIM_ConfigClockSource+0x172>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d87f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b70      	cmp	r3, #112	@ 0x70
 80042fe:	d01a      	beq.n	8004336 <HAL_TIM_ConfigClockSource+0xa6>
 8004300:	2b70      	cmp	r3, #112	@ 0x70
 8004302:	d87b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b60      	cmp	r3, #96	@ 0x60
 8004306:	d050      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0x11a>
 8004308:	2b60      	cmp	r3, #96	@ 0x60
 800430a:	d877      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b50      	cmp	r3, #80	@ 0x50
 800430e:	d03c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0xfa>
 8004310:	2b50      	cmp	r3, #80	@ 0x50
 8004312:	d873      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b40      	cmp	r3, #64	@ 0x40
 8004316:	d058      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x13a>
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d86f      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b30      	cmp	r3, #48	@ 0x30
 800431e:	d064      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004320:	2b30      	cmp	r3, #48	@ 0x30
 8004322:	d86b      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b20      	cmp	r3, #32
 8004326:	d060      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004328:	2b20      	cmp	r3, #32
 800432a:	d867      	bhi.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b00      	cmp	r3, #0
 800432e:	d05c      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d05a      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x15a>
 8004334:	e062      	b.n	80043fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004346:	f000 f971 	bl	800462c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	609a      	str	r2, [r3, #8]
      break;
 8004362:	e04f      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004374:	f000 f95a 	bl	800462c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004386:	609a      	str	r2, [r3, #8]
      break;
 8004388:	e03c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004396:	461a      	mov	r2, r3
 8004398:	f000 f8ce 	bl	8004538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2150      	movs	r1, #80	@ 0x50
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f927 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 80043a8:	e02c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 f8ed 	bl	8004596 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2160      	movs	r1, #96	@ 0x60
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f917 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 80043c8:	e01c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 f8ae 	bl	8004538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2140      	movs	r1, #64	@ 0x40
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f907 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 80043e8:	e00c      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f000 f8fe 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 80043fa:	e003      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e000      	b.n	8004404 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004414:	7bfb      	ldrb	r3, [r7, #15]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3a      	ldr	r2, [pc, #232]	@ (800451c <TIM_Base_SetConfig+0xfc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00f      	beq.n	8004458 <TIM_Base_SetConfig+0x38>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800443e:	d00b      	beq.n	8004458 <TIM_Base_SetConfig+0x38>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a37      	ldr	r2, [pc, #220]	@ (8004520 <TIM_Base_SetConfig+0x100>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <TIM_Base_SetConfig+0x38>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a36      	ldr	r2, [pc, #216]	@ (8004524 <TIM_Base_SetConfig+0x104>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d003      	beq.n	8004458 <TIM_Base_SetConfig+0x38>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a35      	ldr	r2, [pc, #212]	@ (8004528 <TIM_Base_SetConfig+0x108>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d108      	bne.n	800446a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2b      	ldr	r2, [pc, #172]	@ (800451c <TIM_Base_SetConfig+0xfc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01b      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d017      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a28      	ldr	r2, [pc, #160]	@ (8004520 <TIM_Base_SetConfig+0x100>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a27      	ldr	r2, [pc, #156]	@ (8004524 <TIM_Base_SetConfig+0x104>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a26      	ldr	r2, [pc, #152]	@ (8004528 <TIM_Base_SetConfig+0x108>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a25      	ldr	r2, [pc, #148]	@ (800452c <TIM_Base_SetConfig+0x10c>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a24      	ldr	r2, [pc, #144]	@ (8004530 <TIM_Base_SetConfig+0x110>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a23      	ldr	r2, [pc, #140]	@ (8004534 <TIM_Base_SetConfig+0x114>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <TIM_Base_SetConfig+0xfc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d105      	bne.n	800450e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f023 0201 	bic.w	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	611a      	str	r2, [r3, #16]
  }
}
 800450e:	bf00      	nop
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800

08004538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f023 0210 	bic.w	r2, r3, #16
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800460c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	f043 0307 	orr.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	431a      	orrs	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004680:	2302      	movs	r3, #2
 8004682:	e050      	b.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d018      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d0:	d013      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00e      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a16      	ldr	r2, [pc, #88]	@ (800473c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a15      	ldr	r2, [pc, #84]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d004      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d10c      	bne.n	8004714 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	4313      	orrs	r3, r2
 800470a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40010000 	.word	0x40010000
 8004738:	40000400 	.word	0x40000400
 800473c:	40000800 	.word	0x40000800
 8004740:	40000c00 	.word	0x40000c00
 8004744:	40014000 	.word	0x40014000

08004748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e042      	b.n	80047e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd fa1c 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2224      	movs	r2, #36	@ 0x24
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800478a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fdcb 	bl	8005328 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	695a      	ldr	r2, [r3, #20]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08c      	sub	sp, #48	@ 0x30
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	4613      	mov	r3, r2
 80047f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d156      	bne.n	80048b0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d002      	beq.n	800480e <HAL_UART_Transmit_DMA+0x26>
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e04f      	b.n	80048b2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	88fa      	ldrh	r2, [r7, #6]
 800481c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2221      	movs	r2, #33	@ 0x21
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	4a21      	ldr	r2, [pc, #132]	@ (80048bc <HAL_UART_Transmit_DMA+0xd4>)
 8004838:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	4a20      	ldr	r2, [pc, #128]	@ (80048c0 <HAL_UART_Transmit_DMA+0xd8>)
 8004840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	4a1f      	ldr	r2, [pc, #124]	@ (80048c4 <HAL_UART_Transmit_DMA+0xdc>)
 8004848:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	2200      	movs	r2, #0
 8004850:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004852:	f107 0308 	add.w	r3, r7, #8
 8004856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800485c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485e:	6819      	ldr	r1, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3304      	adds	r3, #4
 8004866:	461a      	mov	r2, r3
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	f7fe fadd 	bl	8002e28 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004876:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	617b      	str	r3, [r7, #20]
   return(result);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800488e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	3314      	adds	r3, #20
 8004896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004898:	627a      	str	r2, [r7, #36]	@ 0x24
 800489a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6a39      	ldr	r1, [r7, #32]
 800489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e5      	bne.n	8004878 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3730      	adds	r7, #48	@ 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08004e55 	.word	0x08004e55
 80048c0:	08004eef 	.word	0x08004eef
 80048c4:	08004f0b 	.word	0x08004f0b

080048c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b0ba      	sub	sp, #232	@ 0xe8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004906:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10f      	bne.n	800492e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
 800491a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fc40 	bl	80051ac <UART_Receive_IT>
      return;
 800492c:	e25b      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800492e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80de 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
 8004938:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004948:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80d1 	beq.w	8004af4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
 800495e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f043 0201 	orr.w	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00b      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
 8004982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004992:	f043 0202 	orr.w	r2, r3, #2
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00b      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
 80049a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d005      	beq.n	80049be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b6:	f043 0204 	orr.w	r2, r3, #4
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d011      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
 80049ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e6:	f043 0208 	orr.w	r2, r3, #8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 81f2 	beq.w	8004ddc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049fc:	f003 0320 	and.w	r3, r3, #32
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d008      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d002      	beq.n	8004a16 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fbcb 	bl	80051ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a20:	2b40      	cmp	r3, #64	@ 0x40
 8004a22:	bf0c      	ite	eq
 8004a24:	2301      	moveq	r3, #1
 8004a26:	2300      	movne	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d103      	bne.n	8004a42 <HAL_UART_IRQHandler+0x17a>
 8004a3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d04f      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 fad3 	bl	8004fee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a52:	2b40      	cmp	r3, #64	@ 0x40
 8004a54:	d141      	bne.n	8004ada <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a60:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a82:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a92:	e841 2300 	strex	r3, r2, [r1]
 8004a96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1d9      	bne.n	8004a56 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	4a7e      	ldr	r2, [pc, #504]	@ (8004ca8 <HAL_UART_IRQHandler+0x3e0>)
 8004ab0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe fa7e 	bl	8002fb8 <HAL_DMA_Abort_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d016      	beq.n	8004af0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004acc:	4610      	mov	r0, r2
 8004ace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	e00e      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9a8 	bl	8004e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad8:	e00a      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f9a4 	bl	8004e28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e006      	b.n	8004af0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9a0 	bl	8004e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004aee:	e175      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	bf00      	nop
    return;
 8004af2:	e173      	b.n	8004ddc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	f040 814f 	bne.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 8148 	beq.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8141 	beq.w	8004d9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b3a:	2b40      	cmp	r3, #64	@ 0x40
 8004b3c:	f040 80b6 	bne.w	8004cac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8145 	beq.w	8004de0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	f080 813e 	bcs.w	8004de0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b6a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b76:	f000 8088 	beq.w	8004c8a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	330c      	adds	r3, #12
 8004b80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ba6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004baa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1d9      	bne.n	8004b7a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3314      	adds	r3, #20
 8004bcc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bd0:	e853 3f00 	ldrex	r3, [r3]
 8004bd4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bd6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3314      	adds	r3, #20
 8004be6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004bea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004bee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004bf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004bf6:	e841 2300 	strex	r3, r2, [r1]
 8004bfa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004bfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1e1      	bne.n	8004bc6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3314      	adds	r3, #20
 8004c08:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c0c:	e853 3f00 	ldrex	r3, [r3]
 8004c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e3      	bne.n	8004c02 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c52:	e853 3f00 	ldrex	r3, [r3]
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c5a:	f023 0310 	bic.w	r3, r3, #16
 8004c5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	330c      	adds	r3, #12
 8004c68:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c6c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c6e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c70:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c72:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c74:	e841 2300 	strex	r3, r2, [r1]
 8004c78:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1e3      	bne.n	8004c48 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fe f927 	bl	8002ed8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f8cb 	bl	8004e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ca6:	e09b      	b.n	8004de0 <HAL_UART_IRQHandler+0x518>
 8004ca8:	080050b5 	.word	0x080050b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 808e 	beq.w	8004de4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 8089 	beq.w	8004de4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	330c      	adds	r3, #12
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004cf6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004cf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfe:	e841 2300 	strex	r3, r2, [r1]
 8004d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e3      	bne.n	8004cd2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	3314      	adds	r3, #20
 8004d10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	623b      	str	r3, [r7, #32]
   return(result);
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f023 0301 	bic.w	r3, r3, #1
 8004d20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1e3      	bne.n	8004d0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f023 0310 	bic.w	r3, r3, #16
 8004d66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	330c      	adds	r3, #12
 8004d70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d74:	61fa      	str	r2, [r7, #28]
 8004d76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	69b9      	ldr	r1, [r7, #24]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	617b      	str	r3, [r7, #20]
   return(result);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e3      	bne.n	8004d50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d92:	4619      	mov	r1, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f851 	bl	8004e3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d9a:	e023      	b.n	8004de4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d009      	beq.n	8004dbc <HAL_UART_IRQHandler+0x4f4>
 8004da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f991 	bl	80050dc <UART_Transmit_IT>
    return;
 8004dba:	e014      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00e      	beq.n	8004de6 <HAL_UART_IRQHandler+0x51e>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f9d1 	bl	800517c <UART_EndTransmit_IT>
    return;
 8004dda:	e004      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004ddc:	bf00      	nop
 8004dde:	e002      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004de0:	bf00      	nop
 8004de2:	e000      	b.n	8004de6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004de4:	bf00      	nop
  }
}
 8004de6:	37e8      	adds	r7, #232	@ 0xe8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b090      	sub	sp, #64	@ 0x40
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d137      	bne.n	8004ee0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e72:	2200      	movs	r2, #0
 8004e74:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	623b      	str	r3, [r7, #32]
   return(result);
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e96:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	330c      	adds	r3, #12
 8004eb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eca:	61fa      	str	r2, [r7, #28]
 8004ecc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e5      	bne.n	8004eaa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ede:	e002      	b.n	8004ee6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004ee0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ee2:	f7ff ff83 	bl	8004dec <HAL_UART_TxCpltCallback>
}
 8004ee6:	bf00      	nop
 8004ee8:	3740      	adds	r7, #64	@ 0x40
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff ff7f 	bl	8004e00 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b084      	sub	sp, #16
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	2b80      	cmp	r3, #128	@ 0x80
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b21      	cmp	r3, #33	@ 0x21
 8004f3c:	d108      	bne.n	8004f50 <UART_DMAError+0x46>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2200      	movs	r2, #0
 8004f48:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004f4a:	68b8      	ldr	r0, [r7, #8]
 8004f4c:	f000 f827 	bl	8004f9e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5a:	2b40      	cmp	r3, #64	@ 0x40
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b22      	cmp	r3, #34	@ 0x22
 8004f70:	d108      	bne.n	8004f84 <UART_DMAError+0x7a>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004f7e:	68b8      	ldr	r0, [r7, #8]
 8004f80:	f000 f835 	bl	8004fee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f88:	f043 0210 	orr.w	r2, r3, #16
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f90:	68b8      	ldr	r0, [r7, #8]
 8004f92:	f7ff ff49 	bl	8004e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f96:	bf00      	nop
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b089      	sub	sp, #36	@ 0x24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	e853 3f00 	ldrex	r3, [r3]
 8004fb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	330c      	adds	r3, #12
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	61ba      	str	r2, [r7, #24]
 8004fc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fca:	6979      	ldr	r1, [r7, #20]
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	e841 2300 	strex	r3, r2, [r1]
 8004fd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1e5      	bne.n	8004fa6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004fe2:	bf00      	nop
 8004fe4:	3724      	adds	r7, #36	@ 0x24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b095      	sub	sp, #84	@ 0x54
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	330c      	adds	r3, #12
 8004ffc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005016:	643a      	str	r2, [r7, #64]	@ 0x40
 8005018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800501c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e5      	bne.n	8004ff6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3314      	adds	r3, #20
 8005030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	61fb      	str	r3, [r7, #28]
   return(result);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3314      	adds	r3, #20
 8005048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800504a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800504c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005050:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005062:	2b01      	cmp	r3, #1
 8005064:	d119      	bne.n	800509a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	60bb      	str	r3, [r7, #8]
   return(result);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 0310 	bic.w	r3, r3, #16
 800507c:	647b      	str	r3, [r7, #68]	@ 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005086:	61ba      	str	r2, [r7, #24]
 8005088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6979      	ldr	r1, [r7, #20]
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	613b      	str	r3, [r7, #16]
   return(result);
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80050a8:	bf00      	nop
 80050aa:	3754      	adds	r7, #84	@ 0x54
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f7ff feaa 	bl	8004e28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b21      	cmp	r3, #33	@ 0x21
 80050ee:	d13e      	bne.n	800516e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f8:	d114      	bne.n	8005124 <UART_Transmit_IT+0x48>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d110      	bne.n	8005124 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005116:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	1c9a      	adds	r2, r3, #2
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	621a      	str	r2, [r3, #32]
 8005122:	e008      	b.n	8005136 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6211      	str	r1, [r2, #32]
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29b      	uxth	r3, r3
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	4619      	mov	r1, r3
 8005144:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005158:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005168:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3714      	adds	r7, #20
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005192:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fe25 	bl	8004dec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	@ 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b22      	cmp	r3, #34	@ 0x22
 80051be:	f040 80ae 	bne.w	800531e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ca:	d117      	bne.n	80051fc <UART_Receive_IT+0x50>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d113      	bne.n	80051fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80051fa:	e026      	b.n	800524a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005202:	2300      	movs	r3, #0
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520e:	d007      	beq.n	8005220 <UART_Receive_IT+0x74>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d10a      	bne.n	800522e <UART_Receive_IT+0x82>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e008      	b.n	8005240 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	b2da      	uxtb	r2, r3
 800523c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800523e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800524e:	b29b      	uxth	r3, r3
 8005250:	3b01      	subs	r3, #1
 8005252:	b29b      	uxth	r3, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	4619      	mov	r1, r3
 8005258:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800525a:	2b00      	cmp	r3, #0
 800525c:	d15d      	bne.n	800531a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0220 	bic.w	r2, r2, #32
 800526c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68da      	ldr	r2, [r3, #12]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800527c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d135      	bne.n	8005310 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	613b      	str	r3, [r7, #16]
   return(result);
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	f023 0310 	bic.w	r3, r3, #16
 80052c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	330c      	adds	r3, #12
 80052c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ca:	623a      	str	r2, [r7, #32]
 80052cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	69f9      	ldr	r1, [r7, #28]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e5      	bne.n	80052aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d10a      	bne.n	8005302 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff fd97 	bl	8004e3c <HAL_UARTEx_RxEventCallback>
 800530e:	e002      	b.n	8005316 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7ff fd7f 	bl	8004e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e002      	b.n	8005320 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	e000      	b.n	8005320 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800531e:	2302      	movs	r3, #2
  }
}
 8005320:	4618      	mov	r0, r3
 8005322:	3730      	adds	r7, #48	@ 0x30
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800532c:	b0c0      	sub	sp, #256	@ 0x100
 800532e:	af00      	add	r7, sp, #0
 8005330:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005344:	68d9      	ldr	r1, [r3, #12]
 8005346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	ea40 0301 	orr.w	r3, r0, r1
 8005350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	431a      	orrs	r2, r3
 8005360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	431a      	orrs	r2, r3
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005380:	f021 010c 	bic.w	r1, r1, #12
 8005384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800538e:	430b      	orrs	r3, r1
 8005390:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a2:	6999      	ldr	r1, [r3, #24]
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	ea40 0301 	orr.w	r3, r0, r1
 80053ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b8f      	ldr	r3, [pc, #572]	@ (80055f4 <UART_SetConfig+0x2cc>)
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d005      	beq.n	80053c8 <UART_SetConfig+0xa0>
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	4b8d      	ldr	r3, [pc, #564]	@ (80055f8 <UART_SetConfig+0x2d0>)
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d104      	bne.n	80053d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80053c8:	f7fe fea4 	bl	8004114 <HAL_RCC_GetPCLK2Freq>
 80053cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80053d0:	e003      	b.n	80053da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053d2:	f7fe fe8b 	bl	80040ec <HAL_RCC_GetPCLK1Freq>
 80053d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	69db      	ldr	r3, [r3, #28]
 80053e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e4:	f040 810c 	bne.w	8005600 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80053e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80053f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80053f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80053fa:	4622      	mov	r2, r4
 80053fc:	462b      	mov	r3, r5
 80053fe:	1891      	adds	r1, r2, r2
 8005400:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005402:	415b      	adcs	r3, r3
 8005404:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005406:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800540a:	4621      	mov	r1, r4
 800540c:	eb12 0801 	adds.w	r8, r2, r1
 8005410:	4629      	mov	r1, r5
 8005412:	eb43 0901 	adc.w	r9, r3, r1
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800542a:	4690      	mov	r8, r2
 800542c:	4699      	mov	r9, r3
 800542e:	4623      	mov	r3, r4
 8005430:	eb18 0303 	adds.w	r3, r8, r3
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005438:	462b      	mov	r3, r5
 800543a:	eb49 0303 	adc.w	r3, r9, r3
 800543e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800544e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005452:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005456:	460b      	mov	r3, r1
 8005458:	18db      	adds	r3, r3, r3
 800545a:	653b      	str	r3, [r7, #80]	@ 0x50
 800545c:	4613      	mov	r3, r2
 800545e:	eb42 0303 	adc.w	r3, r2, r3
 8005462:	657b      	str	r3, [r7, #84]	@ 0x54
 8005464:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005468:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800546c:	f7fb fc14 	bl	8000c98 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4b61      	ldr	r3, [pc, #388]	@ (80055fc <UART_SetConfig+0x2d4>)
 8005476:	fba3 2302 	umull	r2, r3, r3, r2
 800547a:	095b      	lsrs	r3, r3, #5
 800547c:	011c      	lsls	r4, r3, #4
 800547e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005482:	2200      	movs	r2, #0
 8005484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005488:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800548c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005490:	4642      	mov	r2, r8
 8005492:	464b      	mov	r3, r9
 8005494:	1891      	adds	r1, r2, r2
 8005496:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005498:	415b      	adcs	r3, r3
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800549c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054a0:	4641      	mov	r1, r8
 80054a2:	eb12 0a01 	adds.w	sl, r2, r1
 80054a6:	4649      	mov	r1, r9
 80054a8:	eb43 0b01 	adc.w	fp, r3, r1
 80054ac:	f04f 0200 	mov.w	r2, #0
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c0:	4692      	mov	sl, r2
 80054c2:	469b      	mov	fp, r3
 80054c4:	4643      	mov	r3, r8
 80054c6:	eb1a 0303 	adds.w	r3, sl, r3
 80054ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054ce:	464b      	mov	r3, r9
 80054d0:	eb4b 0303 	adc.w	r3, fp, r3
 80054d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80054e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80054e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80054ec:	460b      	mov	r3, r1
 80054ee:	18db      	adds	r3, r3, r3
 80054f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054f2:	4613      	mov	r3, r2
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005502:	f7fb fbc9 	bl	8000c98 <__aeabi_uldivmod>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4611      	mov	r1, r2
 800550c:	4b3b      	ldr	r3, [pc, #236]	@ (80055fc <UART_SetConfig+0x2d4>)
 800550e:	fba3 2301 	umull	r2, r3, r3, r1
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2264      	movs	r2, #100	@ 0x64
 8005516:	fb02 f303 	mul.w	r3, r2, r3
 800551a:	1acb      	subs	r3, r1, r3
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005522:	4b36      	ldr	r3, [pc, #216]	@ (80055fc <UART_SetConfig+0x2d4>)
 8005524:	fba3 2302 	umull	r2, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005530:	441c      	add	r4, r3
 8005532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005536:	2200      	movs	r2, #0
 8005538:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800553c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005540:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005544:	4642      	mov	r2, r8
 8005546:	464b      	mov	r3, r9
 8005548:	1891      	adds	r1, r2, r2
 800554a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800554c:	415b      	adcs	r3, r3
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005550:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005554:	4641      	mov	r1, r8
 8005556:	1851      	adds	r1, r2, r1
 8005558:	6339      	str	r1, [r7, #48]	@ 0x30
 800555a:	4649      	mov	r1, r9
 800555c:	414b      	adcs	r3, r1
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	f04f 0300 	mov.w	r3, #0
 8005568:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800556c:	4659      	mov	r1, fp
 800556e:	00cb      	lsls	r3, r1, #3
 8005570:	4651      	mov	r1, sl
 8005572:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005576:	4651      	mov	r1, sl
 8005578:	00ca      	lsls	r2, r1, #3
 800557a:	4610      	mov	r0, r2
 800557c:	4619      	mov	r1, r3
 800557e:	4603      	mov	r3, r0
 8005580:	4642      	mov	r2, r8
 8005582:	189b      	adds	r3, r3, r2
 8005584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005588:	464b      	mov	r3, r9
 800558a:	460a      	mov	r2, r1
 800558c:	eb42 0303 	adc.w	r3, r2, r3
 8005590:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80055a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80055a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80055a8:	460b      	mov	r3, r1
 80055aa:	18db      	adds	r3, r3, r3
 80055ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ae:	4613      	mov	r3, r2
 80055b0:	eb42 0303 	adc.w	r3, r2, r3
 80055b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80055ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80055be:	f7fb fb6b 	bl	8000c98 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4b0d      	ldr	r3, [pc, #52]	@ (80055fc <UART_SetConfig+0x2d4>)
 80055c8:	fba3 1302 	umull	r1, r3, r3, r2
 80055cc:	095b      	lsrs	r3, r3, #5
 80055ce:	2164      	movs	r1, #100	@ 0x64
 80055d0:	fb01 f303 	mul.w	r3, r1, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	3332      	adds	r3, #50	@ 0x32
 80055da:	4a08      	ldr	r2, [pc, #32]	@ (80055fc <UART_SetConfig+0x2d4>)
 80055dc:	fba2 2303 	umull	r2, r3, r2, r3
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	f003 0207 	and.w	r2, r3, #7
 80055e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4422      	add	r2, r4
 80055ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055f0:	e106      	b.n	8005800 <UART_SetConfig+0x4d8>
 80055f2:	bf00      	nop
 80055f4:	40011000 	.word	0x40011000
 80055f8:	40011400 	.word	0x40011400
 80055fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005600:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800560a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800560e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005612:	4642      	mov	r2, r8
 8005614:	464b      	mov	r3, r9
 8005616:	1891      	adds	r1, r2, r2
 8005618:	6239      	str	r1, [r7, #32]
 800561a:	415b      	adcs	r3, r3
 800561c:	627b      	str	r3, [r7, #36]	@ 0x24
 800561e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005622:	4641      	mov	r1, r8
 8005624:	1854      	adds	r4, r2, r1
 8005626:	4649      	mov	r1, r9
 8005628:	eb43 0501 	adc.w	r5, r3, r1
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	00eb      	lsls	r3, r5, #3
 8005636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563a:	00e2      	lsls	r2, r4, #3
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	4643      	mov	r3, r8
 8005642:	18e3      	adds	r3, r4, r3
 8005644:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005648:	464b      	mov	r3, r9
 800564a:	eb45 0303 	adc.w	r3, r5, r3
 800564e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800565e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005662:	f04f 0200 	mov.w	r2, #0
 8005666:	f04f 0300 	mov.w	r3, #0
 800566a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800566e:	4629      	mov	r1, r5
 8005670:	008b      	lsls	r3, r1, #2
 8005672:	4621      	mov	r1, r4
 8005674:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005678:	4621      	mov	r1, r4
 800567a:	008a      	lsls	r2, r1, #2
 800567c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005680:	f7fb fb0a 	bl	8000c98 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4b60      	ldr	r3, [pc, #384]	@ (800580c <UART_SetConfig+0x4e4>)
 800568a:	fba3 2302 	umull	r2, r3, r3, r2
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	011c      	lsls	r4, r3, #4
 8005692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005696:	2200      	movs	r2, #0
 8005698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800569c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80056a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	1891      	adds	r1, r2, r2
 80056aa:	61b9      	str	r1, [r7, #24]
 80056ac:	415b      	adcs	r3, r3
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056b4:	4641      	mov	r1, r8
 80056b6:	1851      	adds	r1, r2, r1
 80056b8:	6139      	str	r1, [r7, #16]
 80056ba:	4649      	mov	r1, r9
 80056bc:	414b      	adcs	r3, r1
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	f04f 0200 	mov.w	r2, #0
 80056c4:	f04f 0300 	mov.w	r3, #0
 80056c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056cc:	4659      	mov	r1, fp
 80056ce:	00cb      	lsls	r3, r1, #3
 80056d0:	4651      	mov	r1, sl
 80056d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056d6:	4651      	mov	r1, sl
 80056d8:	00ca      	lsls	r2, r1, #3
 80056da:	4610      	mov	r0, r2
 80056dc:	4619      	mov	r1, r3
 80056de:	4603      	mov	r3, r0
 80056e0:	4642      	mov	r2, r8
 80056e2:	189b      	adds	r3, r3, r2
 80056e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80056e8:	464b      	mov	r3, r9
 80056ea:	460a      	mov	r2, r1
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80056fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800570c:	4649      	mov	r1, r9
 800570e:	008b      	lsls	r3, r1, #2
 8005710:	4641      	mov	r1, r8
 8005712:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005716:	4641      	mov	r1, r8
 8005718:	008a      	lsls	r2, r1, #2
 800571a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800571e:	f7fb fabb 	bl	8000c98 <__aeabi_uldivmod>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4611      	mov	r1, r2
 8005728:	4b38      	ldr	r3, [pc, #224]	@ (800580c <UART_SetConfig+0x4e4>)
 800572a:	fba3 2301 	umull	r2, r3, r3, r1
 800572e:	095b      	lsrs	r3, r3, #5
 8005730:	2264      	movs	r2, #100	@ 0x64
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	1acb      	subs	r3, r1, r3
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	3332      	adds	r3, #50	@ 0x32
 800573c:	4a33      	ldr	r2, [pc, #204]	@ (800580c <UART_SetConfig+0x4e4>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005748:	441c      	add	r4, r3
 800574a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800574e:	2200      	movs	r2, #0
 8005750:	673b      	str	r3, [r7, #112]	@ 0x70
 8005752:	677a      	str	r2, [r7, #116]	@ 0x74
 8005754:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	1891      	adds	r1, r2, r2
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	415b      	adcs	r3, r3
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005768:	4641      	mov	r1, r8
 800576a:	1851      	adds	r1, r2, r1
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	4649      	mov	r1, r9
 8005770:	414b      	adcs	r3, r1
 8005772:	607b      	str	r3, [r7, #4]
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005780:	4659      	mov	r1, fp
 8005782:	00cb      	lsls	r3, r1, #3
 8005784:	4651      	mov	r1, sl
 8005786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800578a:	4651      	mov	r1, sl
 800578c:	00ca      	lsls	r2, r1, #3
 800578e:	4610      	mov	r0, r2
 8005790:	4619      	mov	r1, r3
 8005792:	4603      	mov	r3, r0
 8005794:	4642      	mov	r2, r8
 8005796:	189b      	adds	r3, r3, r2
 8005798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800579a:	464b      	mov	r3, r9
 800579c:	460a      	mov	r2, r1
 800579e:	eb42 0303 	adc.w	r3, r2, r3
 80057a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80057ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80057bc:	4649      	mov	r1, r9
 80057be:	008b      	lsls	r3, r1, #2
 80057c0:	4641      	mov	r1, r8
 80057c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057c6:	4641      	mov	r1, r8
 80057c8:	008a      	lsls	r2, r1, #2
 80057ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80057ce:	f7fb fa63 	bl	8000c98 <__aeabi_uldivmod>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4b0d      	ldr	r3, [pc, #52]	@ (800580c <UART_SetConfig+0x4e4>)
 80057d8:	fba3 1302 	umull	r1, r3, r3, r2
 80057dc:	095b      	lsrs	r3, r3, #5
 80057de:	2164      	movs	r1, #100	@ 0x64
 80057e0:	fb01 f303 	mul.w	r3, r1, r3
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	011b      	lsls	r3, r3, #4
 80057e8:	3332      	adds	r3, #50	@ 0x32
 80057ea:	4a08      	ldr	r2, [pc, #32]	@ (800580c <UART_SetConfig+0x4e4>)
 80057ec:	fba2 2303 	umull	r2, r3, r2, r3
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	f003 020f 	and.w	r2, r3, #15
 80057f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4422      	add	r2, r4
 80057fe:	609a      	str	r2, [r3, #8]
}
 8005800:	bf00      	nop
 8005802:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005806:	46bd      	mov	sp, r7
 8005808:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800580c:	51eb851f 	.word	0x51eb851f

08005810 <__cvt>:
 8005810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	ec57 6b10 	vmov	r6, r7, d0
 8005818:	2f00      	cmp	r7, #0
 800581a:	460c      	mov	r4, r1
 800581c:	4619      	mov	r1, r3
 800581e:	463b      	mov	r3, r7
 8005820:	bfbb      	ittet	lt
 8005822:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005826:	461f      	movlt	r7, r3
 8005828:	2300      	movge	r3, #0
 800582a:	232d      	movlt	r3, #45	@ 0x2d
 800582c:	700b      	strb	r3, [r1, #0]
 800582e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005830:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005834:	4691      	mov	r9, r2
 8005836:	f023 0820 	bic.w	r8, r3, #32
 800583a:	bfbc      	itt	lt
 800583c:	4632      	movlt	r2, r6
 800583e:	4616      	movlt	r6, r2
 8005840:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005844:	d005      	beq.n	8005852 <__cvt+0x42>
 8005846:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800584a:	d100      	bne.n	800584e <__cvt+0x3e>
 800584c:	3401      	adds	r4, #1
 800584e:	2102      	movs	r1, #2
 8005850:	e000      	b.n	8005854 <__cvt+0x44>
 8005852:	2103      	movs	r1, #3
 8005854:	ab03      	add	r3, sp, #12
 8005856:	9301      	str	r3, [sp, #4]
 8005858:	ab02      	add	r3, sp, #8
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	ec47 6b10 	vmov	d0, r6, r7
 8005860:	4653      	mov	r3, sl
 8005862:	4622      	mov	r2, r4
 8005864:	f001 f8a8 	bl	80069b8 <_dtoa_r>
 8005868:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800586c:	4605      	mov	r5, r0
 800586e:	d119      	bne.n	80058a4 <__cvt+0x94>
 8005870:	f019 0f01 	tst.w	r9, #1
 8005874:	d00e      	beq.n	8005894 <__cvt+0x84>
 8005876:	eb00 0904 	add.w	r9, r0, r4
 800587a:	2200      	movs	r2, #0
 800587c:	2300      	movs	r3, #0
 800587e:	4630      	mov	r0, r6
 8005880:	4639      	mov	r1, r7
 8005882:	f7fb f929 	bl	8000ad8 <__aeabi_dcmpeq>
 8005886:	b108      	cbz	r0, 800588c <__cvt+0x7c>
 8005888:	f8cd 900c 	str.w	r9, [sp, #12]
 800588c:	2230      	movs	r2, #48	@ 0x30
 800588e:	9b03      	ldr	r3, [sp, #12]
 8005890:	454b      	cmp	r3, r9
 8005892:	d31e      	bcc.n	80058d2 <__cvt+0xc2>
 8005894:	9b03      	ldr	r3, [sp, #12]
 8005896:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005898:	1b5b      	subs	r3, r3, r5
 800589a:	4628      	mov	r0, r5
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	b004      	add	sp, #16
 80058a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80058a8:	eb00 0904 	add.w	r9, r0, r4
 80058ac:	d1e5      	bne.n	800587a <__cvt+0x6a>
 80058ae:	7803      	ldrb	r3, [r0, #0]
 80058b0:	2b30      	cmp	r3, #48	@ 0x30
 80058b2:	d10a      	bne.n	80058ca <__cvt+0xba>
 80058b4:	2200      	movs	r2, #0
 80058b6:	2300      	movs	r3, #0
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f90c 	bl	8000ad8 <__aeabi_dcmpeq>
 80058c0:	b918      	cbnz	r0, 80058ca <__cvt+0xba>
 80058c2:	f1c4 0401 	rsb	r4, r4, #1
 80058c6:	f8ca 4000 	str.w	r4, [sl]
 80058ca:	f8da 3000 	ldr.w	r3, [sl]
 80058ce:	4499      	add	r9, r3
 80058d0:	e7d3      	b.n	800587a <__cvt+0x6a>
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	9103      	str	r1, [sp, #12]
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e7d9      	b.n	800588e <__cvt+0x7e>

080058da <__exponent>:
 80058da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058dc:	2900      	cmp	r1, #0
 80058de:	bfba      	itte	lt
 80058e0:	4249      	neglt	r1, r1
 80058e2:	232d      	movlt	r3, #45	@ 0x2d
 80058e4:	232b      	movge	r3, #43	@ 0x2b
 80058e6:	2909      	cmp	r1, #9
 80058e8:	7002      	strb	r2, [r0, #0]
 80058ea:	7043      	strb	r3, [r0, #1]
 80058ec:	dd29      	ble.n	8005942 <__exponent+0x68>
 80058ee:	f10d 0307 	add.w	r3, sp, #7
 80058f2:	461d      	mov	r5, r3
 80058f4:	270a      	movs	r7, #10
 80058f6:	461a      	mov	r2, r3
 80058f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80058fc:	fb07 1416 	mls	r4, r7, r6, r1
 8005900:	3430      	adds	r4, #48	@ 0x30
 8005902:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005906:	460c      	mov	r4, r1
 8005908:	2c63      	cmp	r4, #99	@ 0x63
 800590a:	f103 33ff 	add.w	r3, r3, #4294967295
 800590e:	4631      	mov	r1, r6
 8005910:	dcf1      	bgt.n	80058f6 <__exponent+0x1c>
 8005912:	3130      	adds	r1, #48	@ 0x30
 8005914:	1e94      	subs	r4, r2, #2
 8005916:	f803 1c01 	strb.w	r1, [r3, #-1]
 800591a:	1c41      	adds	r1, r0, #1
 800591c:	4623      	mov	r3, r4
 800591e:	42ab      	cmp	r3, r5
 8005920:	d30a      	bcc.n	8005938 <__exponent+0x5e>
 8005922:	f10d 0309 	add.w	r3, sp, #9
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	42ac      	cmp	r4, r5
 800592a:	bf88      	it	hi
 800592c:	2300      	movhi	r3, #0
 800592e:	3302      	adds	r3, #2
 8005930:	4403      	add	r3, r0
 8005932:	1a18      	subs	r0, r3, r0
 8005934:	b003      	add	sp, #12
 8005936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005938:	f813 6b01 	ldrb.w	r6, [r3], #1
 800593c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005940:	e7ed      	b.n	800591e <__exponent+0x44>
 8005942:	2330      	movs	r3, #48	@ 0x30
 8005944:	3130      	adds	r1, #48	@ 0x30
 8005946:	7083      	strb	r3, [r0, #2]
 8005948:	70c1      	strb	r1, [r0, #3]
 800594a:	1d03      	adds	r3, r0, #4
 800594c:	e7f1      	b.n	8005932 <__exponent+0x58>
	...

08005950 <_printf_float>:
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	b08d      	sub	sp, #52	@ 0x34
 8005956:	460c      	mov	r4, r1
 8005958:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800595c:	4616      	mov	r6, r2
 800595e:	461f      	mov	r7, r3
 8005960:	4605      	mov	r5, r0
 8005962:	f000 ff23 	bl	80067ac <_localeconv_r>
 8005966:	6803      	ldr	r3, [r0, #0]
 8005968:	9304      	str	r3, [sp, #16]
 800596a:	4618      	mov	r0, r3
 800596c:	f7fa fc88 	bl	8000280 <strlen>
 8005970:	2300      	movs	r3, #0
 8005972:	930a      	str	r3, [sp, #40]	@ 0x28
 8005974:	f8d8 3000 	ldr.w	r3, [r8]
 8005978:	9005      	str	r0, [sp, #20]
 800597a:	3307      	adds	r3, #7
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	f103 0208 	add.w	r2, r3, #8
 8005984:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005988:	f8d4 b000 	ldr.w	fp, [r4]
 800598c:	f8c8 2000 	str.w	r2, [r8]
 8005990:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005994:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005998:	9307      	str	r3, [sp, #28]
 800599a:	f8cd 8018 	str.w	r8, [sp, #24]
 800599e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80059a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059a6:	4b9c      	ldr	r3, [pc, #624]	@ (8005c18 <_printf_float+0x2c8>)
 80059a8:	f04f 32ff 	mov.w	r2, #4294967295
 80059ac:	f7fb f8c6 	bl	8000b3c <__aeabi_dcmpun>
 80059b0:	bb70      	cbnz	r0, 8005a10 <_printf_float+0xc0>
 80059b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059b6:	4b98      	ldr	r3, [pc, #608]	@ (8005c18 <_printf_float+0x2c8>)
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	f7fb f8a0 	bl	8000b00 <__aeabi_dcmple>
 80059c0:	bb30      	cbnz	r0, 8005a10 <_printf_float+0xc0>
 80059c2:	2200      	movs	r2, #0
 80059c4:	2300      	movs	r3, #0
 80059c6:	4640      	mov	r0, r8
 80059c8:	4649      	mov	r1, r9
 80059ca:	f7fb f88f 	bl	8000aec <__aeabi_dcmplt>
 80059ce:	b110      	cbz	r0, 80059d6 <_printf_float+0x86>
 80059d0:	232d      	movs	r3, #45	@ 0x2d
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059d6:	4a91      	ldr	r2, [pc, #580]	@ (8005c1c <_printf_float+0x2cc>)
 80059d8:	4b91      	ldr	r3, [pc, #580]	@ (8005c20 <_printf_float+0x2d0>)
 80059da:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059de:	bf94      	ite	ls
 80059e0:	4690      	movls	r8, r2
 80059e2:	4698      	movhi	r8, r3
 80059e4:	2303      	movs	r3, #3
 80059e6:	6123      	str	r3, [r4, #16]
 80059e8:	f02b 0304 	bic.w	r3, fp, #4
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	f04f 0900 	mov.w	r9, #0
 80059f2:	9700      	str	r7, [sp, #0]
 80059f4:	4633      	mov	r3, r6
 80059f6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059f8:	4621      	mov	r1, r4
 80059fa:	4628      	mov	r0, r5
 80059fc:	f000 f9d2 	bl	8005da4 <_printf_common>
 8005a00:	3001      	adds	r0, #1
 8005a02:	f040 808d 	bne.w	8005b20 <_printf_float+0x1d0>
 8005a06:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0a:	b00d      	add	sp, #52	@ 0x34
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	4640      	mov	r0, r8
 8005a16:	4649      	mov	r1, r9
 8005a18:	f7fb f890 	bl	8000b3c <__aeabi_dcmpun>
 8005a1c:	b140      	cbz	r0, 8005a30 <_printf_float+0xe0>
 8005a1e:	464b      	mov	r3, r9
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bfbc      	itt	lt
 8005a24:	232d      	movlt	r3, #45	@ 0x2d
 8005a26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c24 <_printf_float+0x2d4>)
 8005a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8005c28 <_printf_float+0x2d8>)
 8005a2e:	e7d4      	b.n	80059da <_printf_float+0x8a>
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a36:	9206      	str	r2, [sp, #24]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	d13b      	bne.n	8005ab4 <_printf_float+0x164>
 8005a3c:	2306      	movs	r3, #6
 8005a3e:	6063      	str	r3, [r4, #4]
 8005a40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a44:	2300      	movs	r3, #0
 8005a46:	6022      	str	r2, [r4, #0]
 8005a48:	9303      	str	r3, [sp, #12]
 8005a4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a50:	ab09      	add	r3, sp, #36	@ 0x24
 8005a52:	9300      	str	r3, [sp, #0]
 8005a54:	6861      	ldr	r1, [r4, #4]
 8005a56:	ec49 8b10 	vmov	d0, r8, r9
 8005a5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f7ff fed6 	bl	8005810 <__cvt>
 8005a64:	9b06      	ldr	r3, [sp, #24]
 8005a66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a68:	2b47      	cmp	r3, #71	@ 0x47
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	d129      	bne.n	8005ac2 <_printf_float+0x172>
 8005a6e:	1cc8      	adds	r0, r1, #3
 8005a70:	db02      	blt.n	8005a78 <_printf_float+0x128>
 8005a72:	6863      	ldr	r3, [r4, #4]
 8005a74:	4299      	cmp	r1, r3
 8005a76:	dd41      	ble.n	8005afc <_printf_float+0x1ac>
 8005a78:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a7c:	fa5f fa8a 	uxtb.w	sl, sl
 8005a80:	3901      	subs	r1, #1
 8005a82:	4652      	mov	r2, sl
 8005a84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a88:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a8a:	f7ff ff26 	bl	80058da <__exponent>
 8005a8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a90:	1813      	adds	r3, r2, r0
 8005a92:	2a01      	cmp	r2, #1
 8005a94:	4681      	mov	r9, r0
 8005a96:	6123      	str	r3, [r4, #16]
 8005a98:	dc02      	bgt.n	8005aa0 <_printf_float+0x150>
 8005a9a:	6822      	ldr	r2, [r4, #0]
 8005a9c:	07d2      	lsls	r2, r2, #31
 8005a9e:	d501      	bpl.n	8005aa4 <_printf_float+0x154>
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0a2      	beq.n	80059f2 <_printf_float+0xa2>
 8005aac:	232d      	movs	r3, #45	@ 0x2d
 8005aae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ab2:	e79e      	b.n	80059f2 <_printf_float+0xa2>
 8005ab4:	9a06      	ldr	r2, [sp, #24]
 8005ab6:	2a47      	cmp	r2, #71	@ 0x47
 8005ab8:	d1c2      	bne.n	8005a40 <_printf_float+0xf0>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1c0      	bne.n	8005a40 <_printf_float+0xf0>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e7bd      	b.n	8005a3e <_printf_float+0xee>
 8005ac2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ac6:	d9db      	bls.n	8005a80 <_printf_float+0x130>
 8005ac8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005acc:	d118      	bne.n	8005b00 <_printf_float+0x1b0>
 8005ace:	2900      	cmp	r1, #0
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	dd0b      	ble.n	8005aec <_printf_float+0x19c>
 8005ad4:	6121      	str	r1, [r4, #16]
 8005ad6:	b913      	cbnz	r3, 8005ade <_printf_float+0x18e>
 8005ad8:	6822      	ldr	r2, [r4, #0]
 8005ada:	07d0      	lsls	r0, r2, #31
 8005adc:	d502      	bpl.n	8005ae4 <_printf_float+0x194>
 8005ade:	3301      	adds	r3, #1
 8005ae0:	440b      	add	r3, r1
 8005ae2:	6123      	str	r3, [r4, #16]
 8005ae4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005ae6:	f04f 0900 	mov.w	r9, #0
 8005aea:	e7db      	b.n	8005aa4 <_printf_float+0x154>
 8005aec:	b913      	cbnz	r3, 8005af4 <_printf_float+0x1a4>
 8005aee:	6822      	ldr	r2, [r4, #0]
 8005af0:	07d2      	lsls	r2, r2, #31
 8005af2:	d501      	bpl.n	8005af8 <_printf_float+0x1a8>
 8005af4:	3302      	adds	r3, #2
 8005af6:	e7f4      	b.n	8005ae2 <_printf_float+0x192>
 8005af8:	2301      	movs	r3, #1
 8005afa:	e7f2      	b.n	8005ae2 <_printf_float+0x192>
 8005afc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b02:	4299      	cmp	r1, r3
 8005b04:	db05      	blt.n	8005b12 <_printf_float+0x1c2>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	6121      	str	r1, [r4, #16]
 8005b0a:	07d8      	lsls	r0, r3, #31
 8005b0c:	d5ea      	bpl.n	8005ae4 <_printf_float+0x194>
 8005b0e:	1c4b      	adds	r3, r1, #1
 8005b10:	e7e7      	b.n	8005ae2 <_printf_float+0x192>
 8005b12:	2900      	cmp	r1, #0
 8005b14:	bfd4      	ite	le
 8005b16:	f1c1 0202 	rsble	r2, r1, #2
 8005b1a:	2201      	movgt	r2, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	e7e0      	b.n	8005ae2 <_printf_float+0x192>
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	055a      	lsls	r2, r3, #21
 8005b24:	d407      	bmi.n	8005b36 <_printf_float+0x1e6>
 8005b26:	6923      	ldr	r3, [r4, #16]
 8005b28:	4642      	mov	r2, r8
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	d12b      	bne.n	8005b8c <_printf_float+0x23c>
 8005b34:	e767      	b.n	8005a06 <_printf_float+0xb6>
 8005b36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b3a:	f240 80dd 	bls.w	8005cf8 <_printf_float+0x3a8>
 8005b3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	f7fa ffc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d033      	beq.n	8005bb6 <_printf_float+0x266>
 8005b4e:	4a37      	ldr	r2, [pc, #220]	@ (8005c2c <_printf_float+0x2dc>)
 8005b50:	2301      	movs	r3, #1
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f af54 	beq.w	8005a06 <_printf_float+0xb6>
 8005b5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b62:	4543      	cmp	r3, r8
 8005b64:	db02      	blt.n	8005b6c <_printf_float+0x21c>
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	07d8      	lsls	r0, r3, #31
 8005b6a:	d50f      	bpl.n	8005b8c <_printf_float+0x23c>
 8005b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b70:	4631      	mov	r1, r6
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b8      	blx	r7
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f af45 	beq.w	8005a06 <_printf_float+0xb6>
 8005b7c:	f04f 0900 	mov.w	r9, #0
 8005b80:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b84:	f104 0a1a 	add.w	sl, r4, #26
 8005b88:	45c8      	cmp	r8, r9
 8005b8a:	dc09      	bgt.n	8005ba0 <_printf_float+0x250>
 8005b8c:	6823      	ldr	r3, [r4, #0]
 8005b8e:	079b      	lsls	r3, r3, #30
 8005b90:	f100 8103 	bmi.w	8005d9a <_printf_float+0x44a>
 8005b94:	68e0      	ldr	r0, [r4, #12]
 8005b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b98:	4298      	cmp	r0, r3
 8005b9a:	bfb8      	it	lt
 8005b9c:	4618      	movlt	r0, r3
 8005b9e:	e734      	b.n	8005a0a <_printf_float+0xba>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4652      	mov	r2, sl
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af2b 	beq.w	8005a06 <_printf_float+0xb6>
 8005bb0:	f109 0901 	add.w	r9, r9, #1
 8005bb4:	e7e8      	b.n	8005b88 <_printf_float+0x238>
 8005bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	dc39      	bgt.n	8005c30 <_printf_float+0x2e0>
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005c2c <_printf_float+0x2dc>)
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	4631      	mov	r1, r6
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	47b8      	blx	r7
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	f43f af1d 	beq.w	8005a06 <_printf_float+0xb6>
 8005bcc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005bd0:	ea59 0303 	orrs.w	r3, r9, r3
 8005bd4:	d102      	bne.n	8005bdc <_printf_float+0x28c>
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	07d9      	lsls	r1, r3, #31
 8005bda:	d5d7      	bpl.n	8005b8c <_printf_float+0x23c>
 8005bdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005be0:	4631      	mov	r1, r6
 8005be2:	4628      	mov	r0, r5
 8005be4:	47b8      	blx	r7
 8005be6:	3001      	adds	r0, #1
 8005be8:	f43f af0d 	beq.w	8005a06 <_printf_float+0xb6>
 8005bec:	f04f 0a00 	mov.w	sl, #0
 8005bf0:	f104 0b1a 	add.w	fp, r4, #26
 8005bf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bf6:	425b      	negs	r3, r3
 8005bf8:	4553      	cmp	r3, sl
 8005bfa:	dc01      	bgt.n	8005c00 <_printf_float+0x2b0>
 8005bfc:	464b      	mov	r3, r9
 8005bfe:	e793      	b.n	8005b28 <_printf_float+0x1d8>
 8005c00:	2301      	movs	r3, #1
 8005c02:	465a      	mov	r2, fp
 8005c04:	4631      	mov	r1, r6
 8005c06:	4628      	mov	r0, r5
 8005c08:	47b8      	blx	r7
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f43f aefb 	beq.w	8005a06 <_printf_float+0xb6>
 8005c10:	f10a 0a01 	add.w	sl, sl, #1
 8005c14:	e7ee      	b.n	8005bf4 <_printf_float+0x2a4>
 8005c16:	bf00      	nop
 8005c18:	7fefffff 	.word	0x7fefffff
 8005c1c:	08009fb4 	.word	0x08009fb4
 8005c20:	08009fb8 	.word	0x08009fb8
 8005c24:	08009fbc 	.word	0x08009fbc
 8005c28:	08009fc0 	.word	0x08009fc0
 8005c2c:	08009fc4 	.word	0x08009fc4
 8005c30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c36:	4553      	cmp	r3, sl
 8005c38:	bfa8      	it	ge
 8005c3a:	4653      	movge	r3, sl
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	4699      	mov	r9, r3
 8005c40:	dc36      	bgt.n	8005cb0 <_printf_float+0x360>
 8005c42:	f04f 0b00 	mov.w	fp, #0
 8005c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4a:	f104 021a 	add.w	r2, r4, #26
 8005c4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c50:	9306      	str	r3, [sp, #24]
 8005c52:	eba3 0309 	sub.w	r3, r3, r9
 8005c56:	455b      	cmp	r3, fp
 8005c58:	dc31      	bgt.n	8005cbe <_printf_float+0x36e>
 8005c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5c:	459a      	cmp	sl, r3
 8005c5e:	dc3a      	bgt.n	8005cd6 <_printf_float+0x386>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	07da      	lsls	r2, r3, #31
 8005c64:	d437      	bmi.n	8005cd6 <_printf_float+0x386>
 8005c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c68:	ebaa 0903 	sub.w	r9, sl, r3
 8005c6c:	9b06      	ldr	r3, [sp, #24]
 8005c6e:	ebaa 0303 	sub.w	r3, sl, r3
 8005c72:	4599      	cmp	r9, r3
 8005c74:	bfa8      	it	ge
 8005c76:	4699      	movge	r9, r3
 8005c78:	f1b9 0f00 	cmp.w	r9, #0
 8005c7c:	dc33      	bgt.n	8005ce6 <_printf_float+0x396>
 8005c7e:	f04f 0800 	mov.w	r8, #0
 8005c82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c86:	f104 0b1a 	add.w	fp, r4, #26
 8005c8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c8c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c90:	eba3 0309 	sub.w	r3, r3, r9
 8005c94:	4543      	cmp	r3, r8
 8005c96:	f77f af79 	ble.w	8005b8c <_printf_float+0x23c>
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	465a      	mov	r2, fp
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	f43f aeae 	beq.w	8005a06 <_printf_float+0xb6>
 8005caa:	f108 0801 	add.w	r8, r8, #1
 8005cae:	e7ec      	b.n	8005c8a <_printf_float+0x33a>
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d1c2      	bne.n	8005c42 <_printf_float+0x2f2>
 8005cbc:	e6a3      	b.n	8005a06 <_printf_float+0xb6>
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	9206      	str	r2, [sp, #24]
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f ae9c 	beq.w	8005a06 <_printf_float+0xb6>
 8005cce:	9a06      	ldr	r2, [sp, #24]
 8005cd0:	f10b 0b01 	add.w	fp, fp, #1
 8005cd4:	e7bb      	b.n	8005c4e <_printf_float+0x2fe>
 8005cd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cda:	4631      	mov	r1, r6
 8005cdc:	4628      	mov	r0, r5
 8005cde:	47b8      	blx	r7
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	d1c0      	bne.n	8005c66 <_printf_float+0x316>
 8005ce4:	e68f      	b.n	8005a06 <_printf_float+0xb6>
 8005ce6:	9a06      	ldr	r2, [sp, #24]
 8005ce8:	464b      	mov	r3, r9
 8005cea:	4442      	add	r2, r8
 8005cec:	4631      	mov	r1, r6
 8005cee:	4628      	mov	r0, r5
 8005cf0:	47b8      	blx	r7
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d1c3      	bne.n	8005c7e <_printf_float+0x32e>
 8005cf6:	e686      	b.n	8005a06 <_printf_float+0xb6>
 8005cf8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cfc:	f1ba 0f01 	cmp.w	sl, #1
 8005d00:	dc01      	bgt.n	8005d06 <_printf_float+0x3b6>
 8005d02:	07db      	lsls	r3, r3, #31
 8005d04:	d536      	bpl.n	8005d74 <_printf_float+0x424>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4642      	mov	r2, r8
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	47b8      	blx	r7
 8005d10:	3001      	adds	r0, #1
 8005d12:	f43f ae78 	beq.w	8005a06 <_printf_float+0xb6>
 8005d16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	47b8      	blx	r7
 8005d20:	3001      	adds	r0, #1
 8005d22:	f43f ae70 	beq.w	8005a06 <_printf_float+0xb6>
 8005d26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d32:	f7fa fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d36:	b9c0      	cbnz	r0, 8005d6a <_printf_float+0x41a>
 8005d38:	4653      	mov	r3, sl
 8005d3a:	f108 0201 	add.w	r2, r8, #1
 8005d3e:	4631      	mov	r1, r6
 8005d40:	4628      	mov	r0, r5
 8005d42:	47b8      	blx	r7
 8005d44:	3001      	adds	r0, #1
 8005d46:	d10c      	bne.n	8005d62 <_printf_float+0x412>
 8005d48:	e65d      	b.n	8005a06 <_printf_float+0xb6>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	465a      	mov	r2, fp
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4628      	mov	r0, r5
 8005d52:	47b8      	blx	r7
 8005d54:	3001      	adds	r0, #1
 8005d56:	f43f ae56 	beq.w	8005a06 <_printf_float+0xb6>
 8005d5a:	f108 0801 	add.w	r8, r8, #1
 8005d5e:	45d0      	cmp	r8, sl
 8005d60:	dbf3      	blt.n	8005d4a <_printf_float+0x3fa>
 8005d62:	464b      	mov	r3, r9
 8005d64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d68:	e6df      	b.n	8005b2a <_printf_float+0x1da>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	f104 0b1a 	add.w	fp, r4, #26
 8005d72:	e7f4      	b.n	8005d5e <_printf_float+0x40e>
 8005d74:	2301      	movs	r3, #1
 8005d76:	4642      	mov	r2, r8
 8005d78:	e7e1      	b.n	8005d3e <_printf_float+0x3ee>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	464a      	mov	r2, r9
 8005d7e:	4631      	mov	r1, r6
 8005d80:	4628      	mov	r0, r5
 8005d82:	47b8      	blx	r7
 8005d84:	3001      	adds	r0, #1
 8005d86:	f43f ae3e 	beq.w	8005a06 <_printf_float+0xb6>
 8005d8a:	f108 0801 	add.w	r8, r8, #1
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d92:	1a5b      	subs	r3, r3, r1
 8005d94:	4543      	cmp	r3, r8
 8005d96:	dcf0      	bgt.n	8005d7a <_printf_float+0x42a>
 8005d98:	e6fc      	b.n	8005b94 <_printf_float+0x244>
 8005d9a:	f04f 0800 	mov.w	r8, #0
 8005d9e:	f104 0919 	add.w	r9, r4, #25
 8005da2:	e7f4      	b.n	8005d8e <_printf_float+0x43e>

08005da4 <_printf_common>:
 8005da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	4616      	mov	r6, r2
 8005daa:	4698      	mov	r8, r3
 8005dac:	688a      	ldr	r2, [r1, #8]
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005db4:	4293      	cmp	r3, r2
 8005db6:	bfb8      	it	lt
 8005db8:	4613      	movlt	r3, r2
 8005dba:	6033      	str	r3, [r6, #0]
 8005dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	b10a      	cbz	r2, 8005dca <_printf_common+0x26>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	0699      	lsls	r1, r3, #26
 8005dce:	bf42      	ittt	mi
 8005dd0:	6833      	ldrmi	r3, [r6, #0]
 8005dd2:	3302      	addmi	r3, #2
 8005dd4:	6033      	strmi	r3, [r6, #0]
 8005dd6:	6825      	ldr	r5, [r4, #0]
 8005dd8:	f015 0506 	ands.w	r5, r5, #6
 8005ddc:	d106      	bne.n	8005dec <_printf_common+0x48>
 8005dde:	f104 0a19 	add.w	sl, r4, #25
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	6832      	ldr	r2, [r6, #0]
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc26      	bgt.n	8005e3a <_printf_common+0x96>
 8005dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	3b00      	subs	r3, #0
 8005df4:	bf18      	it	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	0692      	lsls	r2, r2, #26
 8005dfa:	d42b      	bmi.n	8005e54 <_printf_common+0xb0>
 8005dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e00:	4641      	mov	r1, r8
 8005e02:	4638      	mov	r0, r7
 8005e04:	47c8      	blx	r9
 8005e06:	3001      	adds	r0, #1
 8005e08:	d01e      	beq.n	8005e48 <_printf_common+0xa4>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	f003 0306 	and.w	r3, r3, #6
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	bf02      	ittt	eq
 8005e16:	68e5      	ldreq	r5, [r4, #12]
 8005e18:	6833      	ldreq	r3, [r6, #0]
 8005e1a:	1aed      	subeq	r5, r5, r3
 8005e1c:	68a3      	ldr	r3, [r4, #8]
 8005e1e:	bf0c      	ite	eq
 8005e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e24:	2500      	movne	r5, #0
 8005e26:	4293      	cmp	r3, r2
 8005e28:	bfc4      	itt	gt
 8005e2a:	1a9b      	subgt	r3, r3, r2
 8005e2c:	18ed      	addgt	r5, r5, r3
 8005e2e:	2600      	movs	r6, #0
 8005e30:	341a      	adds	r4, #26
 8005e32:	42b5      	cmp	r5, r6
 8005e34:	d11a      	bne.n	8005e6c <_printf_common+0xc8>
 8005e36:	2000      	movs	r0, #0
 8005e38:	e008      	b.n	8005e4c <_printf_common+0xa8>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	4641      	mov	r1, r8
 8005e40:	4638      	mov	r0, r7
 8005e42:	47c8      	blx	r9
 8005e44:	3001      	adds	r0, #1
 8005e46:	d103      	bne.n	8005e50 <_printf_common+0xac>
 8005e48:	f04f 30ff 	mov.w	r0, #4294967295
 8005e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e50:	3501      	adds	r5, #1
 8005e52:	e7c6      	b.n	8005de2 <_printf_common+0x3e>
 8005e54:	18e1      	adds	r1, r4, r3
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	2030      	movs	r0, #48	@ 0x30
 8005e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e5e:	4422      	add	r2, r4
 8005e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e68:	3302      	adds	r3, #2
 8005e6a:	e7c7      	b.n	8005dfc <_printf_common+0x58>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	4622      	mov	r2, r4
 8005e70:	4641      	mov	r1, r8
 8005e72:	4638      	mov	r0, r7
 8005e74:	47c8      	blx	r9
 8005e76:	3001      	adds	r0, #1
 8005e78:	d0e6      	beq.n	8005e48 <_printf_common+0xa4>
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7d9      	b.n	8005e32 <_printf_common+0x8e>
	...

08005e80 <_printf_i>:
 8005e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e84:	7e0f      	ldrb	r7, [r1, #24]
 8005e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e88:	2f78      	cmp	r7, #120	@ 0x78
 8005e8a:	4691      	mov	r9, r2
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	460c      	mov	r4, r1
 8005e90:	469a      	mov	sl, r3
 8005e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e96:	d807      	bhi.n	8005ea8 <_printf_i+0x28>
 8005e98:	2f62      	cmp	r7, #98	@ 0x62
 8005e9a:	d80a      	bhi.n	8005eb2 <_printf_i+0x32>
 8005e9c:	2f00      	cmp	r7, #0
 8005e9e:	f000 80d2 	beq.w	8006046 <_printf_i+0x1c6>
 8005ea2:	2f58      	cmp	r7, #88	@ 0x58
 8005ea4:	f000 80b9 	beq.w	800601a <_printf_i+0x19a>
 8005ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005eb0:	e03a      	b.n	8005f28 <_printf_i+0xa8>
 8005eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005eb6:	2b15      	cmp	r3, #21
 8005eb8:	d8f6      	bhi.n	8005ea8 <_printf_i+0x28>
 8005eba:	a101      	add	r1, pc, #4	@ (adr r1, 8005ec0 <_printf_i+0x40>)
 8005ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec0:	08005f19 	.word	0x08005f19
 8005ec4:	08005f2d 	.word	0x08005f2d
 8005ec8:	08005ea9 	.word	0x08005ea9
 8005ecc:	08005ea9 	.word	0x08005ea9
 8005ed0:	08005ea9 	.word	0x08005ea9
 8005ed4:	08005ea9 	.word	0x08005ea9
 8005ed8:	08005f2d 	.word	0x08005f2d
 8005edc:	08005ea9 	.word	0x08005ea9
 8005ee0:	08005ea9 	.word	0x08005ea9
 8005ee4:	08005ea9 	.word	0x08005ea9
 8005ee8:	08005ea9 	.word	0x08005ea9
 8005eec:	0800602d 	.word	0x0800602d
 8005ef0:	08005f57 	.word	0x08005f57
 8005ef4:	08005fe7 	.word	0x08005fe7
 8005ef8:	08005ea9 	.word	0x08005ea9
 8005efc:	08005ea9 	.word	0x08005ea9
 8005f00:	0800604f 	.word	0x0800604f
 8005f04:	08005ea9 	.word	0x08005ea9
 8005f08:	08005f57 	.word	0x08005f57
 8005f0c:	08005ea9 	.word	0x08005ea9
 8005f10:	08005ea9 	.word	0x08005ea9
 8005f14:	08005fef 	.word	0x08005fef
 8005f18:	6833      	ldr	r3, [r6, #0]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6032      	str	r2, [r6, #0]
 8005f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e09d      	b.n	8006068 <_printf_i+0x1e8>
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	6820      	ldr	r0, [r4, #0]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	6031      	str	r1, [r6, #0]
 8005f34:	0606      	lsls	r6, r0, #24
 8005f36:	d501      	bpl.n	8005f3c <_printf_i+0xbc>
 8005f38:	681d      	ldr	r5, [r3, #0]
 8005f3a:	e003      	b.n	8005f44 <_printf_i+0xc4>
 8005f3c:	0645      	lsls	r5, r0, #25
 8005f3e:	d5fb      	bpl.n	8005f38 <_printf_i+0xb8>
 8005f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f44:	2d00      	cmp	r5, #0
 8005f46:	da03      	bge.n	8005f50 <_printf_i+0xd0>
 8005f48:	232d      	movs	r3, #45	@ 0x2d
 8005f4a:	426d      	negs	r5, r5
 8005f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f50:	4859      	ldr	r0, [pc, #356]	@ (80060b8 <_printf_i+0x238>)
 8005f52:	230a      	movs	r3, #10
 8005f54:	e011      	b.n	8005f7a <_printf_i+0xfa>
 8005f56:	6821      	ldr	r1, [r4, #0]
 8005f58:	6833      	ldr	r3, [r6, #0]
 8005f5a:	0608      	lsls	r0, r1, #24
 8005f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f60:	d402      	bmi.n	8005f68 <_printf_i+0xe8>
 8005f62:	0649      	lsls	r1, r1, #25
 8005f64:	bf48      	it	mi
 8005f66:	b2ad      	uxthmi	r5, r5
 8005f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f6a:	4853      	ldr	r0, [pc, #332]	@ (80060b8 <_printf_i+0x238>)
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	bf14      	ite	ne
 8005f70:	230a      	movne	r3, #10
 8005f72:	2308      	moveq	r3, #8
 8005f74:	2100      	movs	r1, #0
 8005f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f7a:	6866      	ldr	r6, [r4, #4]
 8005f7c:	60a6      	str	r6, [r4, #8]
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	bfa2      	ittt	ge
 8005f82:	6821      	ldrge	r1, [r4, #0]
 8005f84:	f021 0104 	bicge.w	r1, r1, #4
 8005f88:	6021      	strge	r1, [r4, #0]
 8005f8a:	b90d      	cbnz	r5, 8005f90 <_printf_i+0x110>
 8005f8c:	2e00      	cmp	r6, #0
 8005f8e:	d04b      	beq.n	8006028 <_printf_i+0x1a8>
 8005f90:	4616      	mov	r6, r2
 8005f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f96:	fb03 5711 	mls	r7, r3, r1, r5
 8005f9a:	5dc7      	ldrb	r7, [r0, r7]
 8005f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fa0:	462f      	mov	r7, r5
 8005fa2:	42bb      	cmp	r3, r7
 8005fa4:	460d      	mov	r5, r1
 8005fa6:	d9f4      	bls.n	8005f92 <_printf_i+0x112>
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d10b      	bne.n	8005fc4 <_printf_i+0x144>
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	07df      	lsls	r7, r3, #31
 8005fb0:	d508      	bpl.n	8005fc4 <_printf_i+0x144>
 8005fb2:	6923      	ldr	r3, [r4, #16]
 8005fb4:	6861      	ldr	r1, [r4, #4]
 8005fb6:	4299      	cmp	r1, r3
 8005fb8:	bfde      	ittt	le
 8005fba:	2330      	movle	r3, #48	@ 0x30
 8005fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fc0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fc4:	1b92      	subs	r2, r2, r6
 8005fc6:	6122      	str	r2, [r4, #16]
 8005fc8:	f8cd a000 	str.w	sl, [sp]
 8005fcc:	464b      	mov	r3, r9
 8005fce:	aa03      	add	r2, sp, #12
 8005fd0:	4621      	mov	r1, r4
 8005fd2:	4640      	mov	r0, r8
 8005fd4:	f7ff fee6 	bl	8005da4 <_printf_common>
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d14a      	bne.n	8006072 <_printf_i+0x1f2>
 8005fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fe0:	b004      	add	sp, #16
 8005fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f043 0320 	orr.w	r3, r3, #32
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	4833      	ldr	r0, [pc, #204]	@ (80060bc <_printf_i+0x23c>)
 8005ff0:	2778      	movs	r7, #120	@ 0x78
 8005ff2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ff6:	6823      	ldr	r3, [r4, #0]
 8005ff8:	6831      	ldr	r1, [r6, #0]
 8005ffa:	061f      	lsls	r7, r3, #24
 8005ffc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006000:	d402      	bmi.n	8006008 <_printf_i+0x188>
 8006002:	065f      	lsls	r7, r3, #25
 8006004:	bf48      	it	mi
 8006006:	b2ad      	uxthmi	r5, r5
 8006008:	6031      	str	r1, [r6, #0]
 800600a:	07d9      	lsls	r1, r3, #31
 800600c:	bf44      	itt	mi
 800600e:	f043 0320 	orrmi.w	r3, r3, #32
 8006012:	6023      	strmi	r3, [r4, #0]
 8006014:	b11d      	cbz	r5, 800601e <_printf_i+0x19e>
 8006016:	2310      	movs	r3, #16
 8006018:	e7ac      	b.n	8005f74 <_printf_i+0xf4>
 800601a:	4827      	ldr	r0, [pc, #156]	@ (80060b8 <_printf_i+0x238>)
 800601c:	e7e9      	b.n	8005ff2 <_printf_i+0x172>
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	f023 0320 	bic.w	r3, r3, #32
 8006024:	6023      	str	r3, [r4, #0]
 8006026:	e7f6      	b.n	8006016 <_printf_i+0x196>
 8006028:	4616      	mov	r6, r2
 800602a:	e7bd      	b.n	8005fa8 <_printf_i+0x128>
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	6825      	ldr	r5, [r4, #0]
 8006030:	6961      	ldr	r1, [r4, #20]
 8006032:	1d18      	adds	r0, r3, #4
 8006034:	6030      	str	r0, [r6, #0]
 8006036:	062e      	lsls	r6, r5, #24
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	d501      	bpl.n	8006040 <_printf_i+0x1c0>
 800603c:	6019      	str	r1, [r3, #0]
 800603e:	e002      	b.n	8006046 <_printf_i+0x1c6>
 8006040:	0668      	lsls	r0, r5, #25
 8006042:	d5fb      	bpl.n	800603c <_printf_i+0x1bc>
 8006044:	8019      	strh	r1, [r3, #0]
 8006046:	2300      	movs	r3, #0
 8006048:	6123      	str	r3, [r4, #16]
 800604a:	4616      	mov	r6, r2
 800604c:	e7bc      	b.n	8005fc8 <_printf_i+0x148>
 800604e:	6833      	ldr	r3, [r6, #0]
 8006050:	1d1a      	adds	r2, r3, #4
 8006052:	6032      	str	r2, [r6, #0]
 8006054:	681e      	ldr	r6, [r3, #0]
 8006056:	6862      	ldr	r2, [r4, #4]
 8006058:	2100      	movs	r1, #0
 800605a:	4630      	mov	r0, r6
 800605c:	f7fa f8c0 	bl	80001e0 <memchr>
 8006060:	b108      	cbz	r0, 8006066 <_printf_i+0x1e6>
 8006062:	1b80      	subs	r0, r0, r6
 8006064:	6060      	str	r0, [r4, #4]
 8006066:	6863      	ldr	r3, [r4, #4]
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	2300      	movs	r3, #0
 800606c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006070:	e7aa      	b.n	8005fc8 <_printf_i+0x148>
 8006072:	6923      	ldr	r3, [r4, #16]
 8006074:	4632      	mov	r2, r6
 8006076:	4649      	mov	r1, r9
 8006078:	4640      	mov	r0, r8
 800607a:	47d0      	blx	sl
 800607c:	3001      	adds	r0, #1
 800607e:	d0ad      	beq.n	8005fdc <_printf_i+0x15c>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	079b      	lsls	r3, r3, #30
 8006084:	d413      	bmi.n	80060ae <_printf_i+0x22e>
 8006086:	68e0      	ldr	r0, [r4, #12]
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	4298      	cmp	r0, r3
 800608c:	bfb8      	it	lt
 800608e:	4618      	movlt	r0, r3
 8006090:	e7a6      	b.n	8005fe0 <_printf_i+0x160>
 8006092:	2301      	movs	r3, #1
 8006094:	4632      	mov	r2, r6
 8006096:	4649      	mov	r1, r9
 8006098:	4640      	mov	r0, r8
 800609a:	47d0      	blx	sl
 800609c:	3001      	adds	r0, #1
 800609e:	d09d      	beq.n	8005fdc <_printf_i+0x15c>
 80060a0:	3501      	adds	r5, #1
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	9903      	ldr	r1, [sp, #12]
 80060a6:	1a5b      	subs	r3, r3, r1
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dcf2      	bgt.n	8006092 <_printf_i+0x212>
 80060ac:	e7eb      	b.n	8006086 <_printf_i+0x206>
 80060ae:	2500      	movs	r5, #0
 80060b0:	f104 0619 	add.w	r6, r4, #25
 80060b4:	e7f5      	b.n	80060a2 <_printf_i+0x222>
 80060b6:	bf00      	nop
 80060b8:	08009fc6 	.word	0x08009fc6
 80060bc:	08009fd7 	.word	0x08009fd7

080060c0 <_scanf_float>:
 80060c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c4:	b087      	sub	sp, #28
 80060c6:	4617      	mov	r7, r2
 80060c8:	9303      	str	r3, [sp, #12]
 80060ca:	688b      	ldr	r3, [r1, #8]
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80060d2:	bf81      	itttt	hi
 80060d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80060d8:	eb03 0b05 	addhi.w	fp, r3, r5
 80060dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80060e0:	608b      	strhi	r3, [r1, #8]
 80060e2:	680b      	ldr	r3, [r1, #0]
 80060e4:	460a      	mov	r2, r1
 80060e6:	f04f 0500 	mov.w	r5, #0
 80060ea:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80060ee:	f842 3b1c 	str.w	r3, [r2], #28
 80060f2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060f6:	4680      	mov	r8, r0
 80060f8:	460c      	mov	r4, r1
 80060fa:	bf98      	it	ls
 80060fc:	f04f 0b00 	movls.w	fp, #0
 8006100:	9201      	str	r2, [sp, #4]
 8006102:	4616      	mov	r6, r2
 8006104:	46aa      	mov	sl, r5
 8006106:	46a9      	mov	r9, r5
 8006108:	9502      	str	r5, [sp, #8]
 800610a:	68a2      	ldr	r2, [r4, #8]
 800610c:	b152      	cbz	r2, 8006124 <_scanf_float+0x64>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b4e      	cmp	r3, #78	@ 0x4e
 8006114:	d864      	bhi.n	80061e0 <_scanf_float+0x120>
 8006116:	2b40      	cmp	r3, #64	@ 0x40
 8006118:	d83c      	bhi.n	8006194 <_scanf_float+0xd4>
 800611a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800611e:	b2c8      	uxtb	r0, r1
 8006120:	280e      	cmp	r0, #14
 8006122:	d93a      	bls.n	800619a <_scanf_float+0xda>
 8006124:	f1b9 0f00 	cmp.w	r9, #0
 8006128:	d003      	beq.n	8006132 <_scanf_float+0x72>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006136:	f1ba 0f01 	cmp.w	sl, #1
 800613a:	f200 8117 	bhi.w	800636c <_scanf_float+0x2ac>
 800613e:	9b01      	ldr	r3, [sp, #4]
 8006140:	429e      	cmp	r6, r3
 8006142:	f200 8108 	bhi.w	8006356 <_scanf_float+0x296>
 8006146:	2001      	movs	r0, #1
 8006148:	b007      	add	sp, #28
 800614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006152:	2a0d      	cmp	r2, #13
 8006154:	d8e6      	bhi.n	8006124 <_scanf_float+0x64>
 8006156:	a101      	add	r1, pc, #4	@ (adr r1, 800615c <_scanf_float+0x9c>)
 8006158:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800615c:	080062a3 	.word	0x080062a3
 8006160:	08006125 	.word	0x08006125
 8006164:	08006125 	.word	0x08006125
 8006168:	08006125 	.word	0x08006125
 800616c:	08006303 	.word	0x08006303
 8006170:	080062db 	.word	0x080062db
 8006174:	08006125 	.word	0x08006125
 8006178:	08006125 	.word	0x08006125
 800617c:	080062b1 	.word	0x080062b1
 8006180:	08006125 	.word	0x08006125
 8006184:	08006125 	.word	0x08006125
 8006188:	08006125 	.word	0x08006125
 800618c:	08006125 	.word	0x08006125
 8006190:	08006269 	.word	0x08006269
 8006194:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006198:	e7db      	b.n	8006152 <_scanf_float+0x92>
 800619a:	290e      	cmp	r1, #14
 800619c:	d8c2      	bhi.n	8006124 <_scanf_float+0x64>
 800619e:	a001      	add	r0, pc, #4	@ (adr r0, 80061a4 <_scanf_float+0xe4>)
 80061a0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80061a4:	08006259 	.word	0x08006259
 80061a8:	08006125 	.word	0x08006125
 80061ac:	08006259 	.word	0x08006259
 80061b0:	080062ef 	.word	0x080062ef
 80061b4:	08006125 	.word	0x08006125
 80061b8:	08006201 	.word	0x08006201
 80061bc:	0800623f 	.word	0x0800623f
 80061c0:	0800623f 	.word	0x0800623f
 80061c4:	0800623f 	.word	0x0800623f
 80061c8:	0800623f 	.word	0x0800623f
 80061cc:	0800623f 	.word	0x0800623f
 80061d0:	0800623f 	.word	0x0800623f
 80061d4:	0800623f 	.word	0x0800623f
 80061d8:	0800623f 	.word	0x0800623f
 80061dc:	0800623f 	.word	0x0800623f
 80061e0:	2b6e      	cmp	r3, #110	@ 0x6e
 80061e2:	d809      	bhi.n	80061f8 <_scanf_float+0x138>
 80061e4:	2b60      	cmp	r3, #96	@ 0x60
 80061e6:	d8b2      	bhi.n	800614e <_scanf_float+0x8e>
 80061e8:	2b54      	cmp	r3, #84	@ 0x54
 80061ea:	d07b      	beq.n	80062e4 <_scanf_float+0x224>
 80061ec:	2b59      	cmp	r3, #89	@ 0x59
 80061ee:	d199      	bne.n	8006124 <_scanf_float+0x64>
 80061f0:	2d07      	cmp	r5, #7
 80061f2:	d197      	bne.n	8006124 <_scanf_float+0x64>
 80061f4:	2508      	movs	r5, #8
 80061f6:	e02c      	b.n	8006252 <_scanf_float+0x192>
 80061f8:	2b74      	cmp	r3, #116	@ 0x74
 80061fa:	d073      	beq.n	80062e4 <_scanf_float+0x224>
 80061fc:	2b79      	cmp	r3, #121	@ 0x79
 80061fe:	e7f6      	b.n	80061ee <_scanf_float+0x12e>
 8006200:	6821      	ldr	r1, [r4, #0]
 8006202:	05c8      	lsls	r0, r1, #23
 8006204:	d51b      	bpl.n	800623e <_scanf_float+0x17e>
 8006206:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800620a:	6021      	str	r1, [r4, #0]
 800620c:	f109 0901 	add.w	r9, r9, #1
 8006210:	f1bb 0f00 	cmp.w	fp, #0
 8006214:	d003      	beq.n	800621e <_scanf_float+0x15e>
 8006216:	3201      	adds	r2, #1
 8006218:	f10b 3bff 	add.w	fp, fp, #4294967295
 800621c:	60a2      	str	r2, [r4, #8]
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	3b01      	subs	r3, #1
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	6923      	ldr	r3, [r4, #16]
 8006226:	3301      	adds	r3, #1
 8006228:	6123      	str	r3, [r4, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3b01      	subs	r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	607b      	str	r3, [r7, #4]
 8006232:	f340 8087 	ble.w	8006344 <_scanf_float+0x284>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	e765      	b.n	800610a <_scanf_float+0x4a>
 800623e:	eb1a 0105 	adds.w	r1, sl, r5
 8006242:	f47f af6f 	bne.w	8006124 <_scanf_float+0x64>
 8006246:	6822      	ldr	r2, [r4, #0]
 8006248:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800624c:	6022      	str	r2, [r4, #0]
 800624e:	460d      	mov	r5, r1
 8006250:	468a      	mov	sl, r1
 8006252:	f806 3b01 	strb.w	r3, [r6], #1
 8006256:	e7e2      	b.n	800621e <_scanf_float+0x15e>
 8006258:	6822      	ldr	r2, [r4, #0]
 800625a:	0610      	lsls	r0, r2, #24
 800625c:	f57f af62 	bpl.w	8006124 <_scanf_float+0x64>
 8006260:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	e7f4      	b.n	8006252 <_scanf_float+0x192>
 8006268:	f1ba 0f00 	cmp.w	sl, #0
 800626c:	d10e      	bne.n	800628c <_scanf_float+0x1cc>
 800626e:	f1b9 0f00 	cmp.w	r9, #0
 8006272:	d10e      	bne.n	8006292 <_scanf_float+0x1d2>
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800627a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800627e:	d108      	bne.n	8006292 <_scanf_float+0x1d2>
 8006280:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006284:	6022      	str	r2, [r4, #0]
 8006286:	f04f 0a01 	mov.w	sl, #1
 800628a:	e7e2      	b.n	8006252 <_scanf_float+0x192>
 800628c:	f1ba 0f02 	cmp.w	sl, #2
 8006290:	d055      	beq.n	800633e <_scanf_float+0x27e>
 8006292:	2d01      	cmp	r5, #1
 8006294:	d002      	beq.n	800629c <_scanf_float+0x1dc>
 8006296:	2d04      	cmp	r5, #4
 8006298:	f47f af44 	bne.w	8006124 <_scanf_float+0x64>
 800629c:	3501      	adds	r5, #1
 800629e:	b2ed      	uxtb	r5, r5
 80062a0:	e7d7      	b.n	8006252 <_scanf_float+0x192>
 80062a2:	f1ba 0f01 	cmp.w	sl, #1
 80062a6:	f47f af3d 	bne.w	8006124 <_scanf_float+0x64>
 80062aa:	f04f 0a02 	mov.w	sl, #2
 80062ae:	e7d0      	b.n	8006252 <_scanf_float+0x192>
 80062b0:	b97d      	cbnz	r5, 80062d2 <_scanf_float+0x212>
 80062b2:	f1b9 0f00 	cmp.w	r9, #0
 80062b6:	f47f af38 	bne.w	800612a <_scanf_float+0x6a>
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80062c0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80062c4:	f040 8108 	bne.w	80064d8 <_scanf_float+0x418>
 80062c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062cc:	6022      	str	r2, [r4, #0]
 80062ce:	2501      	movs	r5, #1
 80062d0:	e7bf      	b.n	8006252 <_scanf_float+0x192>
 80062d2:	2d03      	cmp	r5, #3
 80062d4:	d0e2      	beq.n	800629c <_scanf_float+0x1dc>
 80062d6:	2d05      	cmp	r5, #5
 80062d8:	e7de      	b.n	8006298 <_scanf_float+0x1d8>
 80062da:	2d02      	cmp	r5, #2
 80062dc:	f47f af22 	bne.w	8006124 <_scanf_float+0x64>
 80062e0:	2503      	movs	r5, #3
 80062e2:	e7b6      	b.n	8006252 <_scanf_float+0x192>
 80062e4:	2d06      	cmp	r5, #6
 80062e6:	f47f af1d 	bne.w	8006124 <_scanf_float+0x64>
 80062ea:	2507      	movs	r5, #7
 80062ec:	e7b1      	b.n	8006252 <_scanf_float+0x192>
 80062ee:	6822      	ldr	r2, [r4, #0]
 80062f0:	0591      	lsls	r1, r2, #22
 80062f2:	f57f af17 	bpl.w	8006124 <_scanf_float+0x64>
 80062f6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8006300:	e7a7      	b.n	8006252 <_scanf_float+0x192>
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006308:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800630c:	d006      	beq.n	800631c <_scanf_float+0x25c>
 800630e:	0550      	lsls	r0, r2, #21
 8006310:	f57f af08 	bpl.w	8006124 <_scanf_float+0x64>
 8006314:	f1b9 0f00 	cmp.w	r9, #0
 8006318:	f000 80de 	beq.w	80064d8 <_scanf_float+0x418>
 800631c:	0591      	lsls	r1, r2, #22
 800631e:	bf58      	it	pl
 8006320:	9902      	ldrpl	r1, [sp, #8]
 8006322:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006326:	bf58      	it	pl
 8006328:	eba9 0101 	subpl.w	r1, r9, r1
 800632c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006330:	bf58      	it	pl
 8006332:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006336:	6022      	str	r2, [r4, #0]
 8006338:	f04f 0900 	mov.w	r9, #0
 800633c:	e789      	b.n	8006252 <_scanf_float+0x192>
 800633e:	f04f 0a03 	mov.w	sl, #3
 8006342:	e786      	b.n	8006252 <_scanf_float+0x192>
 8006344:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006348:	4639      	mov	r1, r7
 800634a:	4640      	mov	r0, r8
 800634c:	4798      	blx	r3
 800634e:	2800      	cmp	r0, #0
 8006350:	f43f aedb 	beq.w	800610a <_scanf_float+0x4a>
 8006354:	e6e6      	b.n	8006124 <_scanf_float+0x64>
 8006356:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800635a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800635e:	463a      	mov	r2, r7
 8006360:	4640      	mov	r0, r8
 8006362:	4798      	blx	r3
 8006364:	6923      	ldr	r3, [r4, #16]
 8006366:	3b01      	subs	r3, #1
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	e6e8      	b.n	800613e <_scanf_float+0x7e>
 800636c:	1e6b      	subs	r3, r5, #1
 800636e:	2b06      	cmp	r3, #6
 8006370:	d824      	bhi.n	80063bc <_scanf_float+0x2fc>
 8006372:	2d02      	cmp	r5, #2
 8006374:	d836      	bhi.n	80063e4 <_scanf_float+0x324>
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	429e      	cmp	r6, r3
 800637a:	f67f aee4 	bls.w	8006146 <_scanf_float+0x86>
 800637e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006382:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006386:	463a      	mov	r2, r7
 8006388:	4640      	mov	r0, r8
 800638a:	4798      	blx	r3
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	3b01      	subs	r3, #1
 8006390:	6123      	str	r3, [r4, #16]
 8006392:	e7f0      	b.n	8006376 <_scanf_float+0x2b6>
 8006394:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006398:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800639c:	463a      	mov	r2, r7
 800639e:	4640      	mov	r0, r8
 80063a0:	4798      	blx	r3
 80063a2:	6923      	ldr	r3, [r4, #16]
 80063a4:	3b01      	subs	r3, #1
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80063ac:	fa5f fa8a 	uxtb.w	sl, sl
 80063b0:	f1ba 0f02 	cmp.w	sl, #2
 80063b4:	d1ee      	bne.n	8006394 <_scanf_float+0x2d4>
 80063b6:	3d03      	subs	r5, #3
 80063b8:	b2ed      	uxtb	r5, r5
 80063ba:	1b76      	subs	r6, r6, r5
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	05da      	lsls	r2, r3, #23
 80063c0:	d530      	bpl.n	8006424 <_scanf_float+0x364>
 80063c2:	055b      	lsls	r3, r3, #21
 80063c4:	d511      	bpl.n	80063ea <_scanf_float+0x32a>
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	429e      	cmp	r6, r3
 80063ca:	f67f aebc 	bls.w	8006146 <_scanf_float+0x86>
 80063ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80063d6:	463a      	mov	r2, r7
 80063d8:	4640      	mov	r0, r8
 80063da:	4798      	blx	r3
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	3b01      	subs	r3, #1
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	e7f0      	b.n	80063c6 <_scanf_float+0x306>
 80063e4:	46aa      	mov	sl, r5
 80063e6:	46b3      	mov	fp, r6
 80063e8:	e7de      	b.n	80063a8 <_scanf_float+0x2e8>
 80063ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063ee:	6923      	ldr	r3, [r4, #16]
 80063f0:	2965      	cmp	r1, #101	@ 0x65
 80063f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80063f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80063fa:	6123      	str	r3, [r4, #16]
 80063fc:	d00c      	beq.n	8006418 <_scanf_float+0x358>
 80063fe:	2945      	cmp	r1, #69	@ 0x45
 8006400:	d00a      	beq.n	8006418 <_scanf_float+0x358>
 8006402:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006406:	463a      	mov	r2, r7
 8006408:	4640      	mov	r0, r8
 800640a:	4798      	blx	r3
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006412:	3b01      	subs	r3, #1
 8006414:	1eb5      	subs	r5, r6, #2
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800641c:	463a      	mov	r2, r7
 800641e:	4640      	mov	r0, r8
 8006420:	4798      	blx	r3
 8006422:	462e      	mov	r6, r5
 8006424:	6822      	ldr	r2, [r4, #0]
 8006426:	f012 0210 	ands.w	r2, r2, #16
 800642a:	d001      	beq.n	8006430 <_scanf_float+0x370>
 800642c:	2000      	movs	r0, #0
 800642e:	e68b      	b.n	8006148 <_scanf_float+0x88>
 8006430:	7032      	strb	r2, [r6, #0]
 8006432:	6823      	ldr	r3, [r4, #0]
 8006434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800643c:	d11c      	bne.n	8006478 <_scanf_float+0x3b8>
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	454b      	cmp	r3, r9
 8006442:	eba3 0209 	sub.w	r2, r3, r9
 8006446:	d123      	bne.n	8006490 <_scanf_float+0x3d0>
 8006448:	9901      	ldr	r1, [sp, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	4640      	mov	r0, r8
 800644e:	f002 fc2b 	bl	8008ca8 <_strtod_r>
 8006452:	9b03      	ldr	r3, [sp, #12]
 8006454:	6821      	ldr	r1, [r4, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f011 0f02 	tst.w	r1, #2
 800645c:	ec57 6b10 	vmov	r6, r7, d0
 8006460:	f103 0204 	add.w	r2, r3, #4
 8006464:	d01f      	beq.n	80064a6 <_scanf_float+0x3e6>
 8006466:	9903      	ldr	r1, [sp, #12]
 8006468:	600a      	str	r2, [r1, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	e9c3 6700 	strd	r6, r7, [r3]
 8006470:	68e3      	ldr	r3, [r4, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60e3      	str	r3, [r4, #12]
 8006476:	e7d9      	b.n	800642c <_scanf_float+0x36c>
 8006478:	9b04      	ldr	r3, [sp, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0e4      	beq.n	8006448 <_scanf_float+0x388>
 800647e:	9905      	ldr	r1, [sp, #20]
 8006480:	230a      	movs	r3, #10
 8006482:	3101      	adds	r1, #1
 8006484:	4640      	mov	r0, r8
 8006486:	f002 fc8f 	bl	8008da8 <_strtol_r>
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	9e05      	ldr	r6, [sp, #20]
 800648e:	1ac2      	subs	r2, r0, r3
 8006490:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006494:	429e      	cmp	r6, r3
 8006496:	bf28      	it	cs
 8006498:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800649c:	4910      	ldr	r1, [pc, #64]	@ (80064e0 <_scanf_float+0x420>)
 800649e:	4630      	mov	r0, r6
 80064a0:	f000 f918 	bl	80066d4 <siprintf>
 80064a4:	e7d0      	b.n	8006448 <_scanf_float+0x388>
 80064a6:	f011 0f04 	tst.w	r1, #4
 80064aa:	9903      	ldr	r1, [sp, #12]
 80064ac:	600a      	str	r2, [r1, #0]
 80064ae:	d1dc      	bne.n	800646a <_scanf_float+0x3aa>
 80064b0:	681d      	ldr	r5, [r3, #0]
 80064b2:	4632      	mov	r2, r6
 80064b4:	463b      	mov	r3, r7
 80064b6:	4630      	mov	r0, r6
 80064b8:	4639      	mov	r1, r7
 80064ba:	f7fa fb3f 	bl	8000b3c <__aeabi_dcmpun>
 80064be:	b128      	cbz	r0, 80064cc <_scanf_float+0x40c>
 80064c0:	4808      	ldr	r0, [pc, #32]	@ (80064e4 <_scanf_float+0x424>)
 80064c2:	f000 f9eb 	bl	800689c <nanf>
 80064c6:	ed85 0a00 	vstr	s0, [r5]
 80064ca:	e7d1      	b.n	8006470 <_scanf_float+0x3b0>
 80064cc:	4630      	mov	r0, r6
 80064ce:	4639      	mov	r1, r7
 80064d0:	f7fa fb92 	bl	8000bf8 <__aeabi_d2f>
 80064d4:	6028      	str	r0, [r5, #0]
 80064d6:	e7cb      	b.n	8006470 <_scanf_float+0x3b0>
 80064d8:	f04f 0900 	mov.w	r9, #0
 80064dc:	e629      	b.n	8006132 <_scanf_float+0x72>
 80064de:	bf00      	nop
 80064e0:	08009fe8 	.word	0x08009fe8
 80064e4:	0800a37d 	.word	0x0800a37d

080064e8 <std>:
 80064e8:	2300      	movs	r3, #0
 80064ea:	b510      	push	{r4, lr}
 80064ec:	4604      	mov	r4, r0
 80064ee:	e9c0 3300 	strd	r3, r3, [r0]
 80064f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064f6:	6083      	str	r3, [r0, #8]
 80064f8:	8181      	strh	r1, [r0, #12]
 80064fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80064fc:	81c2      	strh	r2, [r0, #14]
 80064fe:	6183      	str	r3, [r0, #24]
 8006500:	4619      	mov	r1, r3
 8006502:	2208      	movs	r2, #8
 8006504:	305c      	adds	r0, #92	@ 0x5c
 8006506:	f000 f948 	bl	800679a <memset>
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <std+0x58>)
 800650c:	6263      	str	r3, [r4, #36]	@ 0x24
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <std+0x5c>)
 8006510:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <std+0x60>)
 8006514:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <std+0x64>)
 8006518:	6323      	str	r3, [r4, #48]	@ 0x30
 800651a:	4b0d      	ldr	r3, [pc, #52]	@ (8006550 <std+0x68>)
 800651c:	6224      	str	r4, [r4, #32]
 800651e:	429c      	cmp	r4, r3
 8006520:	d006      	beq.n	8006530 <std+0x48>
 8006522:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006526:	4294      	cmp	r4, r2
 8006528:	d002      	beq.n	8006530 <std+0x48>
 800652a:	33d0      	adds	r3, #208	@ 0xd0
 800652c:	429c      	cmp	r4, r3
 800652e:	d105      	bne.n	800653c <std+0x54>
 8006530:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006538:	f000 b9ac 	b.w	8006894 <__retarget_lock_init_recursive>
 800653c:	bd10      	pop	{r4, pc}
 800653e:	bf00      	nop
 8006540:	08006715 	.word	0x08006715
 8006544:	08006737 	.word	0x08006737
 8006548:	0800676f 	.word	0x0800676f
 800654c:	08006793 	.word	0x08006793
 8006550:	20000460 	.word	0x20000460

08006554 <stdio_exit_handler>:
 8006554:	4a02      	ldr	r2, [pc, #8]	@ (8006560 <stdio_exit_handler+0xc>)
 8006556:	4903      	ldr	r1, [pc, #12]	@ (8006564 <stdio_exit_handler+0x10>)
 8006558:	4803      	ldr	r0, [pc, #12]	@ (8006568 <stdio_exit_handler+0x14>)
 800655a:	f000 b869 	b.w	8006630 <_fwalk_sglue>
 800655e:	bf00      	nop
 8006560:	20000034 	.word	0x20000034
 8006564:	08009165 	.word	0x08009165
 8006568:	20000044 	.word	0x20000044

0800656c <cleanup_stdio>:
 800656c:	6841      	ldr	r1, [r0, #4]
 800656e:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <cleanup_stdio+0x34>)
 8006570:	4299      	cmp	r1, r3
 8006572:	b510      	push	{r4, lr}
 8006574:	4604      	mov	r4, r0
 8006576:	d001      	beq.n	800657c <cleanup_stdio+0x10>
 8006578:	f002 fdf4 	bl	8009164 <_fflush_r>
 800657c:	68a1      	ldr	r1, [r4, #8]
 800657e:	4b09      	ldr	r3, [pc, #36]	@ (80065a4 <cleanup_stdio+0x38>)
 8006580:	4299      	cmp	r1, r3
 8006582:	d002      	beq.n	800658a <cleanup_stdio+0x1e>
 8006584:	4620      	mov	r0, r4
 8006586:	f002 fded 	bl	8009164 <_fflush_r>
 800658a:	68e1      	ldr	r1, [r4, #12]
 800658c:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <cleanup_stdio+0x3c>)
 800658e:	4299      	cmp	r1, r3
 8006590:	d004      	beq.n	800659c <cleanup_stdio+0x30>
 8006592:	4620      	mov	r0, r4
 8006594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006598:	f002 bde4 	b.w	8009164 <_fflush_r>
 800659c:	bd10      	pop	{r4, pc}
 800659e:	bf00      	nop
 80065a0:	20000460 	.word	0x20000460
 80065a4:	200004c8 	.word	0x200004c8
 80065a8:	20000530 	.word	0x20000530

080065ac <global_stdio_init.part.0>:
 80065ac:	b510      	push	{r4, lr}
 80065ae:	4b0b      	ldr	r3, [pc, #44]	@ (80065dc <global_stdio_init.part.0+0x30>)
 80065b0:	4c0b      	ldr	r4, [pc, #44]	@ (80065e0 <global_stdio_init.part.0+0x34>)
 80065b2:	4a0c      	ldr	r2, [pc, #48]	@ (80065e4 <global_stdio_init.part.0+0x38>)
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	4620      	mov	r0, r4
 80065b8:	2200      	movs	r2, #0
 80065ba:	2104      	movs	r1, #4
 80065bc:	f7ff ff94 	bl	80064e8 <std>
 80065c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065c4:	2201      	movs	r2, #1
 80065c6:	2109      	movs	r1, #9
 80065c8:	f7ff ff8e 	bl	80064e8 <std>
 80065cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065d0:	2202      	movs	r2, #2
 80065d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d6:	2112      	movs	r1, #18
 80065d8:	f7ff bf86 	b.w	80064e8 <std>
 80065dc:	20000598 	.word	0x20000598
 80065e0:	20000460 	.word	0x20000460
 80065e4:	08006555 	.word	0x08006555

080065e8 <__sfp_lock_acquire>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__sfp_lock_acquire+0x8>)
 80065ea:	f000 b954 	b.w	8006896 <__retarget_lock_acquire_recursive>
 80065ee:	bf00      	nop
 80065f0:	200005a1 	.word	0x200005a1

080065f4 <__sfp_lock_release>:
 80065f4:	4801      	ldr	r0, [pc, #4]	@ (80065fc <__sfp_lock_release+0x8>)
 80065f6:	f000 b94f 	b.w	8006898 <__retarget_lock_release_recursive>
 80065fa:	bf00      	nop
 80065fc:	200005a1 	.word	0x200005a1

08006600 <__sinit>:
 8006600:	b510      	push	{r4, lr}
 8006602:	4604      	mov	r4, r0
 8006604:	f7ff fff0 	bl	80065e8 <__sfp_lock_acquire>
 8006608:	6a23      	ldr	r3, [r4, #32]
 800660a:	b11b      	cbz	r3, 8006614 <__sinit+0x14>
 800660c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006610:	f7ff bff0 	b.w	80065f4 <__sfp_lock_release>
 8006614:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <__sinit+0x28>)
 8006616:	6223      	str	r3, [r4, #32]
 8006618:	4b04      	ldr	r3, [pc, #16]	@ (800662c <__sinit+0x2c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d1f5      	bne.n	800660c <__sinit+0xc>
 8006620:	f7ff ffc4 	bl	80065ac <global_stdio_init.part.0>
 8006624:	e7f2      	b.n	800660c <__sinit+0xc>
 8006626:	bf00      	nop
 8006628:	0800656d 	.word	0x0800656d
 800662c:	20000598 	.word	0x20000598

08006630 <_fwalk_sglue>:
 8006630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006634:	4607      	mov	r7, r0
 8006636:	4688      	mov	r8, r1
 8006638:	4614      	mov	r4, r2
 800663a:	2600      	movs	r6, #0
 800663c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006640:	f1b9 0901 	subs.w	r9, r9, #1
 8006644:	d505      	bpl.n	8006652 <_fwalk_sglue+0x22>
 8006646:	6824      	ldr	r4, [r4, #0]
 8006648:	2c00      	cmp	r4, #0
 800664a:	d1f7      	bne.n	800663c <_fwalk_sglue+0xc>
 800664c:	4630      	mov	r0, r6
 800664e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006652:	89ab      	ldrh	r3, [r5, #12]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d907      	bls.n	8006668 <_fwalk_sglue+0x38>
 8006658:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800665c:	3301      	adds	r3, #1
 800665e:	d003      	beq.n	8006668 <_fwalk_sglue+0x38>
 8006660:	4629      	mov	r1, r5
 8006662:	4638      	mov	r0, r7
 8006664:	47c0      	blx	r8
 8006666:	4306      	orrs	r6, r0
 8006668:	3568      	adds	r5, #104	@ 0x68
 800666a:	e7e9      	b.n	8006640 <_fwalk_sglue+0x10>

0800666c <sniprintf>:
 800666c:	b40c      	push	{r2, r3}
 800666e:	b530      	push	{r4, r5, lr}
 8006670:	4b17      	ldr	r3, [pc, #92]	@ (80066d0 <sniprintf+0x64>)
 8006672:	1e0c      	subs	r4, r1, #0
 8006674:	681d      	ldr	r5, [r3, #0]
 8006676:	b09d      	sub	sp, #116	@ 0x74
 8006678:	da08      	bge.n	800668c <sniprintf+0x20>
 800667a:	238b      	movs	r3, #139	@ 0x8b
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	f04f 30ff 	mov.w	r0, #4294967295
 8006682:	b01d      	add	sp, #116	@ 0x74
 8006684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006688:	b002      	add	sp, #8
 800668a:	4770      	bx	lr
 800668c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006690:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006694:	bf14      	ite	ne
 8006696:	f104 33ff 	addne.w	r3, r4, #4294967295
 800669a:	4623      	moveq	r3, r4
 800669c:	9304      	str	r3, [sp, #16]
 800669e:	9307      	str	r3, [sp, #28]
 80066a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80066a4:	9002      	str	r0, [sp, #8]
 80066a6:	9006      	str	r0, [sp, #24]
 80066a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80066ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066ae:	ab21      	add	r3, sp, #132	@ 0x84
 80066b0:	a902      	add	r1, sp, #8
 80066b2:	4628      	mov	r0, r5
 80066b4:	9301      	str	r3, [sp, #4]
 80066b6:	f002 fbd5 	bl	8008e64 <_svfiprintf_r>
 80066ba:	1c43      	adds	r3, r0, #1
 80066bc:	bfbc      	itt	lt
 80066be:	238b      	movlt	r3, #139	@ 0x8b
 80066c0:	602b      	strlt	r3, [r5, #0]
 80066c2:	2c00      	cmp	r4, #0
 80066c4:	d0dd      	beq.n	8006682 <sniprintf+0x16>
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
 80066cc:	e7d9      	b.n	8006682 <sniprintf+0x16>
 80066ce:	bf00      	nop
 80066d0:	20000040 	.word	0x20000040

080066d4 <siprintf>:
 80066d4:	b40e      	push	{r1, r2, r3}
 80066d6:	b500      	push	{lr}
 80066d8:	b09c      	sub	sp, #112	@ 0x70
 80066da:	ab1d      	add	r3, sp, #116	@ 0x74
 80066dc:	9002      	str	r0, [sp, #8]
 80066de:	9006      	str	r0, [sp, #24]
 80066e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80066e4:	4809      	ldr	r0, [pc, #36]	@ (800670c <siprintf+0x38>)
 80066e6:	9107      	str	r1, [sp, #28]
 80066e8:	9104      	str	r1, [sp, #16]
 80066ea:	4909      	ldr	r1, [pc, #36]	@ (8006710 <siprintf+0x3c>)
 80066ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80066f0:	9105      	str	r1, [sp, #20]
 80066f2:	6800      	ldr	r0, [r0, #0]
 80066f4:	9301      	str	r3, [sp, #4]
 80066f6:	a902      	add	r1, sp, #8
 80066f8:	f002 fbb4 	bl	8008e64 <_svfiprintf_r>
 80066fc:	9b02      	ldr	r3, [sp, #8]
 80066fe:	2200      	movs	r2, #0
 8006700:	701a      	strb	r2, [r3, #0]
 8006702:	b01c      	add	sp, #112	@ 0x70
 8006704:	f85d eb04 	ldr.w	lr, [sp], #4
 8006708:	b003      	add	sp, #12
 800670a:	4770      	bx	lr
 800670c:	20000040 	.word	0x20000040
 8006710:	ffff0208 	.word	0xffff0208

08006714 <__sread>:
 8006714:	b510      	push	{r4, lr}
 8006716:	460c      	mov	r4, r1
 8006718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800671c:	f000 f86c 	bl	80067f8 <_read_r>
 8006720:	2800      	cmp	r0, #0
 8006722:	bfab      	itete	ge
 8006724:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006726:	89a3      	ldrhlt	r3, [r4, #12]
 8006728:	181b      	addge	r3, r3, r0
 800672a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800672e:	bfac      	ite	ge
 8006730:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006732:	81a3      	strhlt	r3, [r4, #12]
 8006734:	bd10      	pop	{r4, pc}

08006736 <__swrite>:
 8006736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673a:	461f      	mov	r7, r3
 800673c:	898b      	ldrh	r3, [r1, #12]
 800673e:	05db      	lsls	r3, r3, #23
 8006740:	4605      	mov	r5, r0
 8006742:	460c      	mov	r4, r1
 8006744:	4616      	mov	r6, r2
 8006746:	d505      	bpl.n	8006754 <__swrite+0x1e>
 8006748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800674c:	2302      	movs	r3, #2
 800674e:	2200      	movs	r2, #0
 8006750:	f000 f840 	bl	80067d4 <_lseek_r>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800675a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	4632      	mov	r2, r6
 8006762:	463b      	mov	r3, r7
 8006764:	4628      	mov	r0, r5
 8006766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800676a:	f000 b857 	b.w	800681c <_write_r>

0800676e <__sseek>:
 800676e:	b510      	push	{r4, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006776:	f000 f82d 	bl	80067d4 <_lseek_r>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	bf15      	itete	ne
 8006780:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006782:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006786:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800678a:	81a3      	strheq	r3, [r4, #12]
 800678c:	bf18      	it	ne
 800678e:	81a3      	strhne	r3, [r4, #12]
 8006790:	bd10      	pop	{r4, pc}

08006792 <__sclose>:
 8006792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006796:	f000 b80d 	b.w	80067b4 <_close_r>

0800679a <memset>:
 800679a:	4402      	add	r2, r0
 800679c:	4603      	mov	r3, r0
 800679e:	4293      	cmp	r3, r2
 80067a0:	d100      	bne.n	80067a4 <memset+0xa>
 80067a2:	4770      	bx	lr
 80067a4:	f803 1b01 	strb.w	r1, [r3], #1
 80067a8:	e7f9      	b.n	800679e <memset+0x4>
	...

080067ac <_localeconv_r>:
 80067ac:	4800      	ldr	r0, [pc, #0]	@ (80067b0 <_localeconv_r+0x4>)
 80067ae:	4770      	bx	lr
 80067b0:	20000180 	.word	0x20000180

080067b4 <_close_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4d06      	ldr	r5, [pc, #24]	@ (80067d0 <_close_r+0x1c>)
 80067b8:	2300      	movs	r3, #0
 80067ba:	4604      	mov	r4, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	602b      	str	r3, [r5, #0]
 80067c0:	f7fb fb2a 	bl	8001e18 <_close>
 80067c4:	1c43      	adds	r3, r0, #1
 80067c6:	d102      	bne.n	80067ce <_close_r+0x1a>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	b103      	cbz	r3, 80067ce <_close_r+0x1a>
 80067cc:	6023      	str	r3, [r4, #0]
 80067ce:	bd38      	pop	{r3, r4, r5, pc}
 80067d0:	2000059c 	.word	0x2000059c

080067d4 <_lseek_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	@ (80067f4 <_lseek_r+0x20>)
 80067d8:	4604      	mov	r4, r0
 80067da:	4608      	mov	r0, r1
 80067dc:	4611      	mov	r1, r2
 80067de:	2200      	movs	r2, #0
 80067e0:	602a      	str	r2, [r5, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f7fb fb3f 	bl	8001e66 <_lseek>
 80067e8:	1c43      	adds	r3, r0, #1
 80067ea:	d102      	bne.n	80067f2 <_lseek_r+0x1e>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	b103      	cbz	r3, 80067f2 <_lseek_r+0x1e>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	bd38      	pop	{r3, r4, r5, pc}
 80067f4:	2000059c 	.word	0x2000059c

080067f8 <_read_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d07      	ldr	r5, [pc, #28]	@ (8006818 <_read_r+0x20>)
 80067fc:	4604      	mov	r4, r0
 80067fe:	4608      	mov	r0, r1
 8006800:	4611      	mov	r1, r2
 8006802:	2200      	movs	r2, #0
 8006804:	602a      	str	r2, [r5, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	f7fb facd 	bl	8001da6 <_read>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_read_r+0x1e>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_read_r+0x1e>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	2000059c 	.word	0x2000059c

0800681c <_write_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d07      	ldr	r5, [pc, #28]	@ (800683c <_write_r+0x20>)
 8006820:	4604      	mov	r4, r0
 8006822:	4608      	mov	r0, r1
 8006824:	4611      	mov	r1, r2
 8006826:	2200      	movs	r2, #0
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f7fb fad8 	bl	8001de0 <_write>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_write_r+0x1e>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_write_r+0x1e>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	2000059c 	.word	0x2000059c

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	@ (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	20000040 	.word	0x20000040

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4d0d      	ldr	r5, [pc, #52]	@ (8006884 <__libc_init_array+0x38>)
 8006850:	4c0d      	ldr	r4, [pc, #52]	@ (8006888 <__libc_init_array+0x3c>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	2600      	movs	r6, #0
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	4d0b      	ldr	r5, [pc, #44]	@ (800688c <__libc_init_array+0x40>)
 800685e:	4c0c      	ldr	r4, [pc, #48]	@ (8006890 <__libc_init_array+0x44>)
 8006860:	f003 fb70 	bl	8009f44 <_init>
 8006864:	1b64      	subs	r4, r4, r5
 8006866:	10a4      	asrs	r4, r4, #2
 8006868:	2600      	movs	r6, #0
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	f855 3b04 	ldr.w	r3, [r5], #4
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	f855 3b04 	ldr.w	r3, [r5], #4
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	0800a3e8 	.word	0x0800a3e8
 8006888:	0800a3e8 	.word	0x0800a3e8
 800688c:	0800a3e8 	.word	0x0800a3e8
 8006890:	0800a3ec 	.word	0x0800a3ec

08006894 <__retarget_lock_init_recursive>:
 8006894:	4770      	bx	lr

08006896 <__retarget_lock_acquire_recursive>:
 8006896:	4770      	bx	lr

08006898 <__retarget_lock_release_recursive>:
 8006898:	4770      	bx	lr
	...

0800689c <nanf>:
 800689c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068a4 <nanf+0x8>
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	7fc00000 	.word	0x7fc00000

080068a8 <quorem>:
 80068a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ac:	6903      	ldr	r3, [r0, #16]
 80068ae:	690c      	ldr	r4, [r1, #16]
 80068b0:	42a3      	cmp	r3, r4
 80068b2:	4607      	mov	r7, r0
 80068b4:	db7e      	blt.n	80069b4 <quorem+0x10c>
 80068b6:	3c01      	subs	r4, #1
 80068b8:	f101 0814 	add.w	r8, r1, #20
 80068bc:	00a3      	lsls	r3, r4, #2
 80068be:	f100 0514 	add.w	r5, r0, #20
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068d2:	3301      	adds	r3, #1
 80068d4:	429a      	cmp	r2, r3
 80068d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068da:	fbb2 f6f3 	udiv	r6, r2, r3
 80068de:	d32e      	bcc.n	800693e <quorem+0x96>
 80068e0:	f04f 0a00 	mov.w	sl, #0
 80068e4:	46c4      	mov	ip, r8
 80068e6:	46ae      	mov	lr, r5
 80068e8:	46d3      	mov	fp, sl
 80068ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068ee:	b298      	uxth	r0, r3
 80068f0:	fb06 a000 	mla	r0, r6, r0, sl
 80068f4:	0c02      	lsrs	r2, r0, #16
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	fb06 2303 	mla	r3, r6, r3, r2
 80068fc:	f8de 2000 	ldr.w	r2, [lr]
 8006900:	b280      	uxth	r0, r0
 8006902:	b292      	uxth	r2, r2
 8006904:	1a12      	subs	r2, r2, r0
 8006906:	445a      	add	r2, fp
 8006908:	f8de 0000 	ldr.w	r0, [lr]
 800690c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006910:	b29b      	uxth	r3, r3
 8006912:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006916:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800691a:	b292      	uxth	r2, r2
 800691c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006920:	45e1      	cmp	r9, ip
 8006922:	f84e 2b04 	str.w	r2, [lr], #4
 8006926:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800692a:	d2de      	bcs.n	80068ea <quorem+0x42>
 800692c:	9b00      	ldr	r3, [sp, #0]
 800692e:	58eb      	ldr	r3, [r5, r3]
 8006930:	b92b      	cbnz	r3, 800693e <quorem+0x96>
 8006932:	9b01      	ldr	r3, [sp, #4]
 8006934:	3b04      	subs	r3, #4
 8006936:	429d      	cmp	r5, r3
 8006938:	461a      	mov	r2, r3
 800693a:	d32f      	bcc.n	800699c <quorem+0xf4>
 800693c:	613c      	str	r4, [r7, #16]
 800693e:	4638      	mov	r0, r7
 8006940:	f001 f9c2 	bl	8007cc8 <__mcmp>
 8006944:	2800      	cmp	r0, #0
 8006946:	db25      	blt.n	8006994 <quorem+0xec>
 8006948:	4629      	mov	r1, r5
 800694a:	2000      	movs	r0, #0
 800694c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006950:	f8d1 c000 	ldr.w	ip, [r1]
 8006954:	fa1f fe82 	uxth.w	lr, r2
 8006958:	fa1f f38c 	uxth.w	r3, ip
 800695c:	eba3 030e 	sub.w	r3, r3, lr
 8006960:	4403      	add	r3, r0
 8006962:	0c12      	lsrs	r2, r2, #16
 8006964:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006968:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800696c:	b29b      	uxth	r3, r3
 800696e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006972:	45c1      	cmp	r9, r8
 8006974:	f841 3b04 	str.w	r3, [r1], #4
 8006978:	ea4f 4022 	mov.w	r0, r2, asr #16
 800697c:	d2e6      	bcs.n	800694c <quorem+0xa4>
 800697e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006982:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006986:	b922      	cbnz	r2, 8006992 <quorem+0xea>
 8006988:	3b04      	subs	r3, #4
 800698a:	429d      	cmp	r5, r3
 800698c:	461a      	mov	r2, r3
 800698e:	d30b      	bcc.n	80069a8 <quorem+0x100>
 8006990:	613c      	str	r4, [r7, #16]
 8006992:	3601      	adds	r6, #1
 8006994:	4630      	mov	r0, r6
 8006996:	b003      	add	sp, #12
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	3b04      	subs	r3, #4
 80069a0:	2a00      	cmp	r2, #0
 80069a2:	d1cb      	bne.n	800693c <quorem+0x94>
 80069a4:	3c01      	subs	r4, #1
 80069a6:	e7c6      	b.n	8006936 <quorem+0x8e>
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	3b04      	subs	r3, #4
 80069ac:	2a00      	cmp	r2, #0
 80069ae:	d1ef      	bne.n	8006990 <quorem+0xe8>
 80069b0:	3c01      	subs	r4, #1
 80069b2:	e7ea      	b.n	800698a <quorem+0xe2>
 80069b4:	2000      	movs	r0, #0
 80069b6:	e7ee      	b.n	8006996 <quorem+0xee>

080069b8 <_dtoa_r>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	69c7      	ldr	r7, [r0, #28]
 80069be:	b099      	sub	sp, #100	@ 0x64
 80069c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80069c4:	ec55 4b10 	vmov	r4, r5, d0
 80069c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80069ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80069cc:	4683      	mov	fp, r0
 80069ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80069d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80069d2:	b97f      	cbnz	r7, 80069f4 <_dtoa_r+0x3c>
 80069d4:	2010      	movs	r0, #16
 80069d6:	f000 fdfd 	bl	80075d4 <malloc>
 80069da:	4602      	mov	r2, r0
 80069dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80069e0:	b920      	cbnz	r0, 80069ec <_dtoa_r+0x34>
 80069e2:	4ba7      	ldr	r3, [pc, #668]	@ (8006c80 <_dtoa_r+0x2c8>)
 80069e4:	21ef      	movs	r1, #239	@ 0xef
 80069e6:	48a7      	ldr	r0, [pc, #668]	@ (8006c84 <_dtoa_r+0x2cc>)
 80069e8:	f002 fc36 	bl	8009258 <__assert_func>
 80069ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80069f0:	6007      	str	r7, [r0, #0]
 80069f2:	60c7      	str	r7, [r0, #12]
 80069f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80069f8:	6819      	ldr	r1, [r3, #0]
 80069fa:	b159      	cbz	r1, 8006a14 <_dtoa_r+0x5c>
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	604a      	str	r2, [r1, #4]
 8006a00:	2301      	movs	r3, #1
 8006a02:	4093      	lsls	r3, r2
 8006a04:	608b      	str	r3, [r1, #8]
 8006a06:	4658      	mov	r0, fp
 8006a08:	f000 feda 	bl	80077c0 <_Bfree>
 8006a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	1e2b      	subs	r3, r5, #0
 8006a16:	bfb9      	ittee	lt
 8006a18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a1c:	9303      	strlt	r3, [sp, #12]
 8006a1e:	2300      	movge	r3, #0
 8006a20:	6033      	strge	r3, [r6, #0]
 8006a22:	9f03      	ldr	r7, [sp, #12]
 8006a24:	4b98      	ldr	r3, [pc, #608]	@ (8006c88 <_dtoa_r+0x2d0>)
 8006a26:	bfbc      	itt	lt
 8006a28:	2201      	movlt	r2, #1
 8006a2a:	6032      	strlt	r2, [r6, #0]
 8006a2c:	43bb      	bics	r3, r7
 8006a2e:	d112      	bne.n	8006a56 <_dtoa_r+0x9e>
 8006a30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a3c:	4323      	orrs	r3, r4
 8006a3e:	f000 854d 	beq.w	80074dc <_dtoa_r+0xb24>
 8006a42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006c9c <_dtoa_r+0x2e4>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 854f 	beq.w	80074ec <_dtoa_r+0xb34>
 8006a4e:	f10a 0303 	add.w	r3, sl, #3
 8006a52:	f000 bd49 	b.w	80074e8 <_dtoa_r+0xb30>
 8006a56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	ec51 0b17 	vmov	r0, r1, d7
 8006a60:	2300      	movs	r3, #0
 8006a62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006a66:	f7fa f837 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	b158      	cbz	r0, 8006a86 <_dtoa_r+0xce>
 8006a6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a70:	2301      	movs	r3, #1
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a76:	b113      	cbz	r3, 8006a7e <_dtoa_r+0xc6>
 8006a78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a7a:	4b84      	ldr	r3, [pc, #528]	@ (8006c8c <_dtoa_r+0x2d4>)
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ca0 <_dtoa_r+0x2e8>
 8006a82:	f000 bd33 	b.w	80074ec <_dtoa_r+0xb34>
 8006a86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006a8a:	aa16      	add	r2, sp, #88	@ 0x58
 8006a8c:	a917      	add	r1, sp, #92	@ 0x5c
 8006a8e:	4658      	mov	r0, fp
 8006a90:	f001 fa3a 	bl	8007f08 <__d2b>
 8006a94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006a98:	4681      	mov	r9, r0
 8006a9a:	2e00      	cmp	r6, #0
 8006a9c:	d077      	beq.n	8006b8e <_dtoa_r+0x1d6>
 8006a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006aa0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006aac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ab0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ab4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ab8:	4619      	mov	r1, r3
 8006aba:	2200      	movs	r2, #0
 8006abc:	4b74      	ldr	r3, [pc, #464]	@ (8006c90 <_dtoa_r+0x2d8>)
 8006abe:	f7f9 fbeb 	bl	8000298 <__aeabi_dsub>
 8006ac2:	a369      	add	r3, pc, #420	@ (adr r3, 8006c68 <_dtoa_r+0x2b0>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f7f9 fd9e 	bl	8000608 <__aeabi_dmul>
 8006acc:	a368      	add	r3, pc, #416	@ (adr r3, 8006c70 <_dtoa_r+0x2b8>)
 8006ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad2:	f7f9 fbe3 	bl	800029c <__adddf3>
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4630      	mov	r0, r6
 8006ada:	460d      	mov	r5, r1
 8006adc:	f7f9 fd2a 	bl	8000534 <__aeabi_i2d>
 8006ae0:	a365      	add	r3, pc, #404	@ (adr r3, 8006c78 <_dtoa_r+0x2c0>)
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	f7f9 fd8f 	bl	8000608 <__aeabi_dmul>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4620      	mov	r0, r4
 8006af0:	4629      	mov	r1, r5
 8006af2:	f7f9 fbd3 	bl	800029c <__adddf3>
 8006af6:	4604      	mov	r4, r0
 8006af8:	460d      	mov	r5, r1
 8006afa:	f7fa f835 	bl	8000b68 <__aeabi_d2iz>
 8006afe:	2200      	movs	r2, #0
 8006b00:	4607      	mov	r7, r0
 8006b02:	2300      	movs	r3, #0
 8006b04:	4620      	mov	r0, r4
 8006b06:	4629      	mov	r1, r5
 8006b08:	f7f9 fff0 	bl	8000aec <__aeabi_dcmplt>
 8006b0c:	b140      	cbz	r0, 8006b20 <_dtoa_r+0x168>
 8006b0e:	4638      	mov	r0, r7
 8006b10:	f7f9 fd10 	bl	8000534 <__aeabi_i2d>
 8006b14:	4622      	mov	r2, r4
 8006b16:	462b      	mov	r3, r5
 8006b18:	f7f9 ffde 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b1c:	b900      	cbnz	r0, 8006b20 <_dtoa_r+0x168>
 8006b1e:	3f01      	subs	r7, #1
 8006b20:	2f16      	cmp	r7, #22
 8006b22:	d851      	bhi.n	8006bc8 <_dtoa_r+0x210>
 8006b24:	4b5b      	ldr	r3, [pc, #364]	@ (8006c94 <_dtoa_r+0x2dc>)
 8006b26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b32:	f7f9 ffdb 	bl	8000aec <__aeabi_dcmplt>
 8006b36:	2800      	cmp	r0, #0
 8006b38:	d048      	beq.n	8006bcc <_dtoa_r+0x214>
 8006b3a:	3f01      	subs	r7, #1
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006b42:	1b9b      	subs	r3, r3, r6
 8006b44:	1e5a      	subs	r2, r3, #1
 8006b46:	bf44      	itt	mi
 8006b48:	f1c3 0801 	rsbmi	r8, r3, #1
 8006b4c:	2300      	movmi	r3, #0
 8006b4e:	9208      	str	r2, [sp, #32]
 8006b50:	bf54      	ite	pl
 8006b52:	f04f 0800 	movpl.w	r8, #0
 8006b56:	9308      	strmi	r3, [sp, #32]
 8006b58:	2f00      	cmp	r7, #0
 8006b5a:	db39      	blt.n	8006bd0 <_dtoa_r+0x218>
 8006b5c:	9b08      	ldr	r3, [sp, #32]
 8006b5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006b60:	443b      	add	r3, r7
 8006b62:	9308      	str	r3, [sp, #32]
 8006b64:	2300      	movs	r3, #0
 8006b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b6a:	2b09      	cmp	r3, #9
 8006b6c:	d864      	bhi.n	8006c38 <_dtoa_r+0x280>
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	bfc4      	itt	gt
 8006b72:	3b04      	subgt	r3, #4
 8006b74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b78:	f1a3 0302 	sub.w	r3, r3, #2
 8006b7c:	bfcc      	ite	gt
 8006b7e:	2400      	movgt	r4, #0
 8006b80:	2401      	movle	r4, #1
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d863      	bhi.n	8006c4e <_dtoa_r+0x296>
 8006b86:	e8df f003 	tbb	[pc, r3]
 8006b8a:	372a      	.short	0x372a
 8006b8c:	5535      	.short	0x5535
 8006b8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006b92:	441e      	add	r6, r3
 8006b94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006b98:	2b20      	cmp	r3, #32
 8006b9a:	bfc1      	itttt	gt
 8006b9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ba0:	409f      	lslgt	r7, r3
 8006ba2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ba6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006baa:	bfd6      	itet	le
 8006bac:	f1c3 0320 	rsble	r3, r3, #32
 8006bb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006bb4:	fa04 f003 	lslle.w	r0, r4, r3
 8006bb8:	f7f9 fcac 	bl	8000514 <__aeabi_ui2d>
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006bc2:	3e01      	subs	r6, #1
 8006bc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006bc6:	e777      	b.n	8006ab8 <_dtoa_r+0x100>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e7b8      	b.n	8006b3e <_dtoa_r+0x186>
 8006bcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006bce:	e7b7      	b.n	8006b40 <_dtoa_r+0x188>
 8006bd0:	427b      	negs	r3, r7
 8006bd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	eba8 0807 	sub.w	r8, r8, r7
 8006bda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bdc:	e7c4      	b.n	8006b68 <_dtoa_r+0x1b0>
 8006bde:	2300      	movs	r3, #0
 8006be0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	dc35      	bgt.n	8006c54 <_dtoa_r+0x29c>
 8006be8:	2301      	movs	r3, #1
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	9307      	str	r3, [sp, #28]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bf2:	e00b      	b.n	8006c0c <_dtoa_r+0x254>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e7f3      	b.n	8006be0 <_dtoa_r+0x228>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfe:	18fb      	adds	r3, r7, r3
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	9307      	str	r3, [sp, #28]
 8006c08:	bfb8      	it	lt
 8006c0a:	2301      	movlt	r3, #1
 8006c0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c10:	2100      	movs	r1, #0
 8006c12:	2204      	movs	r2, #4
 8006c14:	f102 0514 	add.w	r5, r2, #20
 8006c18:	429d      	cmp	r5, r3
 8006c1a:	d91f      	bls.n	8006c5c <_dtoa_r+0x2a4>
 8006c1c:	6041      	str	r1, [r0, #4]
 8006c1e:	4658      	mov	r0, fp
 8006c20:	f000 fd8e 	bl	8007740 <_Balloc>
 8006c24:	4682      	mov	sl, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d13c      	bne.n	8006ca4 <_dtoa_r+0x2ec>
 8006c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8006c98 <_dtoa_r+0x2e0>)
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c32:	e6d8      	b.n	80069e6 <_dtoa_r+0x2e>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e7e0      	b.n	8006bfa <_dtoa_r+0x242>
 8006c38:	2401      	movs	r4, #1
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	9307      	str	r3, [sp, #28]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2312      	movs	r3, #18
 8006c4c:	e7d0      	b.n	8006bf0 <_dtoa_r+0x238>
 8006c4e:	2301      	movs	r3, #1
 8006c50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c52:	e7f5      	b.n	8006c40 <_dtoa_r+0x288>
 8006c54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	9307      	str	r3, [sp, #28]
 8006c5a:	e7d7      	b.n	8006c0c <_dtoa_r+0x254>
 8006c5c:	3101      	adds	r1, #1
 8006c5e:	0052      	lsls	r2, r2, #1
 8006c60:	e7d8      	b.n	8006c14 <_dtoa_r+0x25c>
 8006c62:	bf00      	nop
 8006c64:	f3af 8000 	nop.w
 8006c68:	636f4361 	.word	0x636f4361
 8006c6c:	3fd287a7 	.word	0x3fd287a7
 8006c70:	8b60c8b3 	.word	0x8b60c8b3
 8006c74:	3fc68a28 	.word	0x3fc68a28
 8006c78:	509f79fb 	.word	0x509f79fb
 8006c7c:	3fd34413 	.word	0x3fd34413
 8006c80:	08009ffa 	.word	0x08009ffa
 8006c84:	0800a011 	.word	0x0800a011
 8006c88:	7ff00000 	.word	0x7ff00000
 8006c8c:	08009fc5 	.word	0x08009fc5
 8006c90:	3ff80000 	.word	0x3ff80000
 8006c94:	0800a108 	.word	0x0800a108
 8006c98:	0800a069 	.word	0x0800a069
 8006c9c:	08009ff6 	.word	0x08009ff6
 8006ca0:	08009fc4 	.word	0x08009fc4
 8006ca4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ca8:	6018      	str	r0, [r3, #0]
 8006caa:	9b07      	ldr	r3, [sp, #28]
 8006cac:	2b0e      	cmp	r3, #14
 8006cae:	f200 80a4 	bhi.w	8006dfa <_dtoa_r+0x442>
 8006cb2:	2c00      	cmp	r4, #0
 8006cb4:	f000 80a1 	beq.w	8006dfa <_dtoa_r+0x442>
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	dd33      	ble.n	8006d24 <_dtoa_r+0x36c>
 8006cbc:	4bad      	ldr	r3, [pc, #692]	@ (8006f74 <_dtoa_r+0x5bc>)
 8006cbe:	f007 020f 	and.w	r2, r7, #15
 8006cc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cc6:	ed93 7b00 	vldr	d7, [r3]
 8006cca:	05f8      	lsls	r0, r7, #23
 8006ccc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006cd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006cd4:	d516      	bpl.n	8006d04 <_dtoa_r+0x34c>
 8006cd6:	4ba8      	ldr	r3, [pc, #672]	@ (8006f78 <_dtoa_r+0x5c0>)
 8006cd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ce0:	f7f9 fdbc 	bl	800085c <__aeabi_ddiv>
 8006ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ce8:	f004 040f 	and.w	r4, r4, #15
 8006cec:	2603      	movs	r6, #3
 8006cee:	4da2      	ldr	r5, [pc, #648]	@ (8006f78 <_dtoa_r+0x5c0>)
 8006cf0:	b954      	cbnz	r4, 8006d08 <_dtoa_r+0x350>
 8006cf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cfa:	f7f9 fdaf 	bl	800085c <__aeabi_ddiv>
 8006cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d02:	e028      	b.n	8006d56 <_dtoa_r+0x39e>
 8006d04:	2602      	movs	r6, #2
 8006d06:	e7f2      	b.n	8006cee <_dtoa_r+0x336>
 8006d08:	07e1      	lsls	r1, r4, #31
 8006d0a:	d508      	bpl.n	8006d1e <_dtoa_r+0x366>
 8006d0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d14:	f7f9 fc78 	bl	8000608 <__aeabi_dmul>
 8006d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d1c:	3601      	adds	r6, #1
 8006d1e:	1064      	asrs	r4, r4, #1
 8006d20:	3508      	adds	r5, #8
 8006d22:	e7e5      	b.n	8006cf0 <_dtoa_r+0x338>
 8006d24:	f000 80d2 	beq.w	8006ecc <_dtoa_r+0x514>
 8006d28:	427c      	negs	r4, r7
 8006d2a:	4b92      	ldr	r3, [pc, #584]	@ (8006f74 <_dtoa_r+0x5bc>)
 8006d2c:	4d92      	ldr	r5, [pc, #584]	@ (8006f78 <_dtoa_r+0x5c0>)
 8006d2e:	f004 020f 	and.w	r2, r4, #15
 8006d32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d3e:	f7f9 fc63 	bl	8000608 <__aeabi_dmul>
 8006d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d46:	1124      	asrs	r4, r4, #4
 8006d48:	2300      	movs	r3, #0
 8006d4a:	2602      	movs	r6, #2
 8006d4c:	2c00      	cmp	r4, #0
 8006d4e:	f040 80b2 	bne.w	8006eb6 <_dtoa_r+0x4fe>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1d3      	bne.n	8006cfe <_dtoa_r+0x346>
 8006d56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 80b7 	beq.w	8006ed0 <_dtoa_r+0x518>
 8006d62:	4b86      	ldr	r3, [pc, #536]	@ (8006f7c <_dtoa_r+0x5c4>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	4620      	mov	r0, r4
 8006d68:	4629      	mov	r1, r5
 8006d6a:	f7f9 febf 	bl	8000aec <__aeabi_dcmplt>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f000 80ae 	beq.w	8006ed0 <_dtoa_r+0x518>
 8006d74:	9b07      	ldr	r3, [sp, #28]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80aa 	beq.w	8006ed0 <_dtoa_r+0x518>
 8006d7c:	9b00      	ldr	r3, [sp, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dd37      	ble.n	8006df2 <_dtoa_r+0x43a>
 8006d82:	1e7b      	subs	r3, r7, #1
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	4620      	mov	r0, r4
 8006d88:	4b7d      	ldr	r3, [pc, #500]	@ (8006f80 <_dtoa_r+0x5c8>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7f9 fc3b 	bl	8000608 <__aeabi_dmul>
 8006d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d96:	9c00      	ldr	r4, [sp, #0]
 8006d98:	3601      	adds	r6, #1
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	f7f9 fbca 	bl	8000534 <__aeabi_i2d>
 8006da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da4:	f7f9 fc30 	bl	8000608 <__aeabi_dmul>
 8006da8:	4b76      	ldr	r3, [pc, #472]	@ (8006f84 <_dtoa_r+0x5cc>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	f7f9 fa76 	bl	800029c <__adddf3>
 8006db0:	4605      	mov	r5, r0
 8006db2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006db6:	2c00      	cmp	r4, #0
 8006db8:	f040 808d 	bne.w	8006ed6 <_dtoa_r+0x51e>
 8006dbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dc0:	4b71      	ldr	r3, [pc, #452]	@ (8006f88 <_dtoa_r+0x5d0>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f7f9 fa68 	bl	8000298 <__aeabi_dsub>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4633      	mov	r3, r6
 8006dd4:	f7f9 fea8 	bl	8000b28 <__aeabi_dcmpgt>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	f040 828b 	bne.w	80072f4 <_dtoa_r+0x93c>
 8006dde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006de2:	462a      	mov	r2, r5
 8006de4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006de8:	f7f9 fe80 	bl	8000aec <__aeabi_dcmplt>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	f040 8128 	bne.w	8007042 <_dtoa_r+0x68a>
 8006df2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006df6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006dfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f2c0 815a 	blt.w	80070b6 <_dtoa_r+0x6fe>
 8006e02:	2f0e      	cmp	r7, #14
 8006e04:	f300 8157 	bgt.w	80070b6 <_dtoa_r+0x6fe>
 8006e08:	4b5a      	ldr	r3, [pc, #360]	@ (8006f74 <_dtoa_r+0x5bc>)
 8006e0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e0e:	ed93 7b00 	vldr	d7, [r3]
 8006e12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	ed8d 7b00 	vstr	d7, [sp]
 8006e1a:	da03      	bge.n	8006e24 <_dtoa_r+0x46c>
 8006e1c:	9b07      	ldr	r3, [sp, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f340 8101 	ble.w	8007026 <_dtoa_r+0x66e>
 8006e24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e28:	4656      	mov	r6, sl
 8006e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7f9 fd13 	bl	800085c <__aeabi_ddiv>
 8006e36:	f7f9 fe97 	bl	8000b68 <__aeabi_d2iz>
 8006e3a:	4680      	mov	r8, r0
 8006e3c:	f7f9 fb7a 	bl	8000534 <__aeabi_i2d>
 8006e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e44:	f7f9 fbe0 	bl	8000608 <__aeabi_dmul>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	4629      	mov	r1, r5
 8006e50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e54:	f7f9 fa20 	bl	8000298 <__aeabi_dsub>
 8006e58:	f806 4b01 	strb.w	r4, [r6], #1
 8006e5c:	9d07      	ldr	r5, [sp, #28]
 8006e5e:	eba6 040a 	sub.w	r4, r6, sl
 8006e62:	42a5      	cmp	r5, r4
 8006e64:	4602      	mov	r2, r0
 8006e66:	460b      	mov	r3, r1
 8006e68:	f040 8117 	bne.w	800709a <_dtoa_r+0x6e2>
 8006e6c:	f7f9 fa16 	bl	800029c <__adddf3>
 8006e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e74:	4604      	mov	r4, r0
 8006e76:	460d      	mov	r5, r1
 8006e78:	f7f9 fe56 	bl	8000b28 <__aeabi_dcmpgt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f040 80f9 	bne.w	8007074 <_dtoa_r+0x6bc>
 8006e82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e8e:	b118      	cbz	r0, 8006e98 <_dtoa_r+0x4e0>
 8006e90:	f018 0f01 	tst.w	r8, #1
 8006e94:	f040 80ee 	bne.w	8007074 <_dtoa_r+0x6bc>
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4658      	mov	r0, fp
 8006e9c:	f000 fc90 	bl	80077c0 <_Bfree>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	7033      	strb	r3, [r6, #0]
 8006ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ea6:	3701      	adds	r7, #1
 8006ea8:	601f      	str	r7, [r3, #0]
 8006eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 831d 	beq.w	80074ec <_dtoa_r+0xb34>
 8006eb2:	601e      	str	r6, [r3, #0]
 8006eb4:	e31a      	b.n	80074ec <_dtoa_r+0xb34>
 8006eb6:	07e2      	lsls	r2, r4, #31
 8006eb8:	d505      	bpl.n	8006ec6 <_dtoa_r+0x50e>
 8006eba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ebe:	f7f9 fba3 	bl	8000608 <__aeabi_dmul>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	1064      	asrs	r4, r4, #1
 8006ec8:	3508      	adds	r5, #8
 8006eca:	e73f      	b.n	8006d4c <_dtoa_r+0x394>
 8006ecc:	2602      	movs	r6, #2
 8006ece:	e742      	b.n	8006d56 <_dtoa_r+0x39e>
 8006ed0:	9c07      	ldr	r4, [sp, #28]
 8006ed2:	9704      	str	r7, [sp, #16]
 8006ed4:	e761      	b.n	8006d9a <_dtoa_r+0x3e2>
 8006ed6:	4b27      	ldr	r3, [pc, #156]	@ (8006f74 <_dtoa_r+0x5bc>)
 8006ed8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ede:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ee2:	4454      	add	r4, sl
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d053      	beq.n	8006f90 <_dtoa_r+0x5d8>
 8006ee8:	4928      	ldr	r1, [pc, #160]	@ (8006f8c <_dtoa_r+0x5d4>)
 8006eea:	2000      	movs	r0, #0
 8006eec:	f7f9 fcb6 	bl	800085c <__aeabi_ddiv>
 8006ef0:	4633      	mov	r3, r6
 8006ef2:	462a      	mov	r2, r5
 8006ef4:	f7f9 f9d0 	bl	8000298 <__aeabi_dsub>
 8006ef8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006efc:	4656      	mov	r6, sl
 8006efe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f02:	f7f9 fe31 	bl	8000b68 <__aeabi_d2iz>
 8006f06:	4605      	mov	r5, r0
 8006f08:	f7f9 fb14 	bl	8000534 <__aeabi_i2d>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f14:	f7f9 f9c0 	bl	8000298 <__aeabi_dsub>
 8006f18:	3530      	adds	r5, #48	@ 0x30
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f22:	f806 5b01 	strb.w	r5, [r6], #1
 8006f26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f2a:	f7f9 fddf 	bl	8000aec <__aeabi_dcmplt>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	d171      	bne.n	8007016 <_dtoa_r+0x65e>
 8006f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f36:	4911      	ldr	r1, [pc, #68]	@ (8006f7c <_dtoa_r+0x5c4>)
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f7f9 f9ad 	bl	8000298 <__aeabi_dsub>
 8006f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f42:	f7f9 fdd3 	bl	8000aec <__aeabi_dcmplt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	f040 8095 	bne.w	8007076 <_dtoa_r+0x6be>
 8006f4c:	42a6      	cmp	r6, r4
 8006f4e:	f43f af50 	beq.w	8006df2 <_dtoa_r+0x43a>
 8006f52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006f56:	4b0a      	ldr	r3, [pc, #40]	@ (8006f80 <_dtoa_r+0x5c8>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f7f9 fb55 	bl	8000608 <__aeabi_dmul>
 8006f5e:	4b08      	ldr	r3, [pc, #32]	@ (8006f80 <_dtoa_r+0x5c8>)
 8006f60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f64:	2200      	movs	r2, #0
 8006f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f6a:	f7f9 fb4d 	bl	8000608 <__aeabi_dmul>
 8006f6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f72:	e7c4      	b.n	8006efe <_dtoa_r+0x546>
 8006f74:	0800a108 	.word	0x0800a108
 8006f78:	0800a0e0 	.word	0x0800a0e0
 8006f7c:	3ff00000 	.word	0x3ff00000
 8006f80:	40240000 	.word	0x40240000
 8006f84:	401c0000 	.word	0x401c0000
 8006f88:	40140000 	.word	0x40140000
 8006f8c:	3fe00000 	.word	0x3fe00000
 8006f90:	4631      	mov	r1, r6
 8006f92:	4628      	mov	r0, r5
 8006f94:	f7f9 fb38 	bl	8000608 <__aeabi_dmul>
 8006f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006f9e:	4656      	mov	r6, sl
 8006fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa4:	f7f9 fde0 	bl	8000b68 <__aeabi_d2iz>
 8006fa8:	4605      	mov	r5, r0
 8006faa:	f7f9 fac3 	bl	8000534 <__aeabi_i2d>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fb6:	f7f9 f96f 	bl	8000298 <__aeabi_dsub>
 8006fba:	3530      	adds	r5, #48	@ 0x30
 8006fbc:	f806 5b01 	strb.w	r5, [r6], #1
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	42a6      	cmp	r6, r4
 8006fc6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	d124      	bne.n	800701a <_dtoa_r+0x662>
 8006fd0:	4bac      	ldr	r3, [pc, #688]	@ (8007284 <_dtoa_r+0x8cc>)
 8006fd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fd6:	f7f9 f961 	bl	800029c <__adddf3>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe2:	f7f9 fda1 	bl	8000b28 <__aeabi_dcmpgt>
 8006fe6:	2800      	cmp	r0, #0
 8006fe8:	d145      	bne.n	8007076 <_dtoa_r+0x6be>
 8006fea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fee:	49a5      	ldr	r1, [pc, #660]	@ (8007284 <_dtoa_r+0x8cc>)
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	f7f9 f951 	bl	8000298 <__aeabi_dsub>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ffe:	f7f9 fd75 	bl	8000aec <__aeabi_dcmplt>
 8007002:	2800      	cmp	r0, #0
 8007004:	f43f aef5 	beq.w	8006df2 <_dtoa_r+0x43a>
 8007008:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800700a:	1e73      	subs	r3, r6, #1
 800700c:	9315      	str	r3, [sp, #84]	@ 0x54
 800700e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007012:	2b30      	cmp	r3, #48	@ 0x30
 8007014:	d0f8      	beq.n	8007008 <_dtoa_r+0x650>
 8007016:	9f04      	ldr	r7, [sp, #16]
 8007018:	e73e      	b.n	8006e98 <_dtoa_r+0x4e0>
 800701a:	4b9b      	ldr	r3, [pc, #620]	@ (8007288 <_dtoa_r+0x8d0>)
 800701c:	f7f9 faf4 	bl	8000608 <__aeabi_dmul>
 8007020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007024:	e7bc      	b.n	8006fa0 <_dtoa_r+0x5e8>
 8007026:	d10c      	bne.n	8007042 <_dtoa_r+0x68a>
 8007028:	4b98      	ldr	r3, [pc, #608]	@ (800728c <_dtoa_r+0x8d4>)
 800702a:	2200      	movs	r2, #0
 800702c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007030:	f7f9 faea 	bl	8000608 <__aeabi_dmul>
 8007034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007038:	f7f9 fd6c 	bl	8000b14 <__aeabi_dcmpge>
 800703c:	2800      	cmp	r0, #0
 800703e:	f000 8157 	beq.w	80072f0 <_dtoa_r+0x938>
 8007042:	2400      	movs	r4, #0
 8007044:	4625      	mov	r5, r4
 8007046:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007048:	43db      	mvns	r3, r3
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	4656      	mov	r6, sl
 800704e:	2700      	movs	r7, #0
 8007050:	4621      	mov	r1, r4
 8007052:	4658      	mov	r0, fp
 8007054:	f000 fbb4 	bl	80077c0 <_Bfree>
 8007058:	2d00      	cmp	r5, #0
 800705a:	d0dc      	beq.n	8007016 <_dtoa_r+0x65e>
 800705c:	b12f      	cbz	r7, 800706a <_dtoa_r+0x6b2>
 800705e:	42af      	cmp	r7, r5
 8007060:	d003      	beq.n	800706a <_dtoa_r+0x6b2>
 8007062:	4639      	mov	r1, r7
 8007064:	4658      	mov	r0, fp
 8007066:	f000 fbab 	bl	80077c0 <_Bfree>
 800706a:	4629      	mov	r1, r5
 800706c:	4658      	mov	r0, fp
 800706e:	f000 fba7 	bl	80077c0 <_Bfree>
 8007072:	e7d0      	b.n	8007016 <_dtoa_r+0x65e>
 8007074:	9704      	str	r7, [sp, #16]
 8007076:	4633      	mov	r3, r6
 8007078:	461e      	mov	r6, r3
 800707a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800707e:	2a39      	cmp	r2, #57	@ 0x39
 8007080:	d107      	bne.n	8007092 <_dtoa_r+0x6da>
 8007082:	459a      	cmp	sl, r3
 8007084:	d1f8      	bne.n	8007078 <_dtoa_r+0x6c0>
 8007086:	9a04      	ldr	r2, [sp, #16]
 8007088:	3201      	adds	r2, #1
 800708a:	9204      	str	r2, [sp, #16]
 800708c:	2230      	movs	r2, #48	@ 0x30
 800708e:	f88a 2000 	strb.w	r2, [sl]
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	3201      	adds	r2, #1
 8007096:	701a      	strb	r2, [r3, #0]
 8007098:	e7bd      	b.n	8007016 <_dtoa_r+0x65e>
 800709a:	4b7b      	ldr	r3, [pc, #492]	@ (8007288 <_dtoa_r+0x8d0>)
 800709c:	2200      	movs	r2, #0
 800709e:	f7f9 fab3 	bl	8000608 <__aeabi_dmul>
 80070a2:	2200      	movs	r2, #0
 80070a4:	2300      	movs	r3, #0
 80070a6:	4604      	mov	r4, r0
 80070a8:	460d      	mov	r5, r1
 80070aa:	f7f9 fd15 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f43f aebb 	beq.w	8006e2a <_dtoa_r+0x472>
 80070b4:	e6f0      	b.n	8006e98 <_dtoa_r+0x4e0>
 80070b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	f000 80db 	beq.w	8007274 <_dtoa_r+0x8bc>
 80070be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070c0:	2a01      	cmp	r2, #1
 80070c2:	f300 80bf 	bgt.w	8007244 <_dtoa_r+0x88c>
 80070c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80070c8:	2a00      	cmp	r2, #0
 80070ca:	f000 80b7 	beq.w	800723c <_dtoa_r+0x884>
 80070ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80070d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070d4:	4646      	mov	r6, r8
 80070d6:	9a08      	ldr	r2, [sp, #32]
 80070d8:	2101      	movs	r1, #1
 80070da:	441a      	add	r2, r3
 80070dc:	4658      	mov	r0, fp
 80070de:	4498      	add	r8, r3
 80070e0:	9208      	str	r2, [sp, #32]
 80070e2:	f000 fc6b 	bl	80079bc <__i2b>
 80070e6:	4605      	mov	r5, r0
 80070e8:	b15e      	cbz	r6, 8007102 <_dtoa_r+0x74a>
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dd08      	ble.n	8007102 <_dtoa_r+0x74a>
 80070f0:	42b3      	cmp	r3, r6
 80070f2:	9a08      	ldr	r2, [sp, #32]
 80070f4:	bfa8      	it	ge
 80070f6:	4633      	movge	r3, r6
 80070f8:	eba8 0803 	sub.w	r8, r8, r3
 80070fc:	1af6      	subs	r6, r6, r3
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	9308      	str	r3, [sp, #32]
 8007102:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007104:	b1f3      	cbz	r3, 8007144 <_dtoa_r+0x78c>
 8007106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 80b7 	beq.w	800727c <_dtoa_r+0x8c4>
 800710e:	b18c      	cbz	r4, 8007134 <_dtoa_r+0x77c>
 8007110:	4629      	mov	r1, r5
 8007112:	4622      	mov	r2, r4
 8007114:	4658      	mov	r0, fp
 8007116:	f000 fd11 	bl	8007b3c <__pow5mult>
 800711a:	464a      	mov	r2, r9
 800711c:	4601      	mov	r1, r0
 800711e:	4605      	mov	r5, r0
 8007120:	4658      	mov	r0, fp
 8007122:	f000 fc61 	bl	80079e8 <__multiply>
 8007126:	4649      	mov	r1, r9
 8007128:	9004      	str	r0, [sp, #16]
 800712a:	4658      	mov	r0, fp
 800712c:	f000 fb48 	bl	80077c0 <_Bfree>
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	4699      	mov	r9, r3
 8007134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007136:	1b1a      	subs	r2, r3, r4
 8007138:	d004      	beq.n	8007144 <_dtoa_r+0x78c>
 800713a:	4649      	mov	r1, r9
 800713c:	4658      	mov	r0, fp
 800713e:	f000 fcfd 	bl	8007b3c <__pow5mult>
 8007142:	4681      	mov	r9, r0
 8007144:	2101      	movs	r1, #1
 8007146:	4658      	mov	r0, fp
 8007148:	f000 fc38 	bl	80079bc <__i2b>
 800714c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800714e:	4604      	mov	r4, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	f000 81cf 	beq.w	80074f4 <_dtoa_r+0xb3c>
 8007156:	461a      	mov	r2, r3
 8007158:	4601      	mov	r1, r0
 800715a:	4658      	mov	r0, fp
 800715c:	f000 fcee 	bl	8007b3c <__pow5mult>
 8007160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007162:	2b01      	cmp	r3, #1
 8007164:	4604      	mov	r4, r0
 8007166:	f300 8095 	bgt.w	8007294 <_dtoa_r+0x8dc>
 800716a:	9b02      	ldr	r3, [sp, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 8087 	bne.w	8007280 <_dtoa_r+0x8c8>
 8007172:	9b03      	ldr	r3, [sp, #12]
 8007174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007178:	2b00      	cmp	r3, #0
 800717a:	f040 8089 	bne.w	8007290 <_dtoa_r+0x8d8>
 800717e:	9b03      	ldr	r3, [sp, #12]
 8007180:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007184:	0d1b      	lsrs	r3, r3, #20
 8007186:	051b      	lsls	r3, r3, #20
 8007188:	b12b      	cbz	r3, 8007196 <_dtoa_r+0x7de>
 800718a:	9b08      	ldr	r3, [sp, #32]
 800718c:	3301      	adds	r3, #1
 800718e:	9308      	str	r3, [sp, #32]
 8007190:	f108 0801 	add.w	r8, r8, #1
 8007194:	2301      	movs	r3, #1
 8007196:	930a      	str	r3, [sp, #40]	@ 0x28
 8007198:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 81b0 	beq.w	8007500 <_dtoa_r+0xb48>
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80071a6:	6918      	ldr	r0, [r3, #16]
 80071a8:	f000 fbbc 	bl	8007924 <__hi0bits>
 80071ac:	f1c0 0020 	rsb	r0, r0, #32
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	4418      	add	r0, r3
 80071b4:	f010 001f 	ands.w	r0, r0, #31
 80071b8:	d077      	beq.n	80072aa <_dtoa_r+0x8f2>
 80071ba:	f1c0 0320 	rsb	r3, r0, #32
 80071be:	2b04      	cmp	r3, #4
 80071c0:	dd6b      	ble.n	800729a <_dtoa_r+0x8e2>
 80071c2:	9b08      	ldr	r3, [sp, #32]
 80071c4:	f1c0 001c 	rsb	r0, r0, #28
 80071c8:	4403      	add	r3, r0
 80071ca:	4480      	add	r8, r0
 80071cc:	4406      	add	r6, r0
 80071ce:	9308      	str	r3, [sp, #32]
 80071d0:	f1b8 0f00 	cmp.w	r8, #0
 80071d4:	dd05      	ble.n	80071e2 <_dtoa_r+0x82a>
 80071d6:	4649      	mov	r1, r9
 80071d8:	4642      	mov	r2, r8
 80071da:	4658      	mov	r0, fp
 80071dc:	f000 fd08 	bl	8007bf0 <__lshift>
 80071e0:	4681      	mov	r9, r0
 80071e2:	9b08      	ldr	r3, [sp, #32]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dd05      	ble.n	80071f4 <_dtoa_r+0x83c>
 80071e8:	4621      	mov	r1, r4
 80071ea:	461a      	mov	r2, r3
 80071ec:	4658      	mov	r0, fp
 80071ee:	f000 fcff 	bl	8007bf0 <__lshift>
 80071f2:	4604      	mov	r4, r0
 80071f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d059      	beq.n	80072ae <_dtoa_r+0x8f6>
 80071fa:	4621      	mov	r1, r4
 80071fc:	4648      	mov	r0, r9
 80071fe:	f000 fd63 	bl	8007cc8 <__mcmp>
 8007202:	2800      	cmp	r0, #0
 8007204:	da53      	bge.n	80072ae <_dtoa_r+0x8f6>
 8007206:	1e7b      	subs	r3, r7, #1
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	4649      	mov	r1, r9
 800720c:	2300      	movs	r3, #0
 800720e:	220a      	movs	r2, #10
 8007210:	4658      	mov	r0, fp
 8007212:	f000 faf7 	bl	8007804 <__multadd>
 8007216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007218:	4681      	mov	r9, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8172 	beq.w	8007504 <_dtoa_r+0xb4c>
 8007220:	2300      	movs	r3, #0
 8007222:	4629      	mov	r1, r5
 8007224:	220a      	movs	r2, #10
 8007226:	4658      	mov	r0, fp
 8007228:	f000 faec 	bl	8007804 <__multadd>
 800722c:	9b00      	ldr	r3, [sp, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	4605      	mov	r5, r0
 8007232:	dc67      	bgt.n	8007304 <_dtoa_r+0x94c>
 8007234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007236:	2b02      	cmp	r3, #2
 8007238:	dc41      	bgt.n	80072be <_dtoa_r+0x906>
 800723a:	e063      	b.n	8007304 <_dtoa_r+0x94c>
 800723c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800723e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007242:	e746      	b.n	80070d2 <_dtoa_r+0x71a>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	1e5c      	subs	r4, r3, #1
 8007248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800724a:	42a3      	cmp	r3, r4
 800724c:	bfbf      	itttt	lt
 800724e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007250:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007252:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007254:	1ae3      	sublt	r3, r4, r3
 8007256:	bfb4      	ite	lt
 8007258:	18d2      	addlt	r2, r2, r3
 800725a:	1b1c      	subge	r4, r3, r4
 800725c:	9b07      	ldr	r3, [sp, #28]
 800725e:	bfbc      	itt	lt
 8007260:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007262:	2400      	movlt	r4, #0
 8007264:	2b00      	cmp	r3, #0
 8007266:	bfb5      	itete	lt
 8007268:	eba8 0603 	sublt.w	r6, r8, r3
 800726c:	9b07      	ldrge	r3, [sp, #28]
 800726e:	2300      	movlt	r3, #0
 8007270:	4646      	movge	r6, r8
 8007272:	e730      	b.n	80070d6 <_dtoa_r+0x71e>
 8007274:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007276:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007278:	4646      	mov	r6, r8
 800727a:	e735      	b.n	80070e8 <_dtoa_r+0x730>
 800727c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800727e:	e75c      	b.n	800713a <_dtoa_r+0x782>
 8007280:	2300      	movs	r3, #0
 8007282:	e788      	b.n	8007196 <_dtoa_r+0x7de>
 8007284:	3fe00000 	.word	0x3fe00000
 8007288:	40240000 	.word	0x40240000
 800728c:	40140000 	.word	0x40140000
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	e780      	b.n	8007196 <_dtoa_r+0x7de>
 8007294:	2300      	movs	r3, #0
 8007296:	930a      	str	r3, [sp, #40]	@ 0x28
 8007298:	e782      	b.n	80071a0 <_dtoa_r+0x7e8>
 800729a:	d099      	beq.n	80071d0 <_dtoa_r+0x818>
 800729c:	9a08      	ldr	r2, [sp, #32]
 800729e:	331c      	adds	r3, #28
 80072a0:	441a      	add	r2, r3
 80072a2:	4498      	add	r8, r3
 80072a4:	441e      	add	r6, r3
 80072a6:	9208      	str	r2, [sp, #32]
 80072a8:	e792      	b.n	80071d0 <_dtoa_r+0x818>
 80072aa:	4603      	mov	r3, r0
 80072ac:	e7f6      	b.n	800729c <_dtoa_r+0x8e4>
 80072ae:	9b07      	ldr	r3, [sp, #28]
 80072b0:	9704      	str	r7, [sp, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	dc20      	bgt.n	80072f8 <_dtoa_r+0x940>
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	dd1e      	ble.n	80072fc <_dtoa_r+0x944>
 80072be:	9b00      	ldr	r3, [sp, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f47f aec0 	bne.w	8007046 <_dtoa_r+0x68e>
 80072c6:	4621      	mov	r1, r4
 80072c8:	2205      	movs	r2, #5
 80072ca:	4658      	mov	r0, fp
 80072cc:	f000 fa9a 	bl	8007804 <__multadd>
 80072d0:	4601      	mov	r1, r0
 80072d2:	4604      	mov	r4, r0
 80072d4:	4648      	mov	r0, r9
 80072d6:	f000 fcf7 	bl	8007cc8 <__mcmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f77f aeb3 	ble.w	8007046 <_dtoa_r+0x68e>
 80072e0:	4656      	mov	r6, sl
 80072e2:	2331      	movs	r3, #49	@ 0x31
 80072e4:	f806 3b01 	strb.w	r3, [r6], #1
 80072e8:	9b04      	ldr	r3, [sp, #16]
 80072ea:	3301      	adds	r3, #1
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	e6ae      	b.n	800704e <_dtoa_r+0x696>
 80072f0:	9c07      	ldr	r4, [sp, #28]
 80072f2:	9704      	str	r7, [sp, #16]
 80072f4:	4625      	mov	r5, r4
 80072f6:	e7f3      	b.n	80072e0 <_dtoa_r+0x928>
 80072f8:	9b07      	ldr	r3, [sp, #28]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072fe:	2b00      	cmp	r3, #0
 8007300:	f000 8104 	beq.w	800750c <_dtoa_r+0xb54>
 8007304:	2e00      	cmp	r6, #0
 8007306:	dd05      	ble.n	8007314 <_dtoa_r+0x95c>
 8007308:	4629      	mov	r1, r5
 800730a:	4632      	mov	r2, r6
 800730c:	4658      	mov	r0, fp
 800730e:	f000 fc6f 	bl	8007bf0 <__lshift>
 8007312:	4605      	mov	r5, r0
 8007314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d05a      	beq.n	80073d0 <_dtoa_r+0xa18>
 800731a:	6869      	ldr	r1, [r5, #4]
 800731c:	4658      	mov	r0, fp
 800731e:	f000 fa0f 	bl	8007740 <_Balloc>
 8007322:	4606      	mov	r6, r0
 8007324:	b928      	cbnz	r0, 8007332 <_dtoa_r+0x97a>
 8007326:	4b84      	ldr	r3, [pc, #528]	@ (8007538 <_dtoa_r+0xb80>)
 8007328:	4602      	mov	r2, r0
 800732a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800732e:	f7ff bb5a 	b.w	80069e6 <_dtoa_r+0x2e>
 8007332:	692a      	ldr	r2, [r5, #16]
 8007334:	3202      	adds	r2, #2
 8007336:	0092      	lsls	r2, r2, #2
 8007338:	f105 010c 	add.w	r1, r5, #12
 800733c:	300c      	adds	r0, #12
 800733e:	f001 ff75 	bl	800922c <memcpy>
 8007342:	2201      	movs	r2, #1
 8007344:	4631      	mov	r1, r6
 8007346:	4658      	mov	r0, fp
 8007348:	f000 fc52 	bl	8007bf0 <__lshift>
 800734c:	f10a 0301 	add.w	r3, sl, #1
 8007350:	9307      	str	r3, [sp, #28]
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	4453      	add	r3, sl
 8007356:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007358:	9b02      	ldr	r3, [sp, #8]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	462f      	mov	r7, r5
 8007360:	930a      	str	r3, [sp, #40]	@ 0x28
 8007362:	4605      	mov	r5, r0
 8007364:	9b07      	ldr	r3, [sp, #28]
 8007366:	4621      	mov	r1, r4
 8007368:	3b01      	subs	r3, #1
 800736a:	4648      	mov	r0, r9
 800736c:	9300      	str	r3, [sp, #0]
 800736e:	f7ff fa9b 	bl	80068a8 <quorem>
 8007372:	4639      	mov	r1, r7
 8007374:	9002      	str	r0, [sp, #8]
 8007376:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800737a:	4648      	mov	r0, r9
 800737c:	f000 fca4 	bl	8007cc8 <__mcmp>
 8007380:	462a      	mov	r2, r5
 8007382:	9008      	str	r0, [sp, #32]
 8007384:	4621      	mov	r1, r4
 8007386:	4658      	mov	r0, fp
 8007388:	f000 fcba 	bl	8007d00 <__mdiff>
 800738c:	68c2      	ldr	r2, [r0, #12]
 800738e:	4606      	mov	r6, r0
 8007390:	bb02      	cbnz	r2, 80073d4 <_dtoa_r+0xa1c>
 8007392:	4601      	mov	r1, r0
 8007394:	4648      	mov	r0, r9
 8007396:	f000 fc97 	bl	8007cc8 <__mcmp>
 800739a:	4602      	mov	r2, r0
 800739c:	4631      	mov	r1, r6
 800739e:	4658      	mov	r0, fp
 80073a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80073a2:	f000 fa0d 	bl	80077c0 <_Bfree>
 80073a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073aa:	9e07      	ldr	r6, [sp, #28]
 80073ac:	ea43 0102 	orr.w	r1, r3, r2
 80073b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073b2:	4319      	orrs	r1, r3
 80073b4:	d110      	bne.n	80073d8 <_dtoa_r+0xa20>
 80073b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80073ba:	d029      	beq.n	8007410 <_dtoa_r+0xa58>
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dd02      	ble.n	80073c8 <_dtoa_r+0xa10>
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80073c8:	9b00      	ldr	r3, [sp, #0]
 80073ca:	f883 8000 	strb.w	r8, [r3]
 80073ce:	e63f      	b.n	8007050 <_dtoa_r+0x698>
 80073d0:	4628      	mov	r0, r5
 80073d2:	e7bb      	b.n	800734c <_dtoa_r+0x994>
 80073d4:	2201      	movs	r2, #1
 80073d6:	e7e1      	b.n	800739c <_dtoa_r+0x9e4>
 80073d8:	9b08      	ldr	r3, [sp, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	db04      	blt.n	80073e8 <_dtoa_r+0xa30>
 80073de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073e0:	430b      	orrs	r3, r1
 80073e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80073e4:	430b      	orrs	r3, r1
 80073e6:	d120      	bne.n	800742a <_dtoa_r+0xa72>
 80073e8:	2a00      	cmp	r2, #0
 80073ea:	dded      	ble.n	80073c8 <_dtoa_r+0xa10>
 80073ec:	4649      	mov	r1, r9
 80073ee:	2201      	movs	r2, #1
 80073f0:	4658      	mov	r0, fp
 80073f2:	f000 fbfd 	bl	8007bf0 <__lshift>
 80073f6:	4621      	mov	r1, r4
 80073f8:	4681      	mov	r9, r0
 80073fa:	f000 fc65 	bl	8007cc8 <__mcmp>
 80073fe:	2800      	cmp	r0, #0
 8007400:	dc03      	bgt.n	800740a <_dtoa_r+0xa52>
 8007402:	d1e1      	bne.n	80073c8 <_dtoa_r+0xa10>
 8007404:	f018 0f01 	tst.w	r8, #1
 8007408:	d0de      	beq.n	80073c8 <_dtoa_r+0xa10>
 800740a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800740e:	d1d8      	bne.n	80073c2 <_dtoa_r+0xa0a>
 8007410:	9a00      	ldr	r2, [sp, #0]
 8007412:	2339      	movs	r3, #57	@ 0x39
 8007414:	7013      	strb	r3, [r2, #0]
 8007416:	4633      	mov	r3, r6
 8007418:	461e      	mov	r6, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007420:	2a39      	cmp	r2, #57	@ 0x39
 8007422:	d052      	beq.n	80074ca <_dtoa_r+0xb12>
 8007424:	3201      	adds	r2, #1
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	e612      	b.n	8007050 <_dtoa_r+0x698>
 800742a:	2a00      	cmp	r2, #0
 800742c:	dd07      	ble.n	800743e <_dtoa_r+0xa86>
 800742e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007432:	d0ed      	beq.n	8007410 <_dtoa_r+0xa58>
 8007434:	9a00      	ldr	r2, [sp, #0]
 8007436:	f108 0301 	add.w	r3, r8, #1
 800743a:	7013      	strb	r3, [r2, #0]
 800743c:	e608      	b.n	8007050 <_dtoa_r+0x698>
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	9a07      	ldr	r2, [sp, #28]
 8007442:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007448:	4293      	cmp	r3, r2
 800744a:	d028      	beq.n	800749e <_dtoa_r+0xae6>
 800744c:	4649      	mov	r1, r9
 800744e:	2300      	movs	r3, #0
 8007450:	220a      	movs	r2, #10
 8007452:	4658      	mov	r0, fp
 8007454:	f000 f9d6 	bl	8007804 <__multadd>
 8007458:	42af      	cmp	r7, r5
 800745a:	4681      	mov	r9, r0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	f04f 020a 	mov.w	r2, #10
 8007464:	4639      	mov	r1, r7
 8007466:	4658      	mov	r0, fp
 8007468:	d107      	bne.n	800747a <_dtoa_r+0xac2>
 800746a:	f000 f9cb 	bl	8007804 <__multadd>
 800746e:	4607      	mov	r7, r0
 8007470:	4605      	mov	r5, r0
 8007472:	9b07      	ldr	r3, [sp, #28]
 8007474:	3301      	adds	r3, #1
 8007476:	9307      	str	r3, [sp, #28]
 8007478:	e774      	b.n	8007364 <_dtoa_r+0x9ac>
 800747a:	f000 f9c3 	bl	8007804 <__multadd>
 800747e:	4629      	mov	r1, r5
 8007480:	4607      	mov	r7, r0
 8007482:	2300      	movs	r3, #0
 8007484:	220a      	movs	r2, #10
 8007486:	4658      	mov	r0, fp
 8007488:	f000 f9bc 	bl	8007804 <__multadd>
 800748c:	4605      	mov	r5, r0
 800748e:	e7f0      	b.n	8007472 <_dtoa_r+0xaba>
 8007490:	9b00      	ldr	r3, [sp, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	bfcc      	ite	gt
 8007496:	461e      	movgt	r6, r3
 8007498:	2601      	movle	r6, #1
 800749a:	4456      	add	r6, sl
 800749c:	2700      	movs	r7, #0
 800749e:	4649      	mov	r1, r9
 80074a0:	2201      	movs	r2, #1
 80074a2:	4658      	mov	r0, fp
 80074a4:	f000 fba4 	bl	8007bf0 <__lshift>
 80074a8:	4621      	mov	r1, r4
 80074aa:	4681      	mov	r9, r0
 80074ac:	f000 fc0c 	bl	8007cc8 <__mcmp>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	dcb0      	bgt.n	8007416 <_dtoa_r+0xa5e>
 80074b4:	d102      	bne.n	80074bc <_dtoa_r+0xb04>
 80074b6:	f018 0f01 	tst.w	r8, #1
 80074ba:	d1ac      	bne.n	8007416 <_dtoa_r+0xa5e>
 80074bc:	4633      	mov	r3, r6
 80074be:	461e      	mov	r6, r3
 80074c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074c4:	2a30      	cmp	r2, #48	@ 0x30
 80074c6:	d0fa      	beq.n	80074be <_dtoa_r+0xb06>
 80074c8:	e5c2      	b.n	8007050 <_dtoa_r+0x698>
 80074ca:	459a      	cmp	sl, r3
 80074cc:	d1a4      	bne.n	8007418 <_dtoa_r+0xa60>
 80074ce:	9b04      	ldr	r3, [sp, #16]
 80074d0:	3301      	adds	r3, #1
 80074d2:	9304      	str	r3, [sp, #16]
 80074d4:	2331      	movs	r3, #49	@ 0x31
 80074d6:	f88a 3000 	strb.w	r3, [sl]
 80074da:	e5b9      	b.n	8007050 <_dtoa_r+0x698>
 80074dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800753c <_dtoa_r+0xb84>
 80074e2:	b11b      	cbz	r3, 80074ec <_dtoa_r+0xb34>
 80074e4:	f10a 0308 	add.w	r3, sl, #8
 80074e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	4650      	mov	r0, sl
 80074ee:	b019      	add	sp, #100	@ 0x64
 80074f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	f77f ae37 	ble.w	800716a <_dtoa_r+0x7b2>
 80074fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007500:	2001      	movs	r0, #1
 8007502:	e655      	b.n	80071b0 <_dtoa_r+0x7f8>
 8007504:	9b00      	ldr	r3, [sp, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f77f aed6 	ble.w	80072b8 <_dtoa_r+0x900>
 800750c:	4656      	mov	r6, sl
 800750e:	4621      	mov	r1, r4
 8007510:	4648      	mov	r0, r9
 8007512:	f7ff f9c9 	bl	80068a8 <quorem>
 8007516:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800751a:	f806 8b01 	strb.w	r8, [r6], #1
 800751e:	9b00      	ldr	r3, [sp, #0]
 8007520:	eba6 020a 	sub.w	r2, r6, sl
 8007524:	4293      	cmp	r3, r2
 8007526:	ddb3      	ble.n	8007490 <_dtoa_r+0xad8>
 8007528:	4649      	mov	r1, r9
 800752a:	2300      	movs	r3, #0
 800752c:	220a      	movs	r2, #10
 800752e:	4658      	mov	r0, fp
 8007530:	f000 f968 	bl	8007804 <__multadd>
 8007534:	4681      	mov	r9, r0
 8007536:	e7ea      	b.n	800750e <_dtoa_r+0xb56>
 8007538:	0800a069 	.word	0x0800a069
 800753c:	08009fed 	.word	0x08009fed

08007540 <_free_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4605      	mov	r5, r0
 8007544:	2900      	cmp	r1, #0
 8007546:	d041      	beq.n	80075cc <_free_r+0x8c>
 8007548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800754c:	1f0c      	subs	r4, r1, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfb8      	it	lt
 8007552:	18e4      	addlt	r4, r4, r3
 8007554:	f000 f8e8 	bl	8007728 <__malloc_lock>
 8007558:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <_free_r+0x90>)
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	b933      	cbnz	r3, 800756c <_free_r+0x2c>
 800755e:	6063      	str	r3, [r4, #4]
 8007560:	6014      	str	r4, [r2, #0]
 8007562:	4628      	mov	r0, r5
 8007564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007568:	f000 b8e4 	b.w	8007734 <__malloc_unlock>
 800756c:	42a3      	cmp	r3, r4
 800756e:	d908      	bls.n	8007582 <_free_r+0x42>
 8007570:	6820      	ldr	r0, [r4, #0]
 8007572:	1821      	adds	r1, r4, r0
 8007574:	428b      	cmp	r3, r1
 8007576:	bf01      	itttt	eq
 8007578:	6819      	ldreq	r1, [r3, #0]
 800757a:	685b      	ldreq	r3, [r3, #4]
 800757c:	1809      	addeq	r1, r1, r0
 800757e:	6021      	streq	r1, [r4, #0]
 8007580:	e7ed      	b.n	800755e <_free_r+0x1e>
 8007582:	461a      	mov	r2, r3
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	b10b      	cbz	r3, 800758c <_free_r+0x4c>
 8007588:	42a3      	cmp	r3, r4
 800758a:	d9fa      	bls.n	8007582 <_free_r+0x42>
 800758c:	6811      	ldr	r1, [r2, #0]
 800758e:	1850      	adds	r0, r2, r1
 8007590:	42a0      	cmp	r0, r4
 8007592:	d10b      	bne.n	80075ac <_free_r+0x6c>
 8007594:	6820      	ldr	r0, [r4, #0]
 8007596:	4401      	add	r1, r0
 8007598:	1850      	adds	r0, r2, r1
 800759a:	4283      	cmp	r3, r0
 800759c:	6011      	str	r1, [r2, #0]
 800759e:	d1e0      	bne.n	8007562 <_free_r+0x22>
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	6053      	str	r3, [r2, #4]
 80075a6:	4408      	add	r0, r1
 80075a8:	6010      	str	r0, [r2, #0]
 80075aa:	e7da      	b.n	8007562 <_free_r+0x22>
 80075ac:	d902      	bls.n	80075b4 <_free_r+0x74>
 80075ae:	230c      	movs	r3, #12
 80075b0:	602b      	str	r3, [r5, #0]
 80075b2:	e7d6      	b.n	8007562 <_free_r+0x22>
 80075b4:	6820      	ldr	r0, [r4, #0]
 80075b6:	1821      	adds	r1, r4, r0
 80075b8:	428b      	cmp	r3, r1
 80075ba:	bf04      	itt	eq
 80075bc:	6819      	ldreq	r1, [r3, #0]
 80075be:	685b      	ldreq	r3, [r3, #4]
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	bf04      	itt	eq
 80075c4:	1809      	addeq	r1, r1, r0
 80075c6:	6021      	streq	r1, [r4, #0]
 80075c8:	6054      	str	r4, [r2, #4]
 80075ca:	e7ca      	b.n	8007562 <_free_r+0x22>
 80075cc:	bd38      	pop	{r3, r4, r5, pc}
 80075ce:	bf00      	nop
 80075d0:	200005a8 	.word	0x200005a8

080075d4 <malloc>:
 80075d4:	4b02      	ldr	r3, [pc, #8]	@ (80075e0 <malloc+0xc>)
 80075d6:	4601      	mov	r1, r0
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	f000 b825 	b.w	8007628 <_malloc_r>
 80075de:	bf00      	nop
 80075e0:	20000040 	.word	0x20000040

080075e4 <sbrk_aligned>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4e0f      	ldr	r6, [pc, #60]	@ (8007624 <sbrk_aligned+0x40>)
 80075e8:	460c      	mov	r4, r1
 80075ea:	6831      	ldr	r1, [r6, #0]
 80075ec:	4605      	mov	r5, r0
 80075ee:	b911      	cbnz	r1, 80075f6 <sbrk_aligned+0x12>
 80075f0:	f001 fe0c 	bl	800920c <_sbrk_r>
 80075f4:	6030      	str	r0, [r6, #0]
 80075f6:	4621      	mov	r1, r4
 80075f8:	4628      	mov	r0, r5
 80075fa:	f001 fe07 	bl	800920c <_sbrk_r>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	d103      	bne.n	800760a <sbrk_aligned+0x26>
 8007602:	f04f 34ff 	mov.w	r4, #4294967295
 8007606:	4620      	mov	r0, r4
 8007608:	bd70      	pop	{r4, r5, r6, pc}
 800760a:	1cc4      	adds	r4, r0, #3
 800760c:	f024 0403 	bic.w	r4, r4, #3
 8007610:	42a0      	cmp	r0, r4
 8007612:	d0f8      	beq.n	8007606 <sbrk_aligned+0x22>
 8007614:	1a21      	subs	r1, r4, r0
 8007616:	4628      	mov	r0, r5
 8007618:	f001 fdf8 	bl	800920c <_sbrk_r>
 800761c:	3001      	adds	r0, #1
 800761e:	d1f2      	bne.n	8007606 <sbrk_aligned+0x22>
 8007620:	e7ef      	b.n	8007602 <sbrk_aligned+0x1e>
 8007622:	bf00      	nop
 8007624:	200005a4 	.word	0x200005a4

08007628 <_malloc_r>:
 8007628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800762c:	1ccd      	adds	r5, r1, #3
 800762e:	f025 0503 	bic.w	r5, r5, #3
 8007632:	3508      	adds	r5, #8
 8007634:	2d0c      	cmp	r5, #12
 8007636:	bf38      	it	cc
 8007638:	250c      	movcc	r5, #12
 800763a:	2d00      	cmp	r5, #0
 800763c:	4606      	mov	r6, r0
 800763e:	db01      	blt.n	8007644 <_malloc_r+0x1c>
 8007640:	42a9      	cmp	r1, r5
 8007642:	d904      	bls.n	800764e <_malloc_r+0x26>
 8007644:	230c      	movs	r3, #12
 8007646:	6033      	str	r3, [r6, #0]
 8007648:	2000      	movs	r0, #0
 800764a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007724 <_malloc_r+0xfc>
 8007652:	f000 f869 	bl	8007728 <__malloc_lock>
 8007656:	f8d8 3000 	ldr.w	r3, [r8]
 800765a:	461c      	mov	r4, r3
 800765c:	bb44      	cbnz	r4, 80076b0 <_malloc_r+0x88>
 800765e:	4629      	mov	r1, r5
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff ffbf 	bl	80075e4 <sbrk_aligned>
 8007666:	1c43      	adds	r3, r0, #1
 8007668:	4604      	mov	r4, r0
 800766a:	d158      	bne.n	800771e <_malloc_r+0xf6>
 800766c:	f8d8 4000 	ldr.w	r4, [r8]
 8007670:	4627      	mov	r7, r4
 8007672:	2f00      	cmp	r7, #0
 8007674:	d143      	bne.n	80076fe <_malloc_r+0xd6>
 8007676:	2c00      	cmp	r4, #0
 8007678:	d04b      	beq.n	8007712 <_malloc_r+0xea>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	4639      	mov	r1, r7
 800767e:	4630      	mov	r0, r6
 8007680:	eb04 0903 	add.w	r9, r4, r3
 8007684:	f001 fdc2 	bl	800920c <_sbrk_r>
 8007688:	4581      	cmp	r9, r0
 800768a:	d142      	bne.n	8007712 <_malloc_r+0xea>
 800768c:	6821      	ldr	r1, [r4, #0]
 800768e:	1a6d      	subs	r5, r5, r1
 8007690:	4629      	mov	r1, r5
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff ffa6 	bl	80075e4 <sbrk_aligned>
 8007698:	3001      	adds	r0, #1
 800769a:	d03a      	beq.n	8007712 <_malloc_r+0xea>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	442b      	add	r3, r5
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	f8d8 3000 	ldr.w	r3, [r8]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	bb62      	cbnz	r2, 8007704 <_malloc_r+0xdc>
 80076aa:	f8c8 7000 	str.w	r7, [r8]
 80076ae:	e00f      	b.n	80076d0 <_malloc_r+0xa8>
 80076b0:	6822      	ldr	r2, [r4, #0]
 80076b2:	1b52      	subs	r2, r2, r5
 80076b4:	d420      	bmi.n	80076f8 <_malloc_r+0xd0>
 80076b6:	2a0b      	cmp	r2, #11
 80076b8:	d917      	bls.n	80076ea <_malloc_r+0xc2>
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	42a3      	cmp	r3, r4
 80076be:	6025      	str	r5, [r4, #0]
 80076c0:	bf18      	it	ne
 80076c2:	6059      	strne	r1, [r3, #4]
 80076c4:	6863      	ldr	r3, [r4, #4]
 80076c6:	bf08      	it	eq
 80076c8:	f8c8 1000 	streq.w	r1, [r8]
 80076cc:	5162      	str	r2, [r4, r5]
 80076ce:	604b      	str	r3, [r1, #4]
 80076d0:	4630      	mov	r0, r6
 80076d2:	f000 f82f 	bl	8007734 <__malloc_unlock>
 80076d6:	f104 000b 	add.w	r0, r4, #11
 80076da:	1d23      	adds	r3, r4, #4
 80076dc:	f020 0007 	bic.w	r0, r0, #7
 80076e0:	1ac2      	subs	r2, r0, r3
 80076e2:	bf1c      	itt	ne
 80076e4:	1a1b      	subne	r3, r3, r0
 80076e6:	50a3      	strne	r3, [r4, r2]
 80076e8:	e7af      	b.n	800764a <_malloc_r+0x22>
 80076ea:	6862      	ldr	r2, [r4, #4]
 80076ec:	42a3      	cmp	r3, r4
 80076ee:	bf0c      	ite	eq
 80076f0:	f8c8 2000 	streq.w	r2, [r8]
 80076f4:	605a      	strne	r2, [r3, #4]
 80076f6:	e7eb      	b.n	80076d0 <_malloc_r+0xa8>
 80076f8:	4623      	mov	r3, r4
 80076fa:	6864      	ldr	r4, [r4, #4]
 80076fc:	e7ae      	b.n	800765c <_malloc_r+0x34>
 80076fe:	463c      	mov	r4, r7
 8007700:	687f      	ldr	r7, [r7, #4]
 8007702:	e7b6      	b.n	8007672 <_malloc_r+0x4a>
 8007704:	461a      	mov	r2, r3
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	42a3      	cmp	r3, r4
 800770a:	d1fb      	bne.n	8007704 <_malloc_r+0xdc>
 800770c:	2300      	movs	r3, #0
 800770e:	6053      	str	r3, [r2, #4]
 8007710:	e7de      	b.n	80076d0 <_malloc_r+0xa8>
 8007712:	230c      	movs	r3, #12
 8007714:	6033      	str	r3, [r6, #0]
 8007716:	4630      	mov	r0, r6
 8007718:	f000 f80c 	bl	8007734 <__malloc_unlock>
 800771c:	e794      	b.n	8007648 <_malloc_r+0x20>
 800771e:	6005      	str	r5, [r0, #0]
 8007720:	e7d6      	b.n	80076d0 <_malloc_r+0xa8>
 8007722:	bf00      	nop
 8007724:	200005a8 	.word	0x200005a8

08007728 <__malloc_lock>:
 8007728:	4801      	ldr	r0, [pc, #4]	@ (8007730 <__malloc_lock+0x8>)
 800772a:	f7ff b8b4 	b.w	8006896 <__retarget_lock_acquire_recursive>
 800772e:	bf00      	nop
 8007730:	200005a0 	.word	0x200005a0

08007734 <__malloc_unlock>:
 8007734:	4801      	ldr	r0, [pc, #4]	@ (800773c <__malloc_unlock+0x8>)
 8007736:	f7ff b8af 	b.w	8006898 <__retarget_lock_release_recursive>
 800773a:	bf00      	nop
 800773c:	200005a0 	.word	0x200005a0

08007740 <_Balloc>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	69c6      	ldr	r6, [r0, #28]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	b976      	cbnz	r6, 8007768 <_Balloc+0x28>
 800774a:	2010      	movs	r0, #16
 800774c:	f7ff ff42 	bl	80075d4 <malloc>
 8007750:	4602      	mov	r2, r0
 8007752:	61e0      	str	r0, [r4, #28]
 8007754:	b920      	cbnz	r0, 8007760 <_Balloc+0x20>
 8007756:	4b18      	ldr	r3, [pc, #96]	@ (80077b8 <_Balloc+0x78>)
 8007758:	4818      	ldr	r0, [pc, #96]	@ (80077bc <_Balloc+0x7c>)
 800775a:	216b      	movs	r1, #107	@ 0x6b
 800775c:	f001 fd7c 	bl	8009258 <__assert_func>
 8007760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007764:	6006      	str	r6, [r0, #0]
 8007766:	60c6      	str	r6, [r0, #12]
 8007768:	69e6      	ldr	r6, [r4, #28]
 800776a:	68f3      	ldr	r3, [r6, #12]
 800776c:	b183      	cbz	r3, 8007790 <_Balloc+0x50>
 800776e:	69e3      	ldr	r3, [r4, #28]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007776:	b9b8      	cbnz	r0, 80077a8 <_Balloc+0x68>
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f605 	lsl.w	r6, r1, r5
 800777e:	1d72      	adds	r2, r6, #5
 8007780:	0092      	lsls	r2, r2, #2
 8007782:	4620      	mov	r0, r4
 8007784:	f001 fd86 	bl	8009294 <_calloc_r>
 8007788:	b160      	cbz	r0, 80077a4 <_Balloc+0x64>
 800778a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800778e:	e00e      	b.n	80077ae <_Balloc+0x6e>
 8007790:	2221      	movs	r2, #33	@ 0x21
 8007792:	2104      	movs	r1, #4
 8007794:	4620      	mov	r0, r4
 8007796:	f001 fd7d 	bl	8009294 <_calloc_r>
 800779a:	69e3      	ldr	r3, [r4, #28]
 800779c:	60f0      	str	r0, [r6, #12]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e4      	bne.n	800776e <_Balloc+0x2e>
 80077a4:	2000      	movs	r0, #0
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	6802      	ldr	r2, [r0, #0]
 80077aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ae:	2300      	movs	r3, #0
 80077b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077b4:	e7f7      	b.n	80077a6 <_Balloc+0x66>
 80077b6:	bf00      	nop
 80077b8:	08009ffa 	.word	0x08009ffa
 80077bc:	0800a07a 	.word	0x0800a07a

080077c0 <_Bfree>:
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	69c6      	ldr	r6, [r0, #28]
 80077c4:	4605      	mov	r5, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	b976      	cbnz	r6, 80077e8 <_Bfree+0x28>
 80077ca:	2010      	movs	r0, #16
 80077cc:	f7ff ff02 	bl	80075d4 <malloc>
 80077d0:	4602      	mov	r2, r0
 80077d2:	61e8      	str	r0, [r5, #28]
 80077d4:	b920      	cbnz	r0, 80077e0 <_Bfree+0x20>
 80077d6:	4b09      	ldr	r3, [pc, #36]	@ (80077fc <_Bfree+0x3c>)
 80077d8:	4809      	ldr	r0, [pc, #36]	@ (8007800 <_Bfree+0x40>)
 80077da:	218f      	movs	r1, #143	@ 0x8f
 80077dc:	f001 fd3c 	bl	8009258 <__assert_func>
 80077e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e4:	6006      	str	r6, [r0, #0]
 80077e6:	60c6      	str	r6, [r0, #12]
 80077e8:	b13c      	cbz	r4, 80077fa <_Bfree+0x3a>
 80077ea:	69eb      	ldr	r3, [r5, #28]
 80077ec:	6862      	ldr	r2, [r4, #4]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077f4:	6021      	str	r1, [r4, #0]
 80077f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077fa:	bd70      	pop	{r4, r5, r6, pc}
 80077fc:	08009ffa 	.word	0x08009ffa
 8007800:	0800a07a 	.word	0x0800a07a

08007804 <__multadd>:
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	690d      	ldr	r5, [r1, #16]
 800780a:	4607      	mov	r7, r0
 800780c:	460c      	mov	r4, r1
 800780e:	461e      	mov	r6, r3
 8007810:	f101 0c14 	add.w	ip, r1, #20
 8007814:	2000      	movs	r0, #0
 8007816:	f8dc 3000 	ldr.w	r3, [ip]
 800781a:	b299      	uxth	r1, r3
 800781c:	fb02 6101 	mla	r1, r2, r1, r6
 8007820:	0c1e      	lsrs	r6, r3, #16
 8007822:	0c0b      	lsrs	r3, r1, #16
 8007824:	fb02 3306 	mla	r3, r2, r6, r3
 8007828:	b289      	uxth	r1, r1
 800782a:	3001      	adds	r0, #1
 800782c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007830:	4285      	cmp	r5, r0
 8007832:	f84c 1b04 	str.w	r1, [ip], #4
 8007836:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800783a:	dcec      	bgt.n	8007816 <__multadd+0x12>
 800783c:	b30e      	cbz	r6, 8007882 <__multadd+0x7e>
 800783e:	68a3      	ldr	r3, [r4, #8]
 8007840:	42ab      	cmp	r3, r5
 8007842:	dc19      	bgt.n	8007878 <__multadd+0x74>
 8007844:	6861      	ldr	r1, [r4, #4]
 8007846:	4638      	mov	r0, r7
 8007848:	3101      	adds	r1, #1
 800784a:	f7ff ff79 	bl	8007740 <_Balloc>
 800784e:	4680      	mov	r8, r0
 8007850:	b928      	cbnz	r0, 800785e <__multadd+0x5a>
 8007852:	4602      	mov	r2, r0
 8007854:	4b0c      	ldr	r3, [pc, #48]	@ (8007888 <__multadd+0x84>)
 8007856:	480d      	ldr	r0, [pc, #52]	@ (800788c <__multadd+0x88>)
 8007858:	21ba      	movs	r1, #186	@ 0xba
 800785a:	f001 fcfd 	bl	8009258 <__assert_func>
 800785e:	6922      	ldr	r2, [r4, #16]
 8007860:	3202      	adds	r2, #2
 8007862:	f104 010c 	add.w	r1, r4, #12
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	300c      	adds	r0, #12
 800786a:	f001 fcdf 	bl	800922c <memcpy>
 800786e:	4621      	mov	r1, r4
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ffa5 	bl	80077c0 <_Bfree>
 8007876:	4644      	mov	r4, r8
 8007878:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800787c:	3501      	adds	r5, #1
 800787e:	615e      	str	r6, [r3, #20]
 8007880:	6125      	str	r5, [r4, #16]
 8007882:	4620      	mov	r0, r4
 8007884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007888:	0800a069 	.word	0x0800a069
 800788c:	0800a07a 	.word	0x0800a07a

08007890 <__s2b>:
 8007890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007894:	460c      	mov	r4, r1
 8007896:	4615      	mov	r5, r2
 8007898:	461f      	mov	r7, r3
 800789a:	2209      	movs	r2, #9
 800789c:	3308      	adds	r3, #8
 800789e:	4606      	mov	r6, r0
 80078a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80078a4:	2100      	movs	r1, #0
 80078a6:	2201      	movs	r2, #1
 80078a8:	429a      	cmp	r2, r3
 80078aa:	db09      	blt.n	80078c0 <__s2b+0x30>
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ff47 	bl	8007740 <_Balloc>
 80078b2:	b940      	cbnz	r0, 80078c6 <__s2b+0x36>
 80078b4:	4602      	mov	r2, r0
 80078b6:	4b19      	ldr	r3, [pc, #100]	@ (800791c <__s2b+0x8c>)
 80078b8:	4819      	ldr	r0, [pc, #100]	@ (8007920 <__s2b+0x90>)
 80078ba:	21d3      	movs	r1, #211	@ 0xd3
 80078bc:	f001 fccc 	bl	8009258 <__assert_func>
 80078c0:	0052      	lsls	r2, r2, #1
 80078c2:	3101      	adds	r1, #1
 80078c4:	e7f0      	b.n	80078a8 <__s2b+0x18>
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	6143      	str	r3, [r0, #20]
 80078ca:	2d09      	cmp	r5, #9
 80078cc:	f04f 0301 	mov.w	r3, #1
 80078d0:	6103      	str	r3, [r0, #16]
 80078d2:	dd16      	ble.n	8007902 <__s2b+0x72>
 80078d4:	f104 0909 	add.w	r9, r4, #9
 80078d8:	46c8      	mov	r8, r9
 80078da:	442c      	add	r4, r5
 80078dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80078e0:	4601      	mov	r1, r0
 80078e2:	3b30      	subs	r3, #48	@ 0x30
 80078e4:	220a      	movs	r2, #10
 80078e6:	4630      	mov	r0, r6
 80078e8:	f7ff ff8c 	bl	8007804 <__multadd>
 80078ec:	45a0      	cmp	r8, r4
 80078ee:	d1f5      	bne.n	80078dc <__s2b+0x4c>
 80078f0:	f1a5 0408 	sub.w	r4, r5, #8
 80078f4:	444c      	add	r4, r9
 80078f6:	1b2d      	subs	r5, r5, r4
 80078f8:	1963      	adds	r3, r4, r5
 80078fa:	42bb      	cmp	r3, r7
 80078fc:	db04      	blt.n	8007908 <__s2b+0x78>
 80078fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007902:	340a      	adds	r4, #10
 8007904:	2509      	movs	r5, #9
 8007906:	e7f6      	b.n	80078f6 <__s2b+0x66>
 8007908:	f814 3b01 	ldrb.w	r3, [r4], #1
 800790c:	4601      	mov	r1, r0
 800790e:	3b30      	subs	r3, #48	@ 0x30
 8007910:	220a      	movs	r2, #10
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff ff76 	bl	8007804 <__multadd>
 8007918:	e7ee      	b.n	80078f8 <__s2b+0x68>
 800791a:	bf00      	nop
 800791c:	0800a069 	.word	0x0800a069
 8007920:	0800a07a 	.word	0x0800a07a

08007924 <__hi0bits>:
 8007924:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007928:	4603      	mov	r3, r0
 800792a:	bf36      	itet	cc
 800792c:	0403      	lslcc	r3, r0, #16
 800792e:	2000      	movcs	r0, #0
 8007930:	2010      	movcc	r0, #16
 8007932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007936:	bf3c      	itt	cc
 8007938:	021b      	lslcc	r3, r3, #8
 800793a:	3008      	addcc	r0, #8
 800793c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007940:	bf3c      	itt	cc
 8007942:	011b      	lslcc	r3, r3, #4
 8007944:	3004      	addcc	r0, #4
 8007946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800794a:	bf3c      	itt	cc
 800794c:	009b      	lslcc	r3, r3, #2
 800794e:	3002      	addcc	r0, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	db05      	blt.n	8007960 <__hi0bits+0x3c>
 8007954:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007958:	f100 0001 	add.w	r0, r0, #1
 800795c:	bf08      	it	eq
 800795e:	2020      	moveq	r0, #32
 8007960:	4770      	bx	lr

08007962 <__lo0bits>:
 8007962:	6803      	ldr	r3, [r0, #0]
 8007964:	4602      	mov	r2, r0
 8007966:	f013 0007 	ands.w	r0, r3, #7
 800796a:	d00b      	beq.n	8007984 <__lo0bits+0x22>
 800796c:	07d9      	lsls	r1, r3, #31
 800796e:	d421      	bmi.n	80079b4 <__lo0bits+0x52>
 8007970:	0798      	lsls	r0, r3, #30
 8007972:	bf49      	itett	mi
 8007974:	085b      	lsrmi	r3, r3, #1
 8007976:	089b      	lsrpl	r3, r3, #2
 8007978:	2001      	movmi	r0, #1
 800797a:	6013      	strmi	r3, [r2, #0]
 800797c:	bf5c      	itt	pl
 800797e:	6013      	strpl	r3, [r2, #0]
 8007980:	2002      	movpl	r0, #2
 8007982:	4770      	bx	lr
 8007984:	b299      	uxth	r1, r3
 8007986:	b909      	cbnz	r1, 800798c <__lo0bits+0x2a>
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	2010      	movs	r0, #16
 800798c:	b2d9      	uxtb	r1, r3
 800798e:	b909      	cbnz	r1, 8007994 <__lo0bits+0x32>
 8007990:	3008      	adds	r0, #8
 8007992:	0a1b      	lsrs	r3, r3, #8
 8007994:	0719      	lsls	r1, r3, #28
 8007996:	bf04      	itt	eq
 8007998:	091b      	lsreq	r3, r3, #4
 800799a:	3004      	addeq	r0, #4
 800799c:	0799      	lsls	r1, r3, #30
 800799e:	bf04      	itt	eq
 80079a0:	089b      	lsreq	r3, r3, #2
 80079a2:	3002      	addeq	r0, #2
 80079a4:	07d9      	lsls	r1, r3, #31
 80079a6:	d403      	bmi.n	80079b0 <__lo0bits+0x4e>
 80079a8:	085b      	lsrs	r3, r3, #1
 80079aa:	f100 0001 	add.w	r0, r0, #1
 80079ae:	d003      	beq.n	80079b8 <__lo0bits+0x56>
 80079b0:	6013      	str	r3, [r2, #0]
 80079b2:	4770      	bx	lr
 80079b4:	2000      	movs	r0, #0
 80079b6:	4770      	bx	lr
 80079b8:	2020      	movs	r0, #32
 80079ba:	4770      	bx	lr

080079bc <__i2b>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	460c      	mov	r4, r1
 80079c0:	2101      	movs	r1, #1
 80079c2:	f7ff febd 	bl	8007740 <_Balloc>
 80079c6:	4602      	mov	r2, r0
 80079c8:	b928      	cbnz	r0, 80079d6 <__i2b+0x1a>
 80079ca:	4b05      	ldr	r3, [pc, #20]	@ (80079e0 <__i2b+0x24>)
 80079cc:	4805      	ldr	r0, [pc, #20]	@ (80079e4 <__i2b+0x28>)
 80079ce:	f240 1145 	movw	r1, #325	@ 0x145
 80079d2:	f001 fc41 	bl	8009258 <__assert_func>
 80079d6:	2301      	movs	r3, #1
 80079d8:	6144      	str	r4, [r0, #20]
 80079da:	6103      	str	r3, [r0, #16]
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	bf00      	nop
 80079e0:	0800a069 	.word	0x0800a069
 80079e4:	0800a07a 	.word	0x0800a07a

080079e8 <__multiply>:
 80079e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	4614      	mov	r4, r2
 80079ee:	690a      	ldr	r2, [r1, #16]
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	bfa8      	it	ge
 80079f6:	4623      	movge	r3, r4
 80079f8:	460f      	mov	r7, r1
 80079fa:	bfa4      	itt	ge
 80079fc:	460c      	movge	r4, r1
 80079fe:	461f      	movge	r7, r3
 8007a00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	6861      	ldr	r1, [r4, #4]
 8007a0c:	eb0a 0609 	add.w	r6, sl, r9
 8007a10:	42b3      	cmp	r3, r6
 8007a12:	b085      	sub	sp, #20
 8007a14:	bfb8      	it	lt
 8007a16:	3101      	addlt	r1, #1
 8007a18:	f7ff fe92 	bl	8007740 <_Balloc>
 8007a1c:	b930      	cbnz	r0, 8007a2c <__multiply+0x44>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4b44      	ldr	r3, [pc, #272]	@ (8007b34 <__multiply+0x14c>)
 8007a22:	4845      	ldr	r0, [pc, #276]	@ (8007b38 <__multiply+0x150>)
 8007a24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a28:	f001 fc16 	bl	8009258 <__assert_func>
 8007a2c:	f100 0514 	add.w	r5, r0, #20
 8007a30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a34:	462b      	mov	r3, r5
 8007a36:	2200      	movs	r2, #0
 8007a38:	4543      	cmp	r3, r8
 8007a3a:	d321      	bcc.n	8007a80 <__multiply+0x98>
 8007a3c:	f107 0114 	add.w	r1, r7, #20
 8007a40:	f104 0214 	add.w	r2, r4, #20
 8007a44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a4c:	9302      	str	r3, [sp, #8]
 8007a4e:	1b13      	subs	r3, r2, r4
 8007a50:	3b15      	subs	r3, #21
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	3304      	adds	r3, #4
 8007a58:	f104 0715 	add.w	r7, r4, #21
 8007a5c:	42ba      	cmp	r2, r7
 8007a5e:	bf38      	it	cc
 8007a60:	2304      	movcc	r3, #4
 8007a62:	9301      	str	r3, [sp, #4]
 8007a64:	9b02      	ldr	r3, [sp, #8]
 8007a66:	9103      	str	r1, [sp, #12]
 8007a68:	428b      	cmp	r3, r1
 8007a6a:	d80c      	bhi.n	8007a86 <__multiply+0x9e>
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	dd03      	ble.n	8007a78 <__multiply+0x90>
 8007a70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d05b      	beq.n	8007b30 <__multiply+0x148>
 8007a78:	6106      	str	r6, [r0, #16]
 8007a7a:	b005      	add	sp, #20
 8007a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a80:	f843 2b04 	str.w	r2, [r3], #4
 8007a84:	e7d8      	b.n	8007a38 <__multiply+0x50>
 8007a86:	f8b1 a000 	ldrh.w	sl, [r1]
 8007a8a:	f1ba 0f00 	cmp.w	sl, #0
 8007a8e:	d024      	beq.n	8007ada <__multiply+0xf2>
 8007a90:	f104 0e14 	add.w	lr, r4, #20
 8007a94:	46a9      	mov	r9, r5
 8007a96:	f04f 0c00 	mov.w	ip, #0
 8007a9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a9e:	f8d9 3000 	ldr.w	r3, [r9]
 8007aa2:	fa1f fb87 	uxth.w	fp, r7
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	fb0a 330b 	mla	r3, sl, fp, r3
 8007aac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ab0:	f8d9 7000 	ldr.w	r7, [r9]
 8007ab4:	4463      	add	r3, ip
 8007ab6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007aba:	fb0a c70b 	mla	r7, sl, fp, ip
 8007abe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ac8:	4572      	cmp	r2, lr
 8007aca:	f849 3b04 	str.w	r3, [r9], #4
 8007ace:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ad2:	d8e2      	bhi.n	8007a9a <__multiply+0xb2>
 8007ad4:	9b01      	ldr	r3, [sp, #4]
 8007ad6:	f845 c003 	str.w	ip, [r5, r3]
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ae0:	3104      	adds	r1, #4
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	d021      	beq.n	8007b2c <__multiply+0x144>
 8007ae8:	682b      	ldr	r3, [r5, #0]
 8007aea:	f104 0c14 	add.w	ip, r4, #20
 8007aee:	46ae      	mov	lr, r5
 8007af0:	f04f 0a00 	mov.w	sl, #0
 8007af4:	f8bc b000 	ldrh.w	fp, [ip]
 8007af8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007afc:	fb09 770b 	mla	r7, r9, fp, r7
 8007b00:	4457      	add	r7, sl
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b08:	f84e 3b04 	str.w	r3, [lr], #4
 8007b0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b14:	f8be 3000 	ldrh.w	r3, [lr]
 8007b18:	fb09 330a 	mla	r3, r9, sl, r3
 8007b1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b20:	4562      	cmp	r2, ip
 8007b22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b26:	d8e5      	bhi.n	8007af4 <__multiply+0x10c>
 8007b28:	9f01      	ldr	r7, [sp, #4]
 8007b2a:	51eb      	str	r3, [r5, r7]
 8007b2c:	3504      	adds	r5, #4
 8007b2e:	e799      	b.n	8007a64 <__multiply+0x7c>
 8007b30:	3e01      	subs	r6, #1
 8007b32:	e79b      	b.n	8007a6c <__multiply+0x84>
 8007b34:	0800a069 	.word	0x0800a069
 8007b38:	0800a07a 	.word	0x0800a07a

08007b3c <__pow5mult>:
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b40:	4615      	mov	r5, r2
 8007b42:	f012 0203 	ands.w	r2, r2, #3
 8007b46:	4607      	mov	r7, r0
 8007b48:	460e      	mov	r6, r1
 8007b4a:	d007      	beq.n	8007b5c <__pow5mult+0x20>
 8007b4c:	4c25      	ldr	r4, [pc, #148]	@ (8007be4 <__pow5mult+0xa8>)
 8007b4e:	3a01      	subs	r2, #1
 8007b50:	2300      	movs	r3, #0
 8007b52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b56:	f7ff fe55 	bl	8007804 <__multadd>
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	10ad      	asrs	r5, r5, #2
 8007b5e:	d03d      	beq.n	8007bdc <__pow5mult+0xa0>
 8007b60:	69fc      	ldr	r4, [r7, #28]
 8007b62:	b97c      	cbnz	r4, 8007b84 <__pow5mult+0x48>
 8007b64:	2010      	movs	r0, #16
 8007b66:	f7ff fd35 	bl	80075d4 <malloc>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	61f8      	str	r0, [r7, #28]
 8007b6e:	b928      	cbnz	r0, 8007b7c <__pow5mult+0x40>
 8007b70:	4b1d      	ldr	r3, [pc, #116]	@ (8007be8 <__pow5mult+0xac>)
 8007b72:	481e      	ldr	r0, [pc, #120]	@ (8007bec <__pow5mult+0xb0>)
 8007b74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007b78:	f001 fb6e 	bl	8009258 <__assert_func>
 8007b7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b80:	6004      	str	r4, [r0, #0]
 8007b82:	60c4      	str	r4, [r0, #12]
 8007b84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007b88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b8c:	b94c      	cbnz	r4, 8007ba2 <__pow5mult+0x66>
 8007b8e:	f240 2171 	movw	r1, #625	@ 0x271
 8007b92:	4638      	mov	r0, r7
 8007b94:	f7ff ff12 	bl	80079bc <__i2b>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	f04f 0900 	mov.w	r9, #0
 8007ba6:	07eb      	lsls	r3, r5, #31
 8007ba8:	d50a      	bpl.n	8007bc0 <__pow5mult+0x84>
 8007baa:	4631      	mov	r1, r6
 8007bac:	4622      	mov	r2, r4
 8007bae:	4638      	mov	r0, r7
 8007bb0:	f7ff ff1a 	bl	80079e8 <__multiply>
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4680      	mov	r8, r0
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7ff fe01 	bl	80077c0 <_Bfree>
 8007bbe:	4646      	mov	r6, r8
 8007bc0:	106d      	asrs	r5, r5, #1
 8007bc2:	d00b      	beq.n	8007bdc <__pow5mult+0xa0>
 8007bc4:	6820      	ldr	r0, [r4, #0]
 8007bc6:	b938      	cbnz	r0, 8007bd8 <__pow5mult+0x9c>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4621      	mov	r1, r4
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f7ff ff0b 	bl	80079e8 <__multiply>
 8007bd2:	6020      	str	r0, [r4, #0]
 8007bd4:	f8c0 9000 	str.w	r9, [r0]
 8007bd8:	4604      	mov	r4, r0
 8007bda:	e7e4      	b.n	8007ba6 <__pow5mult+0x6a>
 8007bdc:	4630      	mov	r0, r6
 8007bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007be2:	bf00      	nop
 8007be4:	0800a0d4 	.word	0x0800a0d4
 8007be8:	08009ffa 	.word	0x08009ffa
 8007bec:	0800a07a 	.word	0x0800a07a

08007bf0 <__lshift>:
 8007bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	6849      	ldr	r1, [r1, #4]
 8007bf8:	6923      	ldr	r3, [r4, #16]
 8007bfa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007bfe:	68a3      	ldr	r3, [r4, #8]
 8007c00:	4607      	mov	r7, r0
 8007c02:	4691      	mov	r9, r2
 8007c04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c08:	f108 0601 	add.w	r6, r8, #1
 8007c0c:	42b3      	cmp	r3, r6
 8007c0e:	db0b      	blt.n	8007c28 <__lshift+0x38>
 8007c10:	4638      	mov	r0, r7
 8007c12:	f7ff fd95 	bl	8007740 <_Balloc>
 8007c16:	4605      	mov	r5, r0
 8007c18:	b948      	cbnz	r0, 8007c2e <__lshift+0x3e>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4b28      	ldr	r3, [pc, #160]	@ (8007cc0 <__lshift+0xd0>)
 8007c1e:	4829      	ldr	r0, [pc, #164]	@ (8007cc4 <__lshift+0xd4>)
 8007c20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c24:	f001 fb18 	bl	8009258 <__assert_func>
 8007c28:	3101      	adds	r1, #1
 8007c2a:	005b      	lsls	r3, r3, #1
 8007c2c:	e7ee      	b.n	8007c0c <__lshift+0x1c>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	f100 0114 	add.w	r1, r0, #20
 8007c34:	f100 0210 	add.w	r2, r0, #16
 8007c38:	4618      	mov	r0, r3
 8007c3a:	4553      	cmp	r3, sl
 8007c3c:	db33      	blt.n	8007ca6 <__lshift+0xb6>
 8007c3e:	6920      	ldr	r0, [r4, #16]
 8007c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c44:	f104 0314 	add.w	r3, r4, #20
 8007c48:	f019 091f 	ands.w	r9, r9, #31
 8007c4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c54:	d02b      	beq.n	8007cae <__lshift+0xbe>
 8007c56:	f1c9 0e20 	rsb	lr, r9, #32
 8007c5a:	468a      	mov	sl, r1
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	fa00 f009 	lsl.w	r0, r0, r9
 8007c64:	4310      	orrs	r0, r2
 8007c66:	f84a 0b04 	str.w	r0, [sl], #4
 8007c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6e:	459c      	cmp	ip, r3
 8007c70:	fa22 f20e 	lsr.w	r2, r2, lr
 8007c74:	d8f3      	bhi.n	8007c5e <__lshift+0x6e>
 8007c76:	ebac 0304 	sub.w	r3, ip, r4
 8007c7a:	3b15      	subs	r3, #21
 8007c7c:	f023 0303 	bic.w	r3, r3, #3
 8007c80:	3304      	adds	r3, #4
 8007c82:	f104 0015 	add.w	r0, r4, #21
 8007c86:	4584      	cmp	ip, r0
 8007c88:	bf38      	it	cc
 8007c8a:	2304      	movcc	r3, #4
 8007c8c:	50ca      	str	r2, [r1, r3]
 8007c8e:	b10a      	cbz	r2, 8007c94 <__lshift+0xa4>
 8007c90:	f108 0602 	add.w	r6, r8, #2
 8007c94:	3e01      	subs	r6, #1
 8007c96:	4638      	mov	r0, r7
 8007c98:	612e      	str	r6, [r5, #16]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	f7ff fd90 	bl	80077c0 <_Bfree>
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca6:	f842 0f04 	str.w	r0, [r2, #4]!
 8007caa:	3301      	adds	r3, #1
 8007cac:	e7c5      	b.n	8007c3a <__lshift+0x4a>
 8007cae:	3904      	subs	r1, #4
 8007cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8007cb8:	459c      	cmp	ip, r3
 8007cba:	d8f9      	bhi.n	8007cb0 <__lshift+0xc0>
 8007cbc:	e7ea      	b.n	8007c94 <__lshift+0xa4>
 8007cbe:	bf00      	nop
 8007cc0:	0800a069 	.word	0x0800a069
 8007cc4:	0800a07a 	.word	0x0800a07a

08007cc8 <__mcmp>:
 8007cc8:	690a      	ldr	r2, [r1, #16]
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6900      	ldr	r0, [r0, #16]
 8007cce:	1a80      	subs	r0, r0, r2
 8007cd0:	b530      	push	{r4, r5, lr}
 8007cd2:	d10e      	bne.n	8007cf2 <__mcmp+0x2a>
 8007cd4:	3314      	adds	r3, #20
 8007cd6:	3114      	adds	r1, #20
 8007cd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007cdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ce0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ce4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ce8:	4295      	cmp	r5, r2
 8007cea:	d003      	beq.n	8007cf4 <__mcmp+0x2c>
 8007cec:	d205      	bcs.n	8007cfa <__mcmp+0x32>
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf2:	bd30      	pop	{r4, r5, pc}
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d3f3      	bcc.n	8007ce0 <__mcmp+0x18>
 8007cf8:	e7fb      	b.n	8007cf2 <__mcmp+0x2a>
 8007cfa:	2001      	movs	r0, #1
 8007cfc:	e7f9      	b.n	8007cf2 <__mcmp+0x2a>
	...

08007d00 <__mdiff>:
 8007d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d04:	4689      	mov	r9, r1
 8007d06:	4606      	mov	r6, r0
 8007d08:	4611      	mov	r1, r2
 8007d0a:	4648      	mov	r0, r9
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	f7ff ffdb 	bl	8007cc8 <__mcmp>
 8007d12:	1e05      	subs	r5, r0, #0
 8007d14:	d112      	bne.n	8007d3c <__mdiff+0x3c>
 8007d16:	4629      	mov	r1, r5
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f7ff fd11 	bl	8007740 <_Balloc>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	b928      	cbnz	r0, 8007d2e <__mdiff+0x2e>
 8007d22:	4b3f      	ldr	r3, [pc, #252]	@ (8007e20 <__mdiff+0x120>)
 8007d24:	f240 2137 	movw	r1, #567	@ 0x237
 8007d28:	483e      	ldr	r0, [pc, #248]	@ (8007e24 <__mdiff+0x124>)
 8007d2a:	f001 fa95 	bl	8009258 <__assert_func>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d34:	4610      	mov	r0, r2
 8007d36:	b003      	add	sp, #12
 8007d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d3c:	bfbc      	itt	lt
 8007d3e:	464b      	movlt	r3, r9
 8007d40:	46a1      	movlt	r9, r4
 8007d42:	4630      	mov	r0, r6
 8007d44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d48:	bfba      	itte	lt
 8007d4a:	461c      	movlt	r4, r3
 8007d4c:	2501      	movlt	r5, #1
 8007d4e:	2500      	movge	r5, #0
 8007d50:	f7ff fcf6 	bl	8007740 <_Balloc>
 8007d54:	4602      	mov	r2, r0
 8007d56:	b918      	cbnz	r0, 8007d60 <__mdiff+0x60>
 8007d58:	4b31      	ldr	r3, [pc, #196]	@ (8007e20 <__mdiff+0x120>)
 8007d5a:	f240 2145 	movw	r1, #581	@ 0x245
 8007d5e:	e7e3      	b.n	8007d28 <__mdiff+0x28>
 8007d60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d64:	6926      	ldr	r6, [r4, #16]
 8007d66:	60c5      	str	r5, [r0, #12]
 8007d68:	f109 0310 	add.w	r3, r9, #16
 8007d6c:	f109 0514 	add.w	r5, r9, #20
 8007d70:	f104 0e14 	add.w	lr, r4, #20
 8007d74:	f100 0b14 	add.w	fp, r0, #20
 8007d78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007d7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007d80:	9301      	str	r3, [sp, #4]
 8007d82:	46d9      	mov	r9, fp
 8007d84:	f04f 0c00 	mov.w	ip, #0
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007d8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007d92:	9301      	str	r3, [sp, #4]
 8007d94:	fa1f f38a 	uxth.w	r3, sl
 8007d98:	4619      	mov	r1, r3
 8007d9a:	b283      	uxth	r3, r0
 8007d9c:	1acb      	subs	r3, r1, r3
 8007d9e:	0c00      	lsrs	r0, r0, #16
 8007da0:	4463      	add	r3, ip
 8007da2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007da6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007db0:	4576      	cmp	r6, lr
 8007db2:	f849 3b04 	str.w	r3, [r9], #4
 8007db6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007dba:	d8e5      	bhi.n	8007d88 <__mdiff+0x88>
 8007dbc:	1b33      	subs	r3, r6, r4
 8007dbe:	3b15      	subs	r3, #21
 8007dc0:	f023 0303 	bic.w	r3, r3, #3
 8007dc4:	3415      	adds	r4, #21
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	42a6      	cmp	r6, r4
 8007dca:	bf38      	it	cc
 8007dcc:	2304      	movcc	r3, #4
 8007dce:	441d      	add	r5, r3
 8007dd0:	445b      	add	r3, fp
 8007dd2:	461e      	mov	r6, r3
 8007dd4:	462c      	mov	r4, r5
 8007dd6:	4544      	cmp	r4, r8
 8007dd8:	d30e      	bcc.n	8007df8 <__mdiff+0xf8>
 8007dda:	f108 0103 	add.w	r1, r8, #3
 8007dde:	1b49      	subs	r1, r1, r5
 8007de0:	f021 0103 	bic.w	r1, r1, #3
 8007de4:	3d03      	subs	r5, #3
 8007de6:	45a8      	cmp	r8, r5
 8007de8:	bf38      	it	cc
 8007dea:	2100      	movcc	r1, #0
 8007dec:	440b      	add	r3, r1
 8007dee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007df2:	b191      	cbz	r1, 8007e1a <__mdiff+0x11a>
 8007df4:	6117      	str	r7, [r2, #16]
 8007df6:	e79d      	b.n	8007d34 <__mdiff+0x34>
 8007df8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007dfc:	46e6      	mov	lr, ip
 8007dfe:	0c08      	lsrs	r0, r1, #16
 8007e00:	fa1c fc81 	uxtah	ip, ip, r1
 8007e04:	4471      	add	r1, lr
 8007e06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e0a:	b289      	uxth	r1, r1
 8007e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e10:	f846 1b04 	str.w	r1, [r6], #4
 8007e14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e18:	e7dd      	b.n	8007dd6 <__mdiff+0xd6>
 8007e1a:	3f01      	subs	r7, #1
 8007e1c:	e7e7      	b.n	8007dee <__mdiff+0xee>
 8007e1e:	bf00      	nop
 8007e20:	0800a069 	.word	0x0800a069
 8007e24:	0800a07a 	.word	0x0800a07a

08007e28 <__ulp>:
 8007e28:	b082      	sub	sp, #8
 8007e2a:	ed8d 0b00 	vstr	d0, [sp]
 8007e2e:	9a01      	ldr	r2, [sp, #4]
 8007e30:	4b0f      	ldr	r3, [pc, #60]	@ (8007e70 <__ulp+0x48>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc08      	bgt.n	8007e4e <__ulp+0x26>
 8007e3c:	425b      	negs	r3, r3
 8007e3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e46:	da04      	bge.n	8007e52 <__ulp+0x2a>
 8007e48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e4c:	4113      	asrs	r3, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	e008      	b.n	8007e64 <__ulp+0x3c>
 8007e52:	f1a2 0314 	sub.w	r3, r2, #20
 8007e56:	2b1e      	cmp	r3, #30
 8007e58:	bfda      	itte	le
 8007e5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e5e:	40da      	lsrle	r2, r3
 8007e60:	2201      	movgt	r2, #1
 8007e62:	2300      	movs	r3, #0
 8007e64:	4619      	mov	r1, r3
 8007e66:	4610      	mov	r0, r2
 8007e68:	ec41 0b10 	vmov	d0, r0, r1
 8007e6c:	b002      	add	sp, #8
 8007e6e:	4770      	bx	lr
 8007e70:	7ff00000 	.word	0x7ff00000

08007e74 <__b2d>:
 8007e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e78:	6906      	ldr	r6, [r0, #16]
 8007e7a:	f100 0814 	add.w	r8, r0, #20
 8007e7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007e82:	1f37      	subs	r7, r6, #4
 8007e84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7ff fd4b 	bl	8007924 <__hi0bits>
 8007e8e:	f1c0 0320 	rsb	r3, r0, #32
 8007e92:	280a      	cmp	r0, #10
 8007e94:	600b      	str	r3, [r1, #0]
 8007e96:	491b      	ldr	r1, [pc, #108]	@ (8007f04 <__b2d+0x90>)
 8007e98:	dc15      	bgt.n	8007ec6 <__b2d+0x52>
 8007e9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8007e9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ea2:	45b8      	cmp	r8, r7
 8007ea4:	ea43 0501 	orr.w	r5, r3, r1
 8007ea8:	bf34      	ite	cc
 8007eaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007eae:	2300      	movcs	r3, #0
 8007eb0:	3015      	adds	r0, #21
 8007eb2:	fa02 f000 	lsl.w	r0, r2, r0
 8007eb6:	fa23 f30c 	lsr.w	r3, r3, ip
 8007eba:	4303      	orrs	r3, r0
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	ec45 4b10 	vmov	d0, r4, r5
 8007ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec6:	45b8      	cmp	r8, r7
 8007ec8:	bf3a      	itte	cc
 8007eca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007ece:	f1a6 0708 	subcc.w	r7, r6, #8
 8007ed2:	2300      	movcs	r3, #0
 8007ed4:	380b      	subs	r0, #11
 8007ed6:	d012      	beq.n	8007efe <__b2d+0x8a>
 8007ed8:	f1c0 0120 	rsb	r1, r0, #32
 8007edc:	fa23 f401 	lsr.w	r4, r3, r1
 8007ee0:	4082      	lsls	r2, r0
 8007ee2:	4322      	orrs	r2, r4
 8007ee4:	4547      	cmp	r7, r8
 8007ee6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007eea:	bf8c      	ite	hi
 8007eec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007ef0:	2200      	movls	r2, #0
 8007ef2:	4083      	lsls	r3, r0
 8007ef4:	40ca      	lsrs	r2, r1
 8007ef6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007efa:	4313      	orrs	r3, r2
 8007efc:	e7de      	b.n	8007ebc <__b2d+0x48>
 8007efe:	ea42 0501 	orr.w	r5, r2, r1
 8007f02:	e7db      	b.n	8007ebc <__b2d+0x48>
 8007f04:	3ff00000 	.word	0x3ff00000

08007f08 <__d2b>:
 8007f08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	2101      	movs	r1, #1
 8007f10:	ec59 8b10 	vmov	r8, r9, d0
 8007f14:	4616      	mov	r6, r2
 8007f16:	f7ff fc13 	bl	8007740 <_Balloc>
 8007f1a:	4604      	mov	r4, r0
 8007f1c:	b930      	cbnz	r0, 8007f2c <__d2b+0x24>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	4b23      	ldr	r3, [pc, #140]	@ (8007fb0 <__d2b+0xa8>)
 8007f22:	4824      	ldr	r0, [pc, #144]	@ (8007fb4 <__d2b+0xac>)
 8007f24:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f28:	f001 f996 	bl	8009258 <__assert_func>
 8007f2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f34:	b10d      	cbz	r5, 8007f3a <__d2b+0x32>
 8007f36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f3a:	9301      	str	r3, [sp, #4]
 8007f3c:	f1b8 0300 	subs.w	r3, r8, #0
 8007f40:	d023      	beq.n	8007f8a <__d2b+0x82>
 8007f42:	4668      	mov	r0, sp
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	f7ff fd0c 	bl	8007962 <__lo0bits>
 8007f4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f4e:	b1d0      	cbz	r0, 8007f86 <__d2b+0x7e>
 8007f50:	f1c0 0320 	rsb	r3, r0, #32
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	430b      	orrs	r3, r1
 8007f5a:	40c2      	lsrs	r2, r0
 8007f5c:	6163      	str	r3, [r4, #20]
 8007f5e:	9201      	str	r2, [sp, #4]
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	61a3      	str	r3, [r4, #24]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	bf0c      	ite	eq
 8007f68:	2201      	moveq	r2, #1
 8007f6a:	2202      	movne	r2, #2
 8007f6c:	6122      	str	r2, [r4, #16]
 8007f6e:	b1a5      	cbz	r5, 8007f9a <__d2b+0x92>
 8007f70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f74:	4405      	add	r5, r0
 8007f76:	603d      	str	r5, [r7, #0]
 8007f78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f7c:	6030      	str	r0, [r6, #0]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	b003      	add	sp, #12
 8007f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f86:	6161      	str	r1, [r4, #20]
 8007f88:	e7ea      	b.n	8007f60 <__d2b+0x58>
 8007f8a:	a801      	add	r0, sp, #4
 8007f8c:	f7ff fce9 	bl	8007962 <__lo0bits>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	6163      	str	r3, [r4, #20]
 8007f94:	3020      	adds	r0, #32
 8007f96:	2201      	movs	r2, #1
 8007f98:	e7e8      	b.n	8007f6c <__d2b+0x64>
 8007f9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fa2:	6038      	str	r0, [r7, #0]
 8007fa4:	6918      	ldr	r0, [r3, #16]
 8007fa6:	f7ff fcbd 	bl	8007924 <__hi0bits>
 8007faa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fae:	e7e5      	b.n	8007f7c <__d2b+0x74>
 8007fb0:	0800a069 	.word	0x0800a069
 8007fb4:	0800a07a 	.word	0x0800a07a

08007fb8 <__ratio>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	e9cd 1000 	strd	r1, r0, [sp]
 8007fc2:	a902      	add	r1, sp, #8
 8007fc4:	f7ff ff56 	bl	8007e74 <__b2d>
 8007fc8:	9800      	ldr	r0, [sp, #0]
 8007fca:	a903      	add	r1, sp, #12
 8007fcc:	ec55 4b10 	vmov	r4, r5, d0
 8007fd0:	f7ff ff50 	bl	8007e74 <__b2d>
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	6919      	ldr	r1, [r3, #16]
 8007fd8:	9b00      	ldr	r3, [sp, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	1ac9      	subs	r1, r1, r3
 8007fde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007fe2:	1a9b      	subs	r3, r3, r2
 8007fe4:	ec5b ab10 	vmov	sl, fp, d0
 8007fe8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	bfce      	itee	gt
 8007ff0:	462a      	movgt	r2, r5
 8007ff2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007ff6:	465a      	movle	r2, fp
 8007ff8:	462f      	mov	r7, r5
 8007ffa:	46d9      	mov	r9, fp
 8007ffc:	bfcc      	ite	gt
 8007ffe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008002:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008006:	464b      	mov	r3, r9
 8008008:	4652      	mov	r2, sl
 800800a:	4620      	mov	r0, r4
 800800c:	4639      	mov	r1, r7
 800800e:	f7f8 fc25 	bl	800085c <__aeabi_ddiv>
 8008012:	ec41 0b10 	vmov	d0, r0, r1
 8008016:	b005      	add	sp, #20
 8008018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800801c <__copybits>:
 800801c:	3901      	subs	r1, #1
 800801e:	b570      	push	{r4, r5, r6, lr}
 8008020:	1149      	asrs	r1, r1, #5
 8008022:	6914      	ldr	r4, [r2, #16]
 8008024:	3101      	adds	r1, #1
 8008026:	f102 0314 	add.w	r3, r2, #20
 800802a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800802e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008032:	1f05      	subs	r5, r0, #4
 8008034:	42a3      	cmp	r3, r4
 8008036:	d30c      	bcc.n	8008052 <__copybits+0x36>
 8008038:	1aa3      	subs	r3, r4, r2
 800803a:	3b11      	subs	r3, #17
 800803c:	f023 0303 	bic.w	r3, r3, #3
 8008040:	3211      	adds	r2, #17
 8008042:	42a2      	cmp	r2, r4
 8008044:	bf88      	it	hi
 8008046:	2300      	movhi	r3, #0
 8008048:	4418      	add	r0, r3
 800804a:	2300      	movs	r3, #0
 800804c:	4288      	cmp	r0, r1
 800804e:	d305      	bcc.n	800805c <__copybits+0x40>
 8008050:	bd70      	pop	{r4, r5, r6, pc}
 8008052:	f853 6b04 	ldr.w	r6, [r3], #4
 8008056:	f845 6f04 	str.w	r6, [r5, #4]!
 800805a:	e7eb      	b.n	8008034 <__copybits+0x18>
 800805c:	f840 3b04 	str.w	r3, [r0], #4
 8008060:	e7f4      	b.n	800804c <__copybits+0x30>

08008062 <__any_on>:
 8008062:	f100 0214 	add.w	r2, r0, #20
 8008066:	6900      	ldr	r0, [r0, #16]
 8008068:	114b      	asrs	r3, r1, #5
 800806a:	4298      	cmp	r0, r3
 800806c:	b510      	push	{r4, lr}
 800806e:	db11      	blt.n	8008094 <__any_on+0x32>
 8008070:	dd0a      	ble.n	8008088 <__any_on+0x26>
 8008072:	f011 011f 	ands.w	r1, r1, #31
 8008076:	d007      	beq.n	8008088 <__any_on+0x26>
 8008078:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800807c:	fa24 f001 	lsr.w	r0, r4, r1
 8008080:	fa00 f101 	lsl.w	r1, r0, r1
 8008084:	428c      	cmp	r4, r1
 8008086:	d10b      	bne.n	80080a0 <__any_on+0x3e>
 8008088:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800808c:	4293      	cmp	r3, r2
 800808e:	d803      	bhi.n	8008098 <__any_on+0x36>
 8008090:	2000      	movs	r0, #0
 8008092:	bd10      	pop	{r4, pc}
 8008094:	4603      	mov	r3, r0
 8008096:	e7f7      	b.n	8008088 <__any_on+0x26>
 8008098:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800809c:	2900      	cmp	r1, #0
 800809e:	d0f5      	beq.n	800808c <__any_on+0x2a>
 80080a0:	2001      	movs	r0, #1
 80080a2:	e7f6      	b.n	8008092 <__any_on+0x30>

080080a4 <sulp>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4604      	mov	r4, r0
 80080a8:	460d      	mov	r5, r1
 80080aa:	ec45 4b10 	vmov	d0, r4, r5
 80080ae:	4616      	mov	r6, r2
 80080b0:	f7ff feba 	bl	8007e28 <__ulp>
 80080b4:	ec51 0b10 	vmov	r0, r1, d0
 80080b8:	b17e      	cbz	r6, 80080da <sulp+0x36>
 80080ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80080be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dd09      	ble.n	80080da <sulp+0x36>
 80080c6:	051b      	lsls	r3, r3, #20
 80080c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80080cc:	2400      	movs	r4, #0
 80080ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80080d2:	4622      	mov	r2, r4
 80080d4:	462b      	mov	r3, r5
 80080d6:	f7f8 fa97 	bl	8000608 <__aeabi_dmul>
 80080da:	ec41 0b10 	vmov	d0, r0, r1
 80080de:	bd70      	pop	{r4, r5, r6, pc}

080080e0 <_strtod_l>:
 80080e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e4:	b09f      	sub	sp, #124	@ 0x7c
 80080e6:	460c      	mov	r4, r1
 80080e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80080ea:	2200      	movs	r2, #0
 80080ec:	921a      	str	r2, [sp, #104]	@ 0x68
 80080ee:	9005      	str	r0, [sp, #20]
 80080f0:	f04f 0a00 	mov.w	sl, #0
 80080f4:	f04f 0b00 	mov.w	fp, #0
 80080f8:	460a      	mov	r2, r1
 80080fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80080fc:	7811      	ldrb	r1, [r2, #0]
 80080fe:	292b      	cmp	r1, #43	@ 0x2b
 8008100:	d04a      	beq.n	8008198 <_strtod_l+0xb8>
 8008102:	d838      	bhi.n	8008176 <_strtod_l+0x96>
 8008104:	290d      	cmp	r1, #13
 8008106:	d832      	bhi.n	800816e <_strtod_l+0x8e>
 8008108:	2908      	cmp	r1, #8
 800810a:	d832      	bhi.n	8008172 <_strtod_l+0x92>
 800810c:	2900      	cmp	r1, #0
 800810e:	d03b      	beq.n	8008188 <_strtod_l+0xa8>
 8008110:	2200      	movs	r2, #0
 8008112:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008114:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008116:	782a      	ldrb	r2, [r5, #0]
 8008118:	2a30      	cmp	r2, #48	@ 0x30
 800811a:	f040 80b3 	bne.w	8008284 <_strtod_l+0x1a4>
 800811e:	786a      	ldrb	r2, [r5, #1]
 8008120:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008124:	2a58      	cmp	r2, #88	@ 0x58
 8008126:	d16e      	bne.n	8008206 <_strtod_l+0x126>
 8008128:	9302      	str	r3, [sp, #8]
 800812a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	4a8e      	ldr	r2, [pc, #568]	@ (800836c <_strtod_l+0x28c>)
 8008134:	9805      	ldr	r0, [sp, #20]
 8008136:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008138:	a919      	add	r1, sp, #100	@ 0x64
 800813a:	f001 f927 	bl	800938c <__gethex>
 800813e:	f010 060f 	ands.w	r6, r0, #15
 8008142:	4604      	mov	r4, r0
 8008144:	d005      	beq.n	8008152 <_strtod_l+0x72>
 8008146:	2e06      	cmp	r6, #6
 8008148:	d128      	bne.n	800819c <_strtod_l+0xbc>
 800814a:	3501      	adds	r5, #1
 800814c:	2300      	movs	r3, #0
 800814e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008150:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008152:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008154:	2b00      	cmp	r3, #0
 8008156:	f040 858e 	bne.w	8008c76 <_strtod_l+0xb96>
 800815a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800815c:	b1cb      	cbz	r3, 8008192 <_strtod_l+0xb2>
 800815e:	4652      	mov	r2, sl
 8008160:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008164:	ec43 2b10 	vmov	d0, r2, r3
 8008168:	b01f      	add	sp, #124	@ 0x7c
 800816a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816e:	2920      	cmp	r1, #32
 8008170:	d1ce      	bne.n	8008110 <_strtod_l+0x30>
 8008172:	3201      	adds	r2, #1
 8008174:	e7c1      	b.n	80080fa <_strtod_l+0x1a>
 8008176:	292d      	cmp	r1, #45	@ 0x2d
 8008178:	d1ca      	bne.n	8008110 <_strtod_l+0x30>
 800817a:	2101      	movs	r1, #1
 800817c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800817e:	1c51      	adds	r1, r2, #1
 8008180:	9119      	str	r1, [sp, #100]	@ 0x64
 8008182:	7852      	ldrb	r2, [r2, #1]
 8008184:	2a00      	cmp	r2, #0
 8008186:	d1c5      	bne.n	8008114 <_strtod_l+0x34>
 8008188:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800818a:	9419      	str	r4, [sp, #100]	@ 0x64
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8570 	bne.w	8008c72 <_strtod_l+0xb92>
 8008192:	4652      	mov	r2, sl
 8008194:	465b      	mov	r3, fp
 8008196:	e7e5      	b.n	8008164 <_strtod_l+0x84>
 8008198:	2100      	movs	r1, #0
 800819a:	e7ef      	b.n	800817c <_strtod_l+0x9c>
 800819c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800819e:	b13a      	cbz	r2, 80081b0 <_strtod_l+0xd0>
 80081a0:	2135      	movs	r1, #53	@ 0x35
 80081a2:	a81c      	add	r0, sp, #112	@ 0x70
 80081a4:	f7ff ff3a 	bl	800801c <__copybits>
 80081a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80081aa:	9805      	ldr	r0, [sp, #20]
 80081ac:	f7ff fb08 	bl	80077c0 <_Bfree>
 80081b0:	3e01      	subs	r6, #1
 80081b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80081b4:	2e04      	cmp	r6, #4
 80081b6:	d806      	bhi.n	80081c6 <_strtod_l+0xe6>
 80081b8:	e8df f006 	tbb	[pc, r6]
 80081bc:	201d0314 	.word	0x201d0314
 80081c0:	14          	.byte	0x14
 80081c1:	00          	.byte	0x00
 80081c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80081c6:	05e1      	lsls	r1, r4, #23
 80081c8:	bf48      	it	mi
 80081ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80081ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081d2:	0d1b      	lsrs	r3, r3, #20
 80081d4:	051b      	lsls	r3, r3, #20
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1bb      	bne.n	8008152 <_strtod_l+0x72>
 80081da:	f7fe fb31 	bl	8006840 <__errno>
 80081de:	2322      	movs	r3, #34	@ 0x22
 80081e0:	6003      	str	r3, [r0, #0]
 80081e2:	e7b6      	b.n	8008152 <_strtod_l+0x72>
 80081e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80081e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80081ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80081f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081f4:	e7e7      	b.n	80081c6 <_strtod_l+0xe6>
 80081f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008374 <_strtod_l+0x294>
 80081fa:	e7e4      	b.n	80081c6 <_strtod_l+0xe6>
 80081fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008200:	f04f 3aff 	mov.w	sl, #4294967295
 8008204:	e7df      	b.n	80081c6 <_strtod_l+0xe6>
 8008206:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	9219      	str	r2, [sp, #100]	@ 0x64
 800820c:	785b      	ldrb	r3, [r3, #1]
 800820e:	2b30      	cmp	r3, #48	@ 0x30
 8008210:	d0f9      	beq.n	8008206 <_strtod_l+0x126>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d09d      	beq.n	8008152 <_strtod_l+0x72>
 8008216:	2301      	movs	r3, #1
 8008218:	9309      	str	r3, [sp, #36]	@ 0x24
 800821a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800821c:	930c      	str	r3, [sp, #48]	@ 0x30
 800821e:	2300      	movs	r3, #0
 8008220:	9308      	str	r3, [sp, #32]
 8008222:	930a      	str	r3, [sp, #40]	@ 0x28
 8008224:	461f      	mov	r7, r3
 8008226:	220a      	movs	r2, #10
 8008228:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800822a:	7805      	ldrb	r5, [r0, #0]
 800822c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008230:	b2d9      	uxtb	r1, r3
 8008232:	2909      	cmp	r1, #9
 8008234:	d928      	bls.n	8008288 <_strtod_l+0x1a8>
 8008236:	494e      	ldr	r1, [pc, #312]	@ (8008370 <_strtod_l+0x290>)
 8008238:	2201      	movs	r2, #1
 800823a:	f000 ffd5 	bl	80091e8 <strncmp>
 800823e:	2800      	cmp	r0, #0
 8008240:	d032      	beq.n	80082a8 <_strtod_l+0x1c8>
 8008242:	2000      	movs	r0, #0
 8008244:	462a      	mov	r2, r5
 8008246:	4681      	mov	r9, r0
 8008248:	463d      	mov	r5, r7
 800824a:	4603      	mov	r3, r0
 800824c:	2a65      	cmp	r2, #101	@ 0x65
 800824e:	d001      	beq.n	8008254 <_strtod_l+0x174>
 8008250:	2a45      	cmp	r2, #69	@ 0x45
 8008252:	d114      	bne.n	800827e <_strtod_l+0x19e>
 8008254:	b91d      	cbnz	r5, 800825e <_strtod_l+0x17e>
 8008256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008258:	4302      	orrs	r2, r0
 800825a:	d095      	beq.n	8008188 <_strtod_l+0xa8>
 800825c:	2500      	movs	r5, #0
 800825e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008260:	1c62      	adds	r2, r4, #1
 8008262:	9219      	str	r2, [sp, #100]	@ 0x64
 8008264:	7862      	ldrb	r2, [r4, #1]
 8008266:	2a2b      	cmp	r2, #43	@ 0x2b
 8008268:	d077      	beq.n	800835a <_strtod_l+0x27a>
 800826a:	2a2d      	cmp	r2, #45	@ 0x2d
 800826c:	d07b      	beq.n	8008366 <_strtod_l+0x286>
 800826e:	f04f 0c00 	mov.w	ip, #0
 8008272:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008276:	2909      	cmp	r1, #9
 8008278:	f240 8082 	bls.w	8008380 <_strtod_l+0x2a0>
 800827c:	9419      	str	r4, [sp, #100]	@ 0x64
 800827e:	f04f 0800 	mov.w	r8, #0
 8008282:	e0a2      	b.n	80083ca <_strtod_l+0x2ea>
 8008284:	2300      	movs	r3, #0
 8008286:	e7c7      	b.n	8008218 <_strtod_l+0x138>
 8008288:	2f08      	cmp	r7, #8
 800828a:	bfd5      	itete	le
 800828c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800828e:	9908      	ldrgt	r1, [sp, #32]
 8008290:	fb02 3301 	mlale	r3, r2, r1, r3
 8008294:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008298:	f100 0001 	add.w	r0, r0, #1
 800829c:	bfd4      	ite	le
 800829e:	930a      	strle	r3, [sp, #40]	@ 0x28
 80082a0:	9308      	strgt	r3, [sp, #32]
 80082a2:	3701      	adds	r7, #1
 80082a4:	9019      	str	r0, [sp, #100]	@ 0x64
 80082a6:	e7bf      	b.n	8008228 <_strtod_l+0x148>
 80082a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	9219      	str	r2, [sp, #100]	@ 0x64
 80082ae:	785a      	ldrb	r2, [r3, #1]
 80082b0:	b37f      	cbz	r7, 8008312 <_strtod_l+0x232>
 80082b2:	4681      	mov	r9, r0
 80082b4:	463d      	mov	r5, r7
 80082b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80082ba:	2b09      	cmp	r3, #9
 80082bc:	d912      	bls.n	80082e4 <_strtod_l+0x204>
 80082be:	2301      	movs	r3, #1
 80082c0:	e7c4      	b.n	800824c <_strtod_l+0x16c>
 80082c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	9219      	str	r2, [sp, #100]	@ 0x64
 80082c8:	785a      	ldrb	r2, [r3, #1]
 80082ca:	3001      	adds	r0, #1
 80082cc:	2a30      	cmp	r2, #48	@ 0x30
 80082ce:	d0f8      	beq.n	80082c2 <_strtod_l+0x1e2>
 80082d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	f200 84d3 	bhi.w	8008c80 <_strtod_l+0xba0>
 80082da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80082de:	4681      	mov	r9, r0
 80082e0:	2000      	movs	r0, #0
 80082e2:	4605      	mov	r5, r0
 80082e4:	3a30      	subs	r2, #48	@ 0x30
 80082e6:	f100 0301 	add.w	r3, r0, #1
 80082ea:	d02a      	beq.n	8008342 <_strtod_l+0x262>
 80082ec:	4499      	add	r9, r3
 80082ee:	eb00 0c05 	add.w	ip, r0, r5
 80082f2:	462b      	mov	r3, r5
 80082f4:	210a      	movs	r1, #10
 80082f6:	4563      	cmp	r3, ip
 80082f8:	d10d      	bne.n	8008316 <_strtod_l+0x236>
 80082fa:	1c69      	adds	r1, r5, #1
 80082fc:	4401      	add	r1, r0
 80082fe:	4428      	add	r0, r5
 8008300:	2808      	cmp	r0, #8
 8008302:	dc16      	bgt.n	8008332 <_strtod_l+0x252>
 8008304:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008306:	230a      	movs	r3, #10
 8008308:	fb03 2300 	mla	r3, r3, r0, r2
 800830c:	930a      	str	r3, [sp, #40]	@ 0x28
 800830e:	2300      	movs	r3, #0
 8008310:	e018      	b.n	8008344 <_strtod_l+0x264>
 8008312:	4638      	mov	r0, r7
 8008314:	e7da      	b.n	80082cc <_strtod_l+0x1ec>
 8008316:	2b08      	cmp	r3, #8
 8008318:	f103 0301 	add.w	r3, r3, #1
 800831c:	dc03      	bgt.n	8008326 <_strtod_l+0x246>
 800831e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008320:	434e      	muls	r6, r1
 8008322:	960a      	str	r6, [sp, #40]	@ 0x28
 8008324:	e7e7      	b.n	80082f6 <_strtod_l+0x216>
 8008326:	2b10      	cmp	r3, #16
 8008328:	bfde      	ittt	le
 800832a:	9e08      	ldrle	r6, [sp, #32]
 800832c:	434e      	mulle	r6, r1
 800832e:	9608      	strle	r6, [sp, #32]
 8008330:	e7e1      	b.n	80082f6 <_strtod_l+0x216>
 8008332:	280f      	cmp	r0, #15
 8008334:	dceb      	bgt.n	800830e <_strtod_l+0x22e>
 8008336:	9808      	ldr	r0, [sp, #32]
 8008338:	230a      	movs	r3, #10
 800833a:	fb03 2300 	mla	r3, r3, r0, r2
 800833e:	9308      	str	r3, [sp, #32]
 8008340:	e7e5      	b.n	800830e <_strtod_l+0x22e>
 8008342:	4629      	mov	r1, r5
 8008344:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008346:	1c50      	adds	r0, r2, #1
 8008348:	9019      	str	r0, [sp, #100]	@ 0x64
 800834a:	7852      	ldrb	r2, [r2, #1]
 800834c:	4618      	mov	r0, r3
 800834e:	460d      	mov	r5, r1
 8008350:	e7b1      	b.n	80082b6 <_strtod_l+0x1d6>
 8008352:	f04f 0900 	mov.w	r9, #0
 8008356:	2301      	movs	r3, #1
 8008358:	e77d      	b.n	8008256 <_strtod_l+0x176>
 800835a:	f04f 0c00 	mov.w	ip, #0
 800835e:	1ca2      	adds	r2, r4, #2
 8008360:	9219      	str	r2, [sp, #100]	@ 0x64
 8008362:	78a2      	ldrb	r2, [r4, #2]
 8008364:	e785      	b.n	8008272 <_strtod_l+0x192>
 8008366:	f04f 0c01 	mov.w	ip, #1
 800836a:	e7f8      	b.n	800835e <_strtod_l+0x27e>
 800836c:	0800a1e8 	.word	0x0800a1e8
 8008370:	0800a1d0 	.word	0x0800a1d0
 8008374:	7ff00000 	.word	0x7ff00000
 8008378:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800837a:	1c51      	adds	r1, r2, #1
 800837c:	9119      	str	r1, [sp, #100]	@ 0x64
 800837e:	7852      	ldrb	r2, [r2, #1]
 8008380:	2a30      	cmp	r2, #48	@ 0x30
 8008382:	d0f9      	beq.n	8008378 <_strtod_l+0x298>
 8008384:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008388:	2908      	cmp	r1, #8
 800838a:	f63f af78 	bhi.w	800827e <_strtod_l+0x19e>
 800838e:	3a30      	subs	r2, #48	@ 0x30
 8008390:	920e      	str	r2, [sp, #56]	@ 0x38
 8008392:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008394:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008396:	f04f 080a 	mov.w	r8, #10
 800839a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800839c:	1c56      	adds	r6, r2, #1
 800839e:	9619      	str	r6, [sp, #100]	@ 0x64
 80083a0:	7852      	ldrb	r2, [r2, #1]
 80083a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80083a6:	f1be 0f09 	cmp.w	lr, #9
 80083aa:	d939      	bls.n	8008420 <_strtod_l+0x340>
 80083ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80083ae:	1a76      	subs	r6, r6, r1
 80083b0:	2e08      	cmp	r6, #8
 80083b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80083b6:	dc03      	bgt.n	80083c0 <_strtod_l+0x2e0>
 80083b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80083ba:	4588      	cmp	r8, r1
 80083bc:	bfa8      	it	ge
 80083be:	4688      	movge	r8, r1
 80083c0:	f1bc 0f00 	cmp.w	ip, #0
 80083c4:	d001      	beq.n	80083ca <_strtod_l+0x2ea>
 80083c6:	f1c8 0800 	rsb	r8, r8, #0
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	d14e      	bne.n	800846c <_strtod_l+0x38c>
 80083ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083d0:	4308      	orrs	r0, r1
 80083d2:	f47f aebe 	bne.w	8008152 <_strtod_l+0x72>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f47f aed6 	bne.w	8008188 <_strtod_l+0xa8>
 80083dc:	2a69      	cmp	r2, #105	@ 0x69
 80083de:	d028      	beq.n	8008432 <_strtod_l+0x352>
 80083e0:	dc25      	bgt.n	800842e <_strtod_l+0x34e>
 80083e2:	2a49      	cmp	r2, #73	@ 0x49
 80083e4:	d025      	beq.n	8008432 <_strtod_l+0x352>
 80083e6:	2a4e      	cmp	r2, #78	@ 0x4e
 80083e8:	f47f aece 	bne.w	8008188 <_strtod_l+0xa8>
 80083ec:	499b      	ldr	r1, [pc, #620]	@ (800865c <_strtod_l+0x57c>)
 80083ee:	a819      	add	r0, sp, #100	@ 0x64
 80083f0:	f001 f9ee 	bl	80097d0 <__match>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	f43f aec7 	beq.w	8008188 <_strtod_l+0xa8>
 80083fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b28      	cmp	r3, #40	@ 0x28
 8008400:	d12e      	bne.n	8008460 <_strtod_l+0x380>
 8008402:	4997      	ldr	r1, [pc, #604]	@ (8008660 <_strtod_l+0x580>)
 8008404:	aa1c      	add	r2, sp, #112	@ 0x70
 8008406:	a819      	add	r0, sp, #100	@ 0x64
 8008408:	f001 f9f6 	bl	80097f8 <__hexnan>
 800840c:	2805      	cmp	r0, #5
 800840e:	d127      	bne.n	8008460 <_strtod_l+0x380>
 8008410:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008412:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008416:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800841a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800841e:	e698      	b.n	8008152 <_strtod_l+0x72>
 8008420:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008422:	fb08 2101 	mla	r1, r8, r1, r2
 8008426:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800842a:	920e      	str	r2, [sp, #56]	@ 0x38
 800842c:	e7b5      	b.n	800839a <_strtod_l+0x2ba>
 800842e:	2a6e      	cmp	r2, #110	@ 0x6e
 8008430:	e7da      	b.n	80083e8 <_strtod_l+0x308>
 8008432:	498c      	ldr	r1, [pc, #560]	@ (8008664 <_strtod_l+0x584>)
 8008434:	a819      	add	r0, sp, #100	@ 0x64
 8008436:	f001 f9cb 	bl	80097d0 <__match>
 800843a:	2800      	cmp	r0, #0
 800843c:	f43f aea4 	beq.w	8008188 <_strtod_l+0xa8>
 8008440:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008442:	4989      	ldr	r1, [pc, #548]	@ (8008668 <_strtod_l+0x588>)
 8008444:	3b01      	subs	r3, #1
 8008446:	a819      	add	r0, sp, #100	@ 0x64
 8008448:	9319      	str	r3, [sp, #100]	@ 0x64
 800844a:	f001 f9c1 	bl	80097d0 <__match>
 800844e:	b910      	cbnz	r0, 8008456 <_strtod_l+0x376>
 8008450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008452:	3301      	adds	r3, #1
 8008454:	9319      	str	r3, [sp, #100]	@ 0x64
 8008456:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008678 <_strtod_l+0x598>
 800845a:	f04f 0a00 	mov.w	sl, #0
 800845e:	e678      	b.n	8008152 <_strtod_l+0x72>
 8008460:	4882      	ldr	r0, [pc, #520]	@ (800866c <_strtod_l+0x58c>)
 8008462:	f000 fef1 	bl	8009248 <nan>
 8008466:	ec5b ab10 	vmov	sl, fp, d0
 800846a:	e672      	b.n	8008152 <_strtod_l+0x72>
 800846c:	eba8 0309 	sub.w	r3, r8, r9
 8008470:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008472:	9309      	str	r3, [sp, #36]	@ 0x24
 8008474:	2f00      	cmp	r7, #0
 8008476:	bf08      	it	eq
 8008478:	462f      	moveq	r7, r5
 800847a:	2d10      	cmp	r5, #16
 800847c:	462c      	mov	r4, r5
 800847e:	bfa8      	it	ge
 8008480:	2410      	movge	r4, #16
 8008482:	f7f8 f847 	bl	8000514 <__aeabi_ui2d>
 8008486:	2d09      	cmp	r5, #9
 8008488:	4682      	mov	sl, r0
 800848a:	468b      	mov	fp, r1
 800848c:	dc13      	bgt.n	80084b6 <_strtod_l+0x3d6>
 800848e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	f43f ae5e 	beq.w	8008152 <_strtod_l+0x72>
 8008496:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008498:	dd78      	ble.n	800858c <_strtod_l+0x4ac>
 800849a:	2b16      	cmp	r3, #22
 800849c:	dc5f      	bgt.n	800855e <_strtod_l+0x47e>
 800849e:	4974      	ldr	r1, [pc, #464]	@ (8008670 <_strtod_l+0x590>)
 80084a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084a8:	4652      	mov	r2, sl
 80084aa:	465b      	mov	r3, fp
 80084ac:	f7f8 f8ac 	bl	8000608 <__aeabi_dmul>
 80084b0:	4682      	mov	sl, r0
 80084b2:	468b      	mov	fp, r1
 80084b4:	e64d      	b.n	8008152 <_strtod_l+0x72>
 80084b6:	4b6e      	ldr	r3, [pc, #440]	@ (8008670 <_strtod_l+0x590>)
 80084b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80084bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	4682      	mov	sl, r0
 80084c6:	9808      	ldr	r0, [sp, #32]
 80084c8:	468b      	mov	fp, r1
 80084ca:	f7f8 f823 	bl	8000514 <__aeabi_ui2d>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4650      	mov	r0, sl
 80084d4:	4659      	mov	r1, fp
 80084d6:	f7f7 fee1 	bl	800029c <__adddf3>
 80084da:	2d0f      	cmp	r5, #15
 80084dc:	4682      	mov	sl, r0
 80084de:	468b      	mov	fp, r1
 80084e0:	ddd5      	ble.n	800848e <_strtod_l+0x3ae>
 80084e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e4:	1b2c      	subs	r4, r5, r4
 80084e6:	441c      	add	r4, r3
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	f340 8096 	ble.w	800861a <_strtod_l+0x53a>
 80084ee:	f014 030f 	ands.w	r3, r4, #15
 80084f2:	d00a      	beq.n	800850a <_strtod_l+0x42a>
 80084f4:	495e      	ldr	r1, [pc, #376]	@ (8008670 <_strtod_l+0x590>)
 80084f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084fa:	4652      	mov	r2, sl
 80084fc:	465b      	mov	r3, fp
 80084fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008502:	f7f8 f881 	bl	8000608 <__aeabi_dmul>
 8008506:	4682      	mov	sl, r0
 8008508:	468b      	mov	fp, r1
 800850a:	f034 040f 	bics.w	r4, r4, #15
 800850e:	d073      	beq.n	80085f8 <_strtod_l+0x518>
 8008510:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008514:	dd48      	ble.n	80085a8 <_strtod_l+0x4c8>
 8008516:	2400      	movs	r4, #0
 8008518:	46a0      	mov	r8, r4
 800851a:	940a      	str	r4, [sp, #40]	@ 0x28
 800851c:	46a1      	mov	r9, r4
 800851e:	9a05      	ldr	r2, [sp, #20]
 8008520:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008678 <_strtod_l+0x598>
 8008524:	2322      	movs	r3, #34	@ 0x22
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	f04f 0a00 	mov.w	sl, #0
 800852c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800852e:	2b00      	cmp	r3, #0
 8008530:	f43f ae0f 	beq.w	8008152 <_strtod_l+0x72>
 8008534:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008536:	9805      	ldr	r0, [sp, #20]
 8008538:	f7ff f942 	bl	80077c0 <_Bfree>
 800853c:	9805      	ldr	r0, [sp, #20]
 800853e:	4649      	mov	r1, r9
 8008540:	f7ff f93e 	bl	80077c0 <_Bfree>
 8008544:	9805      	ldr	r0, [sp, #20]
 8008546:	4641      	mov	r1, r8
 8008548:	f7ff f93a 	bl	80077c0 <_Bfree>
 800854c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800854e:	9805      	ldr	r0, [sp, #20]
 8008550:	f7ff f936 	bl	80077c0 <_Bfree>
 8008554:	9805      	ldr	r0, [sp, #20]
 8008556:	4621      	mov	r1, r4
 8008558:	f7ff f932 	bl	80077c0 <_Bfree>
 800855c:	e5f9      	b.n	8008152 <_strtod_l+0x72>
 800855e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008560:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008564:	4293      	cmp	r3, r2
 8008566:	dbbc      	blt.n	80084e2 <_strtod_l+0x402>
 8008568:	4c41      	ldr	r4, [pc, #260]	@ (8008670 <_strtod_l+0x590>)
 800856a:	f1c5 050f 	rsb	r5, r5, #15
 800856e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008572:	4652      	mov	r2, sl
 8008574:	465b      	mov	r3, fp
 8008576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800857a:	f7f8 f845 	bl	8000608 <__aeabi_dmul>
 800857e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008580:	1b5d      	subs	r5, r3, r5
 8008582:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008586:	e9d4 2300 	ldrd	r2, r3, [r4]
 800858a:	e78f      	b.n	80084ac <_strtod_l+0x3cc>
 800858c:	3316      	adds	r3, #22
 800858e:	dba8      	blt.n	80084e2 <_strtod_l+0x402>
 8008590:	4b37      	ldr	r3, [pc, #220]	@ (8008670 <_strtod_l+0x590>)
 8008592:	eba9 0808 	sub.w	r8, r9, r8
 8008596:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800859a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800859e:	4650      	mov	r0, sl
 80085a0:	4659      	mov	r1, fp
 80085a2:	f7f8 f95b 	bl	800085c <__aeabi_ddiv>
 80085a6:	e783      	b.n	80084b0 <_strtod_l+0x3d0>
 80085a8:	4b32      	ldr	r3, [pc, #200]	@ (8008674 <_strtod_l+0x594>)
 80085aa:	9308      	str	r3, [sp, #32]
 80085ac:	2300      	movs	r3, #0
 80085ae:	1124      	asrs	r4, r4, #4
 80085b0:	4650      	mov	r0, sl
 80085b2:	4659      	mov	r1, fp
 80085b4:	461e      	mov	r6, r3
 80085b6:	2c01      	cmp	r4, #1
 80085b8:	dc21      	bgt.n	80085fe <_strtod_l+0x51e>
 80085ba:	b10b      	cbz	r3, 80085c0 <_strtod_l+0x4e0>
 80085bc:	4682      	mov	sl, r0
 80085be:	468b      	mov	fp, r1
 80085c0:	492c      	ldr	r1, [pc, #176]	@ (8008674 <_strtod_l+0x594>)
 80085c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80085c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80085ca:	4652      	mov	r2, sl
 80085cc:	465b      	mov	r3, fp
 80085ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085d2:	f7f8 f819 	bl	8000608 <__aeabi_dmul>
 80085d6:	4b28      	ldr	r3, [pc, #160]	@ (8008678 <_strtod_l+0x598>)
 80085d8:	460a      	mov	r2, r1
 80085da:	400b      	ands	r3, r1
 80085dc:	4927      	ldr	r1, [pc, #156]	@ (800867c <_strtod_l+0x59c>)
 80085de:	428b      	cmp	r3, r1
 80085e0:	4682      	mov	sl, r0
 80085e2:	d898      	bhi.n	8008516 <_strtod_l+0x436>
 80085e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80085e8:	428b      	cmp	r3, r1
 80085ea:	bf86      	itte	hi
 80085ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008680 <_strtod_l+0x5a0>
 80085f0:	f04f 3aff 	movhi.w	sl, #4294967295
 80085f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80085f8:	2300      	movs	r3, #0
 80085fa:	9308      	str	r3, [sp, #32]
 80085fc:	e07a      	b.n	80086f4 <_strtod_l+0x614>
 80085fe:	07e2      	lsls	r2, r4, #31
 8008600:	d505      	bpl.n	800860e <_strtod_l+0x52e>
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008608:	f7f7 fffe 	bl	8000608 <__aeabi_dmul>
 800860c:	2301      	movs	r3, #1
 800860e:	9a08      	ldr	r2, [sp, #32]
 8008610:	3208      	adds	r2, #8
 8008612:	3601      	adds	r6, #1
 8008614:	1064      	asrs	r4, r4, #1
 8008616:	9208      	str	r2, [sp, #32]
 8008618:	e7cd      	b.n	80085b6 <_strtod_l+0x4d6>
 800861a:	d0ed      	beq.n	80085f8 <_strtod_l+0x518>
 800861c:	4264      	negs	r4, r4
 800861e:	f014 020f 	ands.w	r2, r4, #15
 8008622:	d00a      	beq.n	800863a <_strtod_l+0x55a>
 8008624:	4b12      	ldr	r3, [pc, #72]	@ (8008670 <_strtod_l+0x590>)
 8008626:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800862a:	4650      	mov	r0, sl
 800862c:	4659      	mov	r1, fp
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	f7f8 f913 	bl	800085c <__aeabi_ddiv>
 8008636:	4682      	mov	sl, r0
 8008638:	468b      	mov	fp, r1
 800863a:	1124      	asrs	r4, r4, #4
 800863c:	d0dc      	beq.n	80085f8 <_strtod_l+0x518>
 800863e:	2c1f      	cmp	r4, #31
 8008640:	dd20      	ble.n	8008684 <_strtod_l+0x5a4>
 8008642:	2400      	movs	r4, #0
 8008644:	46a0      	mov	r8, r4
 8008646:	940a      	str	r4, [sp, #40]	@ 0x28
 8008648:	46a1      	mov	r9, r4
 800864a:	9a05      	ldr	r2, [sp, #20]
 800864c:	2322      	movs	r3, #34	@ 0x22
 800864e:	f04f 0a00 	mov.w	sl, #0
 8008652:	f04f 0b00 	mov.w	fp, #0
 8008656:	6013      	str	r3, [r2, #0]
 8008658:	e768      	b.n	800852c <_strtod_l+0x44c>
 800865a:	bf00      	nop
 800865c:	08009fc1 	.word	0x08009fc1
 8008660:	0800a1d4 	.word	0x0800a1d4
 8008664:	08009fb9 	.word	0x08009fb9
 8008668:	08009ff0 	.word	0x08009ff0
 800866c:	0800a37d 	.word	0x0800a37d
 8008670:	0800a108 	.word	0x0800a108
 8008674:	0800a0e0 	.word	0x0800a0e0
 8008678:	7ff00000 	.word	0x7ff00000
 800867c:	7ca00000 	.word	0x7ca00000
 8008680:	7fefffff 	.word	0x7fefffff
 8008684:	f014 0310 	ands.w	r3, r4, #16
 8008688:	bf18      	it	ne
 800868a:	236a      	movne	r3, #106	@ 0x6a
 800868c:	4ea9      	ldr	r6, [pc, #676]	@ (8008934 <_strtod_l+0x854>)
 800868e:	9308      	str	r3, [sp, #32]
 8008690:	4650      	mov	r0, sl
 8008692:	4659      	mov	r1, fp
 8008694:	2300      	movs	r3, #0
 8008696:	07e2      	lsls	r2, r4, #31
 8008698:	d504      	bpl.n	80086a4 <_strtod_l+0x5c4>
 800869a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800869e:	f7f7 ffb3 	bl	8000608 <__aeabi_dmul>
 80086a2:	2301      	movs	r3, #1
 80086a4:	1064      	asrs	r4, r4, #1
 80086a6:	f106 0608 	add.w	r6, r6, #8
 80086aa:	d1f4      	bne.n	8008696 <_strtod_l+0x5b6>
 80086ac:	b10b      	cbz	r3, 80086b2 <_strtod_l+0x5d2>
 80086ae:	4682      	mov	sl, r0
 80086b0:	468b      	mov	fp, r1
 80086b2:	9b08      	ldr	r3, [sp, #32]
 80086b4:	b1b3      	cbz	r3, 80086e4 <_strtod_l+0x604>
 80086b6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80086ba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80086be:	2b00      	cmp	r3, #0
 80086c0:	4659      	mov	r1, fp
 80086c2:	dd0f      	ble.n	80086e4 <_strtod_l+0x604>
 80086c4:	2b1f      	cmp	r3, #31
 80086c6:	dd55      	ble.n	8008774 <_strtod_l+0x694>
 80086c8:	2b34      	cmp	r3, #52	@ 0x34
 80086ca:	bfde      	ittt	le
 80086cc:	f04f 33ff 	movle.w	r3, #4294967295
 80086d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80086d4:	4093      	lslle	r3, r2
 80086d6:	f04f 0a00 	mov.w	sl, #0
 80086da:	bfcc      	ite	gt
 80086dc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80086e0:	ea03 0b01 	andle.w	fp, r3, r1
 80086e4:	2200      	movs	r2, #0
 80086e6:	2300      	movs	r3, #0
 80086e8:	4650      	mov	r0, sl
 80086ea:	4659      	mov	r1, fp
 80086ec:	f7f8 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d1a6      	bne.n	8008642 <_strtod_l+0x562>
 80086f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f6:	9300      	str	r3, [sp, #0]
 80086f8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80086fa:	9805      	ldr	r0, [sp, #20]
 80086fc:	462b      	mov	r3, r5
 80086fe:	463a      	mov	r2, r7
 8008700:	f7ff f8c6 	bl	8007890 <__s2b>
 8008704:	900a      	str	r0, [sp, #40]	@ 0x28
 8008706:	2800      	cmp	r0, #0
 8008708:	f43f af05 	beq.w	8008516 <_strtod_l+0x436>
 800870c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800870e:	2a00      	cmp	r2, #0
 8008710:	eba9 0308 	sub.w	r3, r9, r8
 8008714:	bfa8      	it	ge
 8008716:	2300      	movge	r3, #0
 8008718:	9312      	str	r3, [sp, #72]	@ 0x48
 800871a:	2400      	movs	r4, #0
 800871c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008720:	9316      	str	r3, [sp, #88]	@ 0x58
 8008722:	46a0      	mov	r8, r4
 8008724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008726:	9805      	ldr	r0, [sp, #20]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	f7ff f809 	bl	8007740 <_Balloc>
 800872e:	4681      	mov	r9, r0
 8008730:	2800      	cmp	r0, #0
 8008732:	f43f aef4 	beq.w	800851e <_strtod_l+0x43e>
 8008736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008738:	691a      	ldr	r2, [r3, #16]
 800873a:	3202      	adds	r2, #2
 800873c:	f103 010c 	add.w	r1, r3, #12
 8008740:	0092      	lsls	r2, r2, #2
 8008742:	300c      	adds	r0, #12
 8008744:	f000 fd72 	bl	800922c <memcpy>
 8008748:	ec4b ab10 	vmov	d0, sl, fp
 800874c:	9805      	ldr	r0, [sp, #20]
 800874e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008750:	a91b      	add	r1, sp, #108	@ 0x6c
 8008752:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008756:	f7ff fbd7 	bl	8007f08 <__d2b>
 800875a:	901a      	str	r0, [sp, #104]	@ 0x68
 800875c:	2800      	cmp	r0, #0
 800875e:	f43f aede 	beq.w	800851e <_strtod_l+0x43e>
 8008762:	9805      	ldr	r0, [sp, #20]
 8008764:	2101      	movs	r1, #1
 8008766:	f7ff f929 	bl	80079bc <__i2b>
 800876a:	4680      	mov	r8, r0
 800876c:	b948      	cbnz	r0, 8008782 <_strtod_l+0x6a2>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	e6d4      	b.n	800851e <_strtod_l+0x43e>
 8008774:	f04f 32ff 	mov.w	r2, #4294967295
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	ea03 0a0a 	and.w	sl, r3, sl
 8008780:	e7b0      	b.n	80086e4 <_strtod_l+0x604>
 8008782:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008784:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008786:	2d00      	cmp	r5, #0
 8008788:	bfab      	itete	ge
 800878a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800878c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800878e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008790:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008792:	bfac      	ite	ge
 8008794:	18ef      	addge	r7, r5, r3
 8008796:	1b5e      	sublt	r6, r3, r5
 8008798:	9b08      	ldr	r3, [sp, #32]
 800879a:	1aed      	subs	r5, r5, r3
 800879c:	4415      	add	r5, r2
 800879e:	4b66      	ldr	r3, [pc, #408]	@ (8008938 <_strtod_l+0x858>)
 80087a0:	3d01      	subs	r5, #1
 80087a2:	429d      	cmp	r5, r3
 80087a4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80087a8:	da50      	bge.n	800884c <_strtod_l+0x76c>
 80087aa:	1b5b      	subs	r3, r3, r5
 80087ac:	2b1f      	cmp	r3, #31
 80087ae:	eba2 0203 	sub.w	r2, r2, r3
 80087b2:	f04f 0101 	mov.w	r1, #1
 80087b6:	dc3d      	bgt.n	8008834 <_strtod_l+0x754>
 80087b8:	fa01 f303 	lsl.w	r3, r1, r3
 80087bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087be:	2300      	movs	r3, #0
 80087c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80087c2:	18bd      	adds	r5, r7, r2
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	42af      	cmp	r7, r5
 80087c8:	4416      	add	r6, r2
 80087ca:	441e      	add	r6, r3
 80087cc:	463b      	mov	r3, r7
 80087ce:	bfa8      	it	ge
 80087d0:	462b      	movge	r3, r5
 80087d2:	42b3      	cmp	r3, r6
 80087d4:	bfa8      	it	ge
 80087d6:	4633      	movge	r3, r6
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bfc2      	ittt	gt
 80087dc:	1aed      	subgt	r5, r5, r3
 80087de:	1af6      	subgt	r6, r6, r3
 80087e0:	1aff      	subgt	r7, r7, r3
 80087e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dd16      	ble.n	8008816 <_strtod_l+0x736>
 80087e8:	4641      	mov	r1, r8
 80087ea:	9805      	ldr	r0, [sp, #20]
 80087ec:	461a      	mov	r2, r3
 80087ee:	f7ff f9a5 	bl	8007b3c <__pow5mult>
 80087f2:	4680      	mov	r8, r0
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d0ba      	beq.n	800876e <_strtod_l+0x68e>
 80087f8:	4601      	mov	r1, r0
 80087fa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087fc:	9805      	ldr	r0, [sp, #20]
 80087fe:	f7ff f8f3 	bl	80079e8 <__multiply>
 8008802:	900e      	str	r0, [sp, #56]	@ 0x38
 8008804:	2800      	cmp	r0, #0
 8008806:	f43f ae8a 	beq.w	800851e <_strtod_l+0x43e>
 800880a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	f7fe ffd7 	bl	80077c0 <_Bfree>
 8008812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008814:	931a      	str	r3, [sp, #104]	@ 0x68
 8008816:	2d00      	cmp	r5, #0
 8008818:	dc1d      	bgt.n	8008856 <_strtod_l+0x776>
 800881a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	dd23      	ble.n	8008868 <_strtod_l+0x788>
 8008820:	4649      	mov	r1, r9
 8008822:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008824:	9805      	ldr	r0, [sp, #20]
 8008826:	f7ff f989 	bl	8007b3c <__pow5mult>
 800882a:	4681      	mov	r9, r0
 800882c:	b9e0      	cbnz	r0, 8008868 <_strtod_l+0x788>
 800882e:	f04f 0900 	mov.w	r9, #0
 8008832:	e674      	b.n	800851e <_strtod_l+0x43e>
 8008834:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008838:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800883c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008840:	35e2      	adds	r5, #226	@ 0xe2
 8008842:	fa01 f305 	lsl.w	r3, r1, r5
 8008846:	9310      	str	r3, [sp, #64]	@ 0x40
 8008848:	9113      	str	r1, [sp, #76]	@ 0x4c
 800884a:	e7ba      	b.n	80087c2 <_strtod_l+0x6e2>
 800884c:	2300      	movs	r3, #0
 800884e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008850:	2301      	movs	r3, #1
 8008852:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008854:	e7b5      	b.n	80087c2 <_strtod_l+0x6e2>
 8008856:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008858:	9805      	ldr	r0, [sp, #20]
 800885a:	462a      	mov	r2, r5
 800885c:	f7ff f9c8 	bl	8007bf0 <__lshift>
 8008860:	901a      	str	r0, [sp, #104]	@ 0x68
 8008862:	2800      	cmp	r0, #0
 8008864:	d1d9      	bne.n	800881a <_strtod_l+0x73a>
 8008866:	e65a      	b.n	800851e <_strtod_l+0x43e>
 8008868:	2e00      	cmp	r6, #0
 800886a:	dd07      	ble.n	800887c <_strtod_l+0x79c>
 800886c:	4649      	mov	r1, r9
 800886e:	9805      	ldr	r0, [sp, #20]
 8008870:	4632      	mov	r2, r6
 8008872:	f7ff f9bd 	bl	8007bf0 <__lshift>
 8008876:	4681      	mov	r9, r0
 8008878:	2800      	cmp	r0, #0
 800887a:	d0d8      	beq.n	800882e <_strtod_l+0x74e>
 800887c:	2f00      	cmp	r7, #0
 800887e:	dd08      	ble.n	8008892 <_strtod_l+0x7b2>
 8008880:	4641      	mov	r1, r8
 8008882:	9805      	ldr	r0, [sp, #20]
 8008884:	463a      	mov	r2, r7
 8008886:	f7ff f9b3 	bl	8007bf0 <__lshift>
 800888a:	4680      	mov	r8, r0
 800888c:	2800      	cmp	r0, #0
 800888e:	f43f ae46 	beq.w	800851e <_strtod_l+0x43e>
 8008892:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008894:	9805      	ldr	r0, [sp, #20]
 8008896:	464a      	mov	r2, r9
 8008898:	f7ff fa32 	bl	8007d00 <__mdiff>
 800889c:	4604      	mov	r4, r0
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f ae3d 	beq.w	800851e <_strtod_l+0x43e>
 80088a4:	68c3      	ldr	r3, [r0, #12]
 80088a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088a8:	2300      	movs	r3, #0
 80088aa:	60c3      	str	r3, [r0, #12]
 80088ac:	4641      	mov	r1, r8
 80088ae:	f7ff fa0b 	bl	8007cc8 <__mcmp>
 80088b2:	2800      	cmp	r0, #0
 80088b4:	da46      	bge.n	8008944 <_strtod_l+0x864>
 80088b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b8:	ea53 030a 	orrs.w	r3, r3, sl
 80088bc:	d16c      	bne.n	8008998 <_strtod_l+0x8b8>
 80088be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d168      	bne.n	8008998 <_strtod_l+0x8b8>
 80088c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088ca:	0d1b      	lsrs	r3, r3, #20
 80088cc:	051b      	lsls	r3, r3, #20
 80088ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80088d2:	d961      	bls.n	8008998 <_strtod_l+0x8b8>
 80088d4:	6963      	ldr	r3, [r4, #20]
 80088d6:	b913      	cbnz	r3, 80088de <_strtod_l+0x7fe>
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	dd5c      	ble.n	8008998 <_strtod_l+0x8b8>
 80088de:	4621      	mov	r1, r4
 80088e0:	2201      	movs	r2, #1
 80088e2:	9805      	ldr	r0, [sp, #20]
 80088e4:	f7ff f984 	bl	8007bf0 <__lshift>
 80088e8:	4641      	mov	r1, r8
 80088ea:	4604      	mov	r4, r0
 80088ec:	f7ff f9ec 	bl	8007cc8 <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dd51      	ble.n	8008998 <_strtod_l+0x8b8>
 80088f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088f8:	9a08      	ldr	r2, [sp, #32]
 80088fa:	0d1b      	lsrs	r3, r3, #20
 80088fc:	051b      	lsls	r3, r3, #20
 80088fe:	2a00      	cmp	r2, #0
 8008900:	d06b      	beq.n	80089da <_strtod_l+0x8fa>
 8008902:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008906:	d868      	bhi.n	80089da <_strtod_l+0x8fa>
 8008908:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800890c:	f67f ae9d 	bls.w	800864a <_strtod_l+0x56a>
 8008910:	4b0a      	ldr	r3, [pc, #40]	@ (800893c <_strtod_l+0x85c>)
 8008912:	4650      	mov	r0, sl
 8008914:	4659      	mov	r1, fp
 8008916:	2200      	movs	r2, #0
 8008918:	f7f7 fe76 	bl	8000608 <__aeabi_dmul>
 800891c:	4b08      	ldr	r3, [pc, #32]	@ (8008940 <_strtod_l+0x860>)
 800891e:	400b      	ands	r3, r1
 8008920:	4682      	mov	sl, r0
 8008922:	468b      	mov	fp, r1
 8008924:	2b00      	cmp	r3, #0
 8008926:	f47f ae05 	bne.w	8008534 <_strtod_l+0x454>
 800892a:	9a05      	ldr	r2, [sp, #20]
 800892c:	2322      	movs	r3, #34	@ 0x22
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	e600      	b.n	8008534 <_strtod_l+0x454>
 8008932:	bf00      	nop
 8008934:	0800a200 	.word	0x0800a200
 8008938:	fffffc02 	.word	0xfffffc02
 800893c:	39500000 	.word	0x39500000
 8008940:	7ff00000 	.word	0x7ff00000
 8008944:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008948:	d165      	bne.n	8008a16 <_strtod_l+0x936>
 800894a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800894c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008950:	b35a      	cbz	r2, 80089aa <_strtod_l+0x8ca>
 8008952:	4a9f      	ldr	r2, [pc, #636]	@ (8008bd0 <_strtod_l+0xaf0>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d12b      	bne.n	80089b0 <_strtod_l+0x8d0>
 8008958:	9b08      	ldr	r3, [sp, #32]
 800895a:	4651      	mov	r1, sl
 800895c:	b303      	cbz	r3, 80089a0 <_strtod_l+0x8c0>
 800895e:	4b9d      	ldr	r3, [pc, #628]	@ (8008bd4 <_strtod_l+0xaf4>)
 8008960:	465a      	mov	r2, fp
 8008962:	4013      	ands	r3, r2
 8008964:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008968:	f04f 32ff 	mov.w	r2, #4294967295
 800896c:	d81b      	bhi.n	80089a6 <_strtod_l+0x8c6>
 800896e:	0d1b      	lsrs	r3, r3, #20
 8008970:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008974:	fa02 f303 	lsl.w	r3, r2, r3
 8008978:	4299      	cmp	r1, r3
 800897a:	d119      	bne.n	80089b0 <_strtod_l+0x8d0>
 800897c:	4b96      	ldr	r3, [pc, #600]	@ (8008bd8 <_strtod_l+0xaf8>)
 800897e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008980:	429a      	cmp	r2, r3
 8008982:	d102      	bne.n	800898a <_strtod_l+0x8aa>
 8008984:	3101      	adds	r1, #1
 8008986:	f43f adca 	beq.w	800851e <_strtod_l+0x43e>
 800898a:	4b92      	ldr	r3, [pc, #584]	@ (8008bd4 <_strtod_l+0xaf4>)
 800898c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800898e:	401a      	ands	r2, r3
 8008990:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008994:	f04f 0a00 	mov.w	sl, #0
 8008998:	9b08      	ldr	r3, [sp, #32]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1b8      	bne.n	8008910 <_strtod_l+0x830>
 800899e:	e5c9      	b.n	8008534 <_strtod_l+0x454>
 80089a0:	f04f 33ff 	mov.w	r3, #4294967295
 80089a4:	e7e8      	b.n	8008978 <_strtod_l+0x898>
 80089a6:	4613      	mov	r3, r2
 80089a8:	e7e6      	b.n	8008978 <_strtod_l+0x898>
 80089aa:	ea53 030a 	orrs.w	r3, r3, sl
 80089ae:	d0a1      	beq.n	80088f4 <_strtod_l+0x814>
 80089b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80089b2:	b1db      	cbz	r3, 80089ec <_strtod_l+0x90c>
 80089b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089b6:	4213      	tst	r3, r2
 80089b8:	d0ee      	beq.n	8008998 <_strtod_l+0x8b8>
 80089ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089bc:	9a08      	ldr	r2, [sp, #32]
 80089be:	4650      	mov	r0, sl
 80089c0:	4659      	mov	r1, fp
 80089c2:	b1bb      	cbz	r3, 80089f4 <_strtod_l+0x914>
 80089c4:	f7ff fb6e 	bl	80080a4 <sulp>
 80089c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089cc:	ec53 2b10 	vmov	r2, r3, d0
 80089d0:	f7f7 fc64 	bl	800029c <__adddf3>
 80089d4:	4682      	mov	sl, r0
 80089d6:	468b      	mov	fp, r1
 80089d8:	e7de      	b.n	8008998 <_strtod_l+0x8b8>
 80089da:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80089de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80089e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80089e6:	f04f 3aff 	mov.w	sl, #4294967295
 80089ea:	e7d5      	b.n	8008998 <_strtod_l+0x8b8>
 80089ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ee:	ea13 0f0a 	tst.w	r3, sl
 80089f2:	e7e1      	b.n	80089b8 <_strtod_l+0x8d8>
 80089f4:	f7ff fb56 	bl	80080a4 <sulp>
 80089f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089fc:	ec53 2b10 	vmov	r2, r3, d0
 8008a00:	f7f7 fc4a 	bl	8000298 <__aeabi_dsub>
 8008a04:	2200      	movs	r2, #0
 8008a06:	2300      	movs	r3, #0
 8008a08:	4682      	mov	sl, r0
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	f7f8 f864 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d0c1      	beq.n	8008998 <_strtod_l+0x8b8>
 8008a14:	e619      	b.n	800864a <_strtod_l+0x56a>
 8008a16:	4641      	mov	r1, r8
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f7ff facd 	bl	8007fb8 <__ratio>
 8008a1e:	ec57 6b10 	vmov	r6, r7, d0
 8008a22:	2200      	movs	r2, #0
 8008a24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7f8 f868 	bl	8000b00 <__aeabi_dcmple>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d06f      	beq.n	8008b14 <_strtod_l+0xa34>
 8008a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d17a      	bne.n	8008b30 <_strtod_l+0xa50>
 8008a3a:	f1ba 0f00 	cmp.w	sl, #0
 8008a3e:	d158      	bne.n	8008af2 <_strtod_l+0xa12>
 8008a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d15a      	bne.n	8008b00 <_strtod_l+0xa20>
 8008a4a:	4b64      	ldr	r3, [pc, #400]	@ (8008bdc <_strtod_l+0xafc>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	4630      	mov	r0, r6
 8008a50:	4639      	mov	r1, r7
 8008a52:	f7f8 f84b 	bl	8000aec <__aeabi_dcmplt>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d159      	bne.n	8008b0e <_strtod_l+0xa2e>
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4b60      	ldr	r3, [pc, #384]	@ (8008be0 <_strtod_l+0xb00>)
 8008a60:	2200      	movs	r2, #0
 8008a62:	f7f7 fdd1 	bl	8000608 <__aeabi_dmul>
 8008a66:	4606      	mov	r6, r0
 8008a68:	460f      	mov	r7, r1
 8008a6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008a6e:	9606      	str	r6, [sp, #24]
 8008a70:	9307      	str	r3, [sp, #28]
 8008a72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a76:	4d57      	ldr	r5, [pc, #348]	@ (8008bd4 <_strtod_l+0xaf4>)
 8008a78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7e:	401d      	ands	r5, r3
 8008a80:	4b58      	ldr	r3, [pc, #352]	@ (8008be4 <_strtod_l+0xb04>)
 8008a82:	429d      	cmp	r5, r3
 8008a84:	f040 80b2 	bne.w	8008bec <_strtod_l+0xb0c>
 8008a88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008a8e:	ec4b ab10 	vmov	d0, sl, fp
 8008a92:	f7ff f9c9 	bl	8007e28 <__ulp>
 8008a96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a9a:	ec51 0b10 	vmov	r0, r1, d0
 8008a9e:	f7f7 fdb3 	bl	8000608 <__aeabi_dmul>
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	f7f7 fbf9 	bl	800029c <__adddf3>
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4949      	ldr	r1, [pc, #292]	@ (8008bd4 <_strtod_l+0xaf4>)
 8008aae:	4a4e      	ldr	r2, [pc, #312]	@ (8008be8 <_strtod_l+0xb08>)
 8008ab0:	4019      	ands	r1, r3
 8008ab2:	4291      	cmp	r1, r2
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	d942      	bls.n	8008b3e <_strtod_l+0xa5e>
 8008ab8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008aba:	4b47      	ldr	r3, [pc, #284]	@ (8008bd8 <_strtod_l+0xaf8>)
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d103      	bne.n	8008ac8 <_strtod_l+0x9e8>
 8008ac0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	f43f ad2b 	beq.w	800851e <_strtod_l+0x43e>
 8008ac8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008bd8 <_strtod_l+0xaf8>
 8008acc:	f04f 3aff 	mov.w	sl, #4294967295
 8008ad0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ad2:	9805      	ldr	r0, [sp, #20]
 8008ad4:	f7fe fe74 	bl	80077c0 <_Bfree>
 8008ad8:	9805      	ldr	r0, [sp, #20]
 8008ada:	4649      	mov	r1, r9
 8008adc:	f7fe fe70 	bl	80077c0 <_Bfree>
 8008ae0:	9805      	ldr	r0, [sp, #20]
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	f7fe fe6c 	bl	80077c0 <_Bfree>
 8008ae8:	9805      	ldr	r0, [sp, #20]
 8008aea:	4621      	mov	r1, r4
 8008aec:	f7fe fe68 	bl	80077c0 <_Bfree>
 8008af0:	e618      	b.n	8008724 <_strtod_l+0x644>
 8008af2:	f1ba 0f01 	cmp.w	sl, #1
 8008af6:	d103      	bne.n	8008b00 <_strtod_l+0xa20>
 8008af8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f43f ada5 	beq.w	800864a <_strtod_l+0x56a>
 8008b00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008bb0 <_strtod_l+0xad0>
 8008b04:	4f35      	ldr	r7, [pc, #212]	@ (8008bdc <_strtod_l+0xafc>)
 8008b06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	e7b1      	b.n	8008a72 <_strtod_l+0x992>
 8008b0e:	4f34      	ldr	r7, [pc, #208]	@ (8008be0 <_strtod_l+0xb00>)
 8008b10:	2600      	movs	r6, #0
 8008b12:	e7aa      	b.n	8008a6a <_strtod_l+0x98a>
 8008b14:	4b32      	ldr	r3, [pc, #200]	@ (8008be0 <_strtod_l+0xb00>)
 8008b16:	4630      	mov	r0, r6
 8008b18:	4639      	mov	r1, r7
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f7f7 fd74 	bl	8000608 <__aeabi_dmul>
 8008b20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b22:	4606      	mov	r6, r0
 8008b24:	460f      	mov	r7, r1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d09f      	beq.n	8008a6a <_strtod_l+0x98a>
 8008b2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008b2e:	e7a0      	b.n	8008a72 <_strtod_l+0x992>
 8008b30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008bb8 <_strtod_l+0xad8>
 8008b34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008b38:	ec57 6b17 	vmov	r6, r7, d7
 8008b3c:	e799      	b.n	8008a72 <_strtod_l+0x992>
 8008b3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008b42:	9b08      	ldr	r3, [sp, #32]
 8008b44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1c1      	bne.n	8008ad0 <_strtod_l+0x9f0>
 8008b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b50:	0d1b      	lsrs	r3, r3, #20
 8008b52:	051b      	lsls	r3, r3, #20
 8008b54:	429d      	cmp	r5, r3
 8008b56:	d1bb      	bne.n	8008ad0 <_strtod_l+0x9f0>
 8008b58:	4630      	mov	r0, r6
 8008b5a:	4639      	mov	r1, r7
 8008b5c:	f7f8 f8b4 	bl	8000cc8 <__aeabi_d2lz>
 8008b60:	f7f7 fd24 	bl	80005ac <__aeabi_l2d>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 fb94 	bl	8000298 <__aeabi_dsub>
 8008b70:	460b      	mov	r3, r1
 8008b72:	4602      	mov	r2, r0
 8008b74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b7e:	ea46 060a 	orr.w	r6, r6, sl
 8008b82:	431e      	orrs	r6, r3
 8008b84:	d06f      	beq.n	8008c66 <_strtod_l+0xb86>
 8008b86:	a30e      	add	r3, pc, #56	@ (adr r3, 8008bc0 <_strtod_l+0xae0>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 ffae 	bl	8000aec <__aeabi_dcmplt>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f47f accf 	bne.w	8008534 <_strtod_l+0x454>
 8008b96:	a30c      	add	r3, pc, #48	@ (adr r3, 8008bc8 <_strtod_l+0xae8>)
 8008b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ba0:	f7f7 ffc2 	bl	8000b28 <__aeabi_dcmpgt>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d093      	beq.n	8008ad0 <_strtod_l+0x9f0>
 8008ba8:	e4c4      	b.n	8008534 <_strtod_l+0x454>
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w
 8008bb0:	00000000 	.word	0x00000000
 8008bb4:	bff00000 	.word	0xbff00000
 8008bb8:	00000000 	.word	0x00000000
 8008bbc:	3ff00000 	.word	0x3ff00000
 8008bc0:	94a03595 	.word	0x94a03595
 8008bc4:	3fdfffff 	.word	0x3fdfffff
 8008bc8:	35afe535 	.word	0x35afe535
 8008bcc:	3fe00000 	.word	0x3fe00000
 8008bd0:	000fffff 	.word	0x000fffff
 8008bd4:	7ff00000 	.word	0x7ff00000
 8008bd8:	7fefffff 	.word	0x7fefffff
 8008bdc:	3ff00000 	.word	0x3ff00000
 8008be0:	3fe00000 	.word	0x3fe00000
 8008be4:	7fe00000 	.word	0x7fe00000
 8008be8:	7c9fffff 	.word	0x7c9fffff
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	b323      	cbz	r3, 8008c3a <_strtod_l+0xb5a>
 8008bf0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008bf4:	d821      	bhi.n	8008c3a <_strtod_l+0xb5a>
 8008bf6:	a328      	add	r3, pc, #160	@ (adr r3, 8008c98 <_strtod_l+0xbb8>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	4639      	mov	r1, r7
 8008c00:	f7f7 ff7e 	bl	8000b00 <__aeabi_dcmple>
 8008c04:	b1a0      	cbz	r0, 8008c30 <_strtod_l+0xb50>
 8008c06:	4639      	mov	r1, r7
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f7f7 ffd5 	bl	8000bb8 <__aeabi_d2uiz>
 8008c0e:	2801      	cmp	r0, #1
 8008c10:	bf38      	it	cc
 8008c12:	2001      	movcc	r0, #1
 8008c14:	f7f7 fc7e 	bl	8000514 <__aeabi_ui2d>
 8008c18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460f      	mov	r7, r1
 8008c1e:	b9fb      	cbnz	r3, 8008c60 <_strtod_l+0xb80>
 8008c20:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c24:	9014      	str	r0, [sp, #80]	@ 0x50
 8008c26:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008c2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008c30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c32:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008c36:	1b5b      	subs	r3, r3, r5
 8008c38:	9311      	str	r3, [sp, #68]	@ 0x44
 8008c3a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008c3e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008c42:	f7ff f8f1 	bl	8007e28 <__ulp>
 8008c46:	4650      	mov	r0, sl
 8008c48:	ec53 2b10 	vmov	r2, r3, d0
 8008c4c:	4659      	mov	r1, fp
 8008c4e:	f7f7 fcdb 	bl	8000608 <__aeabi_dmul>
 8008c52:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c56:	f7f7 fb21 	bl	800029c <__adddf3>
 8008c5a:	4682      	mov	sl, r0
 8008c5c:	468b      	mov	fp, r1
 8008c5e:	e770      	b.n	8008b42 <_strtod_l+0xa62>
 8008c60:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008c64:	e7e0      	b.n	8008c28 <_strtod_l+0xb48>
 8008c66:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ca0 <_strtod_l+0xbc0>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	f7f7 ff3e 	bl	8000aec <__aeabi_dcmplt>
 8008c70:	e798      	b.n	8008ba4 <_strtod_l+0xac4>
 8008c72:	2300      	movs	r3, #0
 8008c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c76:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	f7ff ba6d 	b.w	800815a <_strtod_l+0x7a>
 8008c80:	2a65      	cmp	r2, #101	@ 0x65
 8008c82:	f43f ab66 	beq.w	8008352 <_strtod_l+0x272>
 8008c86:	2a45      	cmp	r2, #69	@ 0x45
 8008c88:	f43f ab63 	beq.w	8008352 <_strtod_l+0x272>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f7ff bb9e 	b.w	80083ce <_strtod_l+0x2ee>
 8008c92:	bf00      	nop
 8008c94:	f3af 8000 	nop.w
 8008c98:	ffc00000 	.word	0xffc00000
 8008c9c:	41dfffff 	.word	0x41dfffff
 8008ca0:	94a03595 	.word	0x94a03595
 8008ca4:	3fcfffff 	.word	0x3fcfffff

08008ca8 <_strtod_r>:
 8008ca8:	4b01      	ldr	r3, [pc, #4]	@ (8008cb0 <_strtod_r+0x8>)
 8008caa:	f7ff ba19 	b.w	80080e0 <_strtod_l>
 8008cae:	bf00      	nop
 8008cb0:	20000090 	.word	0x20000090

08008cb4 <_strtol_l.constprop.0>:
 8008cb4:	2b24      	cmp	r3, #36	@ 0x24
 8008cb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cba:	4686      	mov	lr, r0
 8008cbc:	4690      	mov	r8, r2
 8008cbe:	d801      	bhi.n	8008cc4 <_strtol_l.constprop.0+0x10>
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d106      	bne.n	8008cd2 <_strtol_l.constprop.0+0x1e>
 8008cc4:	f7fd fdbc 	bl	8006840 <__errno>
 8008cc8:	2316      	movs	r3, #22
 8008cca:	6003      	str	r3, [r0, #0]
 8008ccc:	2000      	movs	r0, #0
 8008cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd2:	4834      	ldr	r0, [pc, #208]	@ (8008da4 <_strtol_l.constprop.0+0xf0>)
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cdc:	5d06      	ldrb	r6, [r0, r4]
 8008cde:	f016 0608 	ands.w	r6, r6, #8
 8008ce2:	d1f8      	bne.n	8008cd6 <_strtol_l.constprop.0+0x22>
 8008ce4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008ce6:	d12d      	bne.n	8008d44 <_strtol_l.constprop.0+0x90>
 8008ce8:	782c      	ldrb	r4, [r5, #0]
 8008cea:	2601      	movs	r6, #1
 8008cec:	1c95      	adds	r5, r2, #2
 8008cee:	f033 0210 	bics.w	r2, r3, #16
 8008cf2:	d109      	bne.n	8008d08 <_strtol_l.constprop.0+0x54>
 8008cf4:	2c30      	cmp	r4, #48	@ 0x30
 8008cf6:	d12a      	bne.n	8008d4e <_strtol_l.constprop.0+0x9a>
 8008cf8:	782a      	ldrb	r2, [r5, #0]
 8008cfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cfe:	2a58      	cmp	r2, #88	@ 0x58
 8008d00:	d125      	bne.n	8008d4e <_strtol_l.constprop.0+0x9a>
 8008d02:	786c      	ldrb	r4, [r5, #1]
 8008d04:	2310      	movs	r3, #16
 8008d06:	3502      	adds	r5, #2
 8008d08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d10:	2200      	movs	r2, #0
 8008d12:	fbbc f9f3 	udiv	r9, ip, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d20:	2f09      	cmp	r7, #9
 8008d22:	d81b      	bhi.n	8008d5c <_strtol_l.constprop.0+0xa8>
 8008d24:	463c      	mov	r4, r7
 8008d26:	42a3      	cmp	r3, r4
 8008d28:	dd27      	ble.n	8008d7a <_strtol_l.constprop.0+0xc6>
 8008d2a:	1c57      	adds	r7, r2, #1
 8008d2c:	d007      	beq.n	8008d3e <_strtol_l.constprop.0+0x8a>
 8008d2e:	4581      	cmp	r9, r0
 8008d30:	d320      	bcc.n	8008d74 <_strtol_l.constprop.0+0xc0>
 8008d32:	d101      	bne.n	8008d38 <_strtol_l.constprop.0+0x84>
 8008d34:	45a2      	cmp	sl, r4
 8008d36:	db1d      	blt.n	8008d74 <_strtol_l.constprop.0+0xc0>
 8008d38:	fb00 4003 	mla	r0, r0, r3, r4
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d42:	e7eb      	b.n	8008d1c <_strtol_l.constprop.0+0x68>
 8008d44:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d46:	bf04      	itt	eq
 8008d48:	782c      	ldrbeq	r4, [r5, #0]
 8008d4a:	1c95      	addeq	r5, r2, #2
 8008d4c:	e7cf      	b.n	8008cee <_strtol_l.constprop.0+0x3a>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1da      	bne.n	8008d08 <_strtol_l.constprop.0+0x54>
 8008d52:	2c30      	cmp	r4, #48	@ 0x30
 8008d54:	bf0c      	ite	eq
 8008d56:	2308      	moveq	r3, #8
 8008d58:	230a      	movne	r3, #10
 8008d5a:	e7d5      	b.n	8008d08 <_strtol_l.constprop.0+0x54>
 8008d5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d60:	2f19      	cmp	r7, #25
 8008d62:	d801      	bhi.n	8008d68 <_strtol_l.constprop.0+0xb4>
 8008d64:	3c37      	subs	r4, #55	@ 0x37
 8008d66:	e7de      	b.n	8008d26 <_strtol_l.constprop.0+0x72>
 8008d68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d6c:	2f19      	cmp	r7, #25
 8008d6e:	d804      	bhi.n	8008d7a <_strtol_l.constprop.0+0xc6>
 8008d70:	3c57      	subs	r4, #87	@ 0x57
 8008d72:	e7d8      	b.n	8008d26 <_strtol_l.constprop.0+0x72>
 8008d74:	f04f 32ff 	mov.w	r2, #4294967295
 8008d78:	e7e1      	b.n	8008d3e <_strtol_l.constprop.0+0x8a>
 8008d7a:	1c53      	adds	r3, r2, #1
 8008d7c:	d108      	bne.n	8008d90 <_strtol_l.constprop.0+0xdc>
 8008d7e:	2322      	movs	r3, #34	@ 0x22
 8008d80:	f8ce 3000 	str.w	r3, [lr]
 8008d84:	4660      	mov	r0, ip
 8008d86:	f1b8 0f00 	cmp.w	r8, #0
 8008d8a:	d0a0      	beq.n	8008cce <_strtol_l.constprop.0+0x1a>
 8008d8c:	1e69      	subs	r1, r5, #1
 8008d8e:	e006      	b.n	8008d9e <_strtol_l.constprop.0+0xea>
 8008d90:	b106      	cbz	r6, 8008d94 <_strtol_l.constprop.0+0xe0>
 8008d92:	4240      	negs	r0, r0
 8008d94:	f1b8 0f00 	cmp.w	r8, #0
 8008d98:	d099      	beq.n	8008cce <_strtol_l.constprop.0+0x1a>
 8008d9a:	2a00      	cmp	r2, #0
 8008d9c:	d1f6      	bne.n	8008d8c <_strtol_l.constprop.0+0xd8>
 8008d9e:	f8c8 1000 	str.w	r1, [r8]
 8008da2:	e794      	b.n	8008cce <_strtol_l.constprop.0+0x1a>
 8008da4:	0800a229 	.word	0x0800a229

08008da8 <_strtol_r>:
 8008da8:	f7ff bf84 	b.w	8008cb4 <_strtol_l.constprop.0>

08008dac <__ssputs_r>:
 8008dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db0:	688e      	ldr	r6, [r1, #8]
 8008db2:	461f      	mov	r7, r3
 8008db4:	42be      	cmp	r6, r7
 8008db6:	680b      	ldr	r3, [r1, #0]
 8008db8:	4682      	mov	sl, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	4690      	mov	r8, r2
 8008dbe:	d82d      	bhi.n	8008e1c <__ssputs_r+0x70>
 8008dc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dc8:	d026      	beq.n	8008e18 <__ssputs_r+0x6c>
 8008dca:	6965      	ldr	r5, [r4, #20]
 8008dcc:	6909      	ldr	r1, [r1, #16]
 8008dce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd2:	eba3 0901 	sub.w	r9, r3, r1
 8008dd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008dda:	1c7b      	adds	r3, r7, #1
 8008ddc:	444b      	add	r3, r9
 8008dde:	106d      	asrs	r5, r5, #1
 8008de0:	429d      	cmp	r5, r3
 8008de2:	bf38      	it	cc
 8008de4:	461d      	movcc	r5, r3
 8008de6:	0553      	lsls	r3, r2, #21
 8008de8:	d527      	bpl.n	8008e3a <__ssputs_r+0x8e>
 8008dea:	4629      	mov	r1, r5
 8008dec:	f7fe fc1c 	bl	8007628 <_malloc_r>
 8008df0:	4606      	mov	r6, r0
 8008df2:	b360      	cbz	r0, 8008e4e <__ssputs_r+0xa2>
 8008df4:	6921      	ldr	r1, [r4, #16]
 8008df6:	464a      	mov	r2, r9
 8008df8:	f000 fa18 	bl	800922c <memcpy>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e06:	81a3      	strh	r3, [r4, #12]
 8008e08:	6126      	str	r6, [r4, #16]
 8008e0a:	6165      	str	r5, [r4, #20]
 8008e0c:	444e      	add	r6, r9
 8008e0e:	eba5 0509 	sub.w	r5, r5, r9
 8008e12:	6026      	str	r6, [r4, #0]
 8008e14:	60a5      	str	r5, [r4, #8]
 8008e16:	463e      	mov	r6, r7
 8008e18:	42be      	cmp	r6, r7
 8008e1a:	d900      	bls.n	8008e1e <__ssputs_r+0x72>
 8008e1c:	463e      	mov	r6, r7
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	4632      	mov	r2, r6
 8008e22:	4641      	mov	r1, r8
 8008e24:	f000 f9c6 	bl	80091b4 <memmove>
 8008e28:	68a3      	ldr	r3, [r4, #8]
 8008e2a:	1b9b      	subs	r3, r3, r6
 8008e2c:	60a3      	str	r3, [r4, #8]
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	4433      	add	r3, r6
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	2000      	movs	r0, #0
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	462a      	mov	r2, r5
 8008e3c:	f000 fd89 	bl	8009952 <_realloc_r>
 8008e40:	4606      	mov	r6, r0
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d1e0      	bne.n	8008e08 <__ssputs_r+0x5c>
 8008e46:	6921      	ldr	r1, [r4, #16]
 8008e48:	4650      	mov	r0, sl
 8008e4a:	f7fe fb79 	bl	8007540 <_free_r>
 8008e4e:	230c      	movs	r3, #12
 8008e50:	f8ca 3000 	str.w	r3, [sl]
 8008e54:	89a3      	ldrh	r3, [r4, #12]
 8008e56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e60:	e7e9      	b.n	8008e36 <__ssputs_r+0x8a>
	...

08008e64 <_svfiprintf_r>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	4698      	mov	r8, r3
 8008e6a:	898b      	ldrh	r3, [r1, #12]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	b09d      	sub	sp, #116	@ 0x74
 8008e70:	4607      	mov	r7, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	d510      	bpl.n	8008e9a <_svfiprintf_r+0x36>
 8008e78:	690b      	ldr	r3, [r1, #16]
 8008e7a:	b973      	cbnz	r3, 8008e9a <_svfiprintf_r+0x36>
 8008e7c:	2140      	movs	r1, #64	@ 0x40
 8008e7e:	f7fe fbd3 	bl	8007628 <_malloc_r>
 8008e82:	6028      	str	r0, [r5, #0]
 8008e84:	6128      	str	r0, [r5, #16]
 8008e86:	b930      	cbnz	r0, 8008e96 <_svfiprintf_r+0x32>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b01d      	add	sp, #116	@ 0x74
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	2340      	movs	r3, #64	@ 0x40
 8008e98:	616b      	str	r3, [r5, #20]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea8:	2330      	movs	r3, #48	@ 0x30
 8008eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009048 <_svfiprintf_r+0x1e4>
 8008eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eb2:	f04f 0901 	mov.w	r9, #1
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	b10a      	cbz	r2, 8008ec4 <_svfiprintf_r+0x60>
 8008ec0:	2a25      	cmp	r2, #37	@ 0x25
 8008ec2:	d1f9      	bne.n	8008eb8 <_svfiprintf_r+0x54>
 8008ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec8:	d00b      	beq.n	8008ee2 <_svfiprintf_r+0x7e>
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ff6b 	bl	8008dac <__ssputs_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f000 80a7 	beq.w	800902a <_svfiprintf_r+0x1c6>
 8008edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ede:	445a      	add	r2, fp
 8008ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 809f 	beq.w	800902a <_svfiprintf_r+0x1c6>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f04:	4654      	mov	r4, sl
 8008f06:	2205      	movs	r2, #5
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	484e      	ldr	r0, [pc, #312]	@ (8009048 <_svfiprintf_r+0x1e4>)
 8008f0e:	f7f7 f967 	bl	80001e0 <memchr>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	b9d8      	cbnz	r0, 8008f4e <_svfiprintf_r+0xea>
 8008f16:	06d0      	lsls	r0, r2, #27
 8008f18:	bf44      	itt	mi
 8008f1a:	2320      	movmi	r3, #32
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f20:	0711      	lsls	r1, r2, #28
 8008f22:	bf44      	itt	mi
 8008f24:	232b      	movmi	r3, #43	@ 0x2b
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f30:	d015      	beq.n	8008f5e <_svfiprintf_r+0xfa>
 8008f32:	9a07      	ldr	r2, [sp, #28]
 8008f34:	4654      	mov	r4, sl
 8008f36:	2000      	movs	r0, #0
 8008f38:	f04f 0c0a 	mov.w	ip, #10
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f42:	3b30      	subs	r3, #48	@ 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d94b      	bls.n	8008fe0 <_svfiprintf_r+0x17c>
 8008f48:	b1b0      	cbz	r0, 8008f78 <_svfiprintf_r+0x114>
 8008f4a:	9207      	str	r2, [sp, #28]
 8008f4c:	e014      	b.n	8008f78 <_svfiprintf_r+0x114>
 8008f4e:	eba0 0308 	sub.w	r3, r0, r8
 8008f52:	fa09 f303 	lsl.w	r3, r9, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	46a2      	mov	sl, r4
 8008f5c:	e7d2      	b.n	8008f04 <_svfiprintf_r+0xa0>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbb      	ittet	lt
 8008f6a:	425b      	neglt	r3, r3
 8008f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f70:	9307      	strge	r3, [sp, #28]
 8008f72:	9307      	strlt	r3, [sp, #28]
 8008f74:	bfb8      	it	lt
 8008f76:	9204      	strlt	r2, [sp, #16]
 8008f78:	7823      	ldrb	r3, [r4, #0]
 8008f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f7c:	d10a      	bne.n	8008f94 <_svfiprintf_r+0x130>
 8008f7e:	7863      	ldrb	r3, [r4, #1]
 8008f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f82:	d132      	bne.n	8008fea <_svfiprintf_r+0x186>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	9203      	str	r2, [sp, #12]
 8008f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f90:	3402      	adds	r4, #2
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009058 <_svfiprintf_r+0x1f4>
 8008f98:	7821      	ldrb	r1, [r4, #0]
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	4650      	mov	r0, sl
 8008f9e:	f7f7 f91f 	bl	80001e0 <memchr>
 8008fa2:	b138      	cbz	r0, 8008fb4 <_svfiprintf_r+0x150>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	eba0 000a 	sub.w	r0, r0, sl
 8008faa:	2240      	movs	r2, #64	@ 0x40
 8008fac:	4082      	lsls	r2, r0
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	3401      	adds	r4, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb8:	4824      	ldr	r0, [pc, #144]	@ (800904c <_svfiprintf_r+0x1e8>)
 8008fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fbe:	2206      	movs	r2, #6
 8008fc0:	f7f7 f90e 	bl	80001e0 <memchr>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d036      	beq.n	8009036 <_svfiprintf_r+0x1d2>
 8008fc8:	4b21      	ldr	r3, [pc, #132]	@ (8009050 <_svfiprintf_r+0x1ec>)
 8008fca:	bb1b      	cbnz	r3, 8009014 <_svfiprintf_r+0x1b0>
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	3307      	adds	r3, #7
 8008fd0:	f023 0307 	bic.w	r3, r3, #7
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fda:	4433      	add	r3, r6
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	e76a      	b.n	8008eb6 <_svfiprintf_r+0x52>
 8008fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7a8      	b.n	8008f3c <_svfiprintf_r+0xd8>
 8008fea:	2300      	movs	r3, #0
 8008fec:	3401      	adds	r4, #1
 8008fee:	9305      	str	r3, [sp, #20]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f04f 0c0a 	mov.w	ip, #10
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffc:	3a30      	subs	r2, #48	@ 0x30
 8008ffe:	2a09      	cmp	r2, #9
 8009000:	d903      	bls.n	800900a <_svfiprintf_r+0x1a6>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c6      	beq.n	8008f94 <_svfiprintf_r+0x130>
 8009006:	9105      	str	r1, [sp, #20]
 8009008:	e7c4      	b.n	8008f94 <_svfiprintf_r+0x130>
 800900a:	fb0c 2101 	mla	r1, ip, r1, r2
 800900e:	4604      	mov	r4, r0
 8009010:	2301      	movs	r3, #1
 8009012:	e7f0      	b.n	8008ff6 <_svfiprintf_r+0x192>
 8009014:	ab03      	add	r3, sp, #12
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	462a      	mov	r2, r5
 800901a:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <_svfiprintf_r+0x1f0>)
 800901c:	a904      	add	r1, sp, #16
 800901e:	4638      	mov	r0, r7
 8009020:	f7fc fc96 	bl	8005950 <_printf_float>
 8009024:	1c42      	adds	r2, r0, #1
 8009026:	4606      	mov	r6, r0
 8009028:	d1d6      	bne.n	8008fd8 <_svfiprintf_r+0x174>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	065b      	lsls	r3, r3, #25
 800902e:	f53f af2d 	bmi.w	8008e8c <_svfiprintf_r+0x28>
 8009032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009034:	e72c      	b.n	8008e90 <_svfiprintf_r+0x2c>
 8009036:	ab03      	add	r3, sp, #12
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	462a      	mov	r2, r5
 800903c:	4b05      	ldr	r3, [pc, #20]	@ (8009054 <_svfiprintf_r+0x1f0>)
 800903e:	a904      	add	r1, sp, #16
 8009040:	4638      	mov	r0, r7
 8009042:	f7fc ff1d 	bl	8005e80 <_printf_i>
 8009046:	e7ed      	b.n	8009024 <_svfiprintf_r+0x1c0>
 8009048:	0800a329 	.word	0x0800a329
 800904c:	0800a333 	.word	0x0800a333
 8009050:	08005951 	.word	0x08005951
 8009054:	08008dad 	.word	0x08008dad
 8009058:	0800a32f 	.word	0x0800a32f

0800905c <__sflush_r>:
 800905c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009064:	0716      	lsls	r6, r2, #28
 8009066:	4605      	mov	r5, r0
 8009068:	460c      	mov	r4, r1
 800906a:	d454      	bmi.n	8009116 <__sflush_r+0xba>
 800906c:	684b      	ldr	r3, [r1, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dc02      	bgt.n	8009078 <__sflush_r+0x1c>
 8009072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd48      	ble.n	800910a <__sflush_r+0xae>
 8009078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800907a:	2e00      	cmp	r6, #0
 800907c:	d045      	beq.n	800910a <__sflush_r+0xae>
 800907e:	2300      	movs	r3, #0
 8009080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009084:	682f      	ldr	r7, [r5, #0]
 8009086:	6a21      	ldr	r1, [r4, #32]
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	d030      	beq.n	80090ee <__sflush_r+0x92>
 800908c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	0759      	lsls	r1, r3, #29
 8009092:	d505      	bpl.n	80090a0 <__sflush_r+0x44>
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800909a:	b10b      	cbz	r3, 80090a0 <__sflush_r+0x44>
 800909c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090a4:	6a21      	ldr	r1, [r4, #32]
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b0      	blx	r6
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	d106      	bne.n	80090be <__sflush_r+0x62>
 80090b0:	6829      	ldr	r1, [r5, #0]
 80090b2:	291d      	cmp	r1, #29
 80090b4:	d82b      	bhi.n	800910e <__sflush_r+0xb2>
 80090b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009160 <__sflush_r+0x104>)
 80090b8:	410a      	asrs	r2, r1
 80090ba:	07d6      	lsls	r6, r2, #31
 80090bc:	d427      	bmi.n	800910e <__sflush_r+0xb2>
 80090be:	2200      	movs	r2, #0
 80090c0:	6062      	str	r2, [r4, #4]
 80090c2:	04d9      	lsls	r1, r3, #19
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	d504      	bpl.n	80090d4 <__sflush_r+0x78>
 80090ca:	1c42      	adds	r2, r0, #1
 80090cc:	d101      	bne.n	80090d2 <__sflush_r+0x76>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	b903      	cbnz	r3, 80090d4 <__sflush_r+0x78>
 80090d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80090d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090d6:	602f      	str	r7, [r5, #0]
 80090d8:	b1b9      	cbz	r1, 800910a <__sflush_r+0xae>
 80090da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090de:	4299      	cmp	r1, r3
 80090e0:	d002      	beq.n	80090e8 <__sflush_r+0x8c>
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7fe fa2c 	bl	8007540 <_free_r>
 80090e8:	2300      	movs	r3, #0
 80090ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ec:	e00d      	b.n	800910a <__sflush_r+0xae>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b0      	blx	r6
 80090f4:	4602      	mov	r2, r0
 80090f6:	1c50      	adds	r0, r2, #1
 80090f8:	d1c9      	bne.n	800908e <__sflush_r+0x32>
 80090fa:	682b      	ldr	r3, [r5, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0c6      	beq.n	800908e <__sflush_r+0x32>
 8009100:	2b1d      	cmp	r3, #29
 8009102:	d001      	beq.n	8009108 <__sflush_r+0xac>
 8009104:	2b16      	cmp	r3, #22
 8009106:	d11e      	bne.n	8009146 <__sflush_r+0xea>
 8009108:	602f      	str	r7, [r5, #0]
 800910a:	2000      	movs	r0, #0
 800910c:	e022      	b.n	8009154 <__sflush_r+0xf8>
 800910e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009112:	b21b      	sxth	r3, r3
 8009114:	e01b      	b.n	800914e <__sflush_r+0xf2>
 8009116:	690f      	ldr	r7, [r1, #16]
 8009118:	2f00      	cmp	r7, #0
 800911a:	d0f6      	beq.n	800910a <__sflush_r+0xae>
 800911c:	0793      	lsls	r3, r2, #30
 800911e:	680e      	ldr	r6, [r1, #0]
 8009120:	bf08      	it	eq
 8009122:	694b      	ldreq	r3, [r1, #20]
 8009124:	600f      	str	r7, [r1, #0]
 8009126:	bf18      	it	ne
 8009128:	2300      	movne	r3, #0
 800912a:	eba6 0807 	sub.w	r8, r6, r7
 800912e:	608b      	str	r3, [r1, #8]
 8009130:	f1b8 0f00 	cmp.w	r8, #0
 8009134:	dde9      	ble.n	800910a <__sflush_r+0xae>
 8009136:	6a21      	ldr	r1, [r4, #32]
 8009138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800913a:	4643      	mov	r3, r8
 800913c:	463a      	mov	r2, r7
 800913e:	4628      	mov	r0, r5
 8009140:	47b0      	blx	r6
 8009142:	2800      	cmp	r0, #0
 8009144:	dc08      	bgt.n	8009158 <__sflush_r+0xfc>
 8009146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	4407      	add	r7, r0
 800915a:	eba8 0800 	sub.w	r8, r8, r0
 800915e:	e7e7      	b.n	8009130 <__sflush_r+0xd4>
 8009160:	dfbffffe 	.word	0xdfbffffe

08009164 <_fflush_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	4605      	mov	r5, r0
 800916a:	460c      	mov	r4, r1
 800916c:	b913      	cbnz	r3, 8009174 <_fflush_r+0x10>
 800916e:	2500      	movs	r5, #0
 8009170:	4628      	mov	r0, r5
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	b118      	cbz	r0, 800917e <_fflush_r+0x1a>
 8009176:	6a03      	ldr	r3, [r0, #32]
 8009178:	b90b      	cbnz	r3, 800917e <_fflush_r+0x1a>
 800917a:	f7fd fa41 	bl	8006600 <__sinit>
 800917e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f3      	beq.n	800916e <_fflush_r+0xa>
 8009186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009188:	07d0      	lsls	r0, r2, #31
 800918a:	d404      	bmi.n	8009196 <_fflush_r+0x32>
 800918c:	0599      	lsls	r1, r3, #22
 800918e:	d402      	bmi.n	8009196 <_fflush_r+0x32>
 8009190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009192:	f7fd fb80 	bl	8006896 <__retarget_lock_acquire_recursive>
 8009196:	4628      	mov	r0, r5
 8009198:	4621      	mov	r1, r4
 800919a:	f7ff ff5f 	bl	800905c <__sflush_r>
 800919e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091a0:	07da      	lsls	r2, r3, #31
 80091a2:	4605      	mov	r5, r0
 80091a4:	d4e4      	bmi.n	8009170 <_fflush_r+0xc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	059b      	lsls	r3, r3, #22
 80091aa:	d4e1      	bmi.n	8009170 <_fflush_r+0xc>
 80091ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ae:	f7fd fb73 	bl	8006898 <__retarget_lock_release_recursive>
 80091b2:	e7dd      	b.n	8009170 <_fflush_r+0xc>

080091b4 <memmove>:
 80091b4:	4288      	cmp	r0, r1
 80091b6:	b510      	push	{r4, lr}
 80091b8:	eb01 0402 	add.w	r4, r1, r2
 80091bc:	d902      	bls.n	80091c4 <memmove+0x10>
 80091be:	4284      	cmp	r4, r0
 80091c0:	4623      	mov	r3, r4
 80091c2:	d807      	bhi.n	80091d4 <memmove+0x20>
 80091c4:	1e43      	subs	r3, r0, #1
 80091c6:	42a1      	cmp	r1, r4
 80091c8:	d008      	beq.n	80091dc <memmove+0x28>
 80091ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091d2:	e7f8      	b.n	80091c6 <memmove+0x12>
 80091d4:	4402      	add	r2, r0
 80091d6:	4601      	mov	r1, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	d100      	bne.n	80091de <memmove+0x2a>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091e6:	e7f7      	b.n	80091d8 <memmove+0x24>

080091e8 <strncmp>:
 80091e8:	b510      	push	{r4, lr}
 80091ea:	b16a      	cbz	r2, 8009208 <strncmp+0x20>
 80091ec:	3901      	subs	r1, #1
 80091ee:	1884      	adds	r4, r0, r2
 80091f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d103      	bne.n	8009204 <strncmp+0x1c>
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d001      	beq.n	8009204 <strncmp+0x1c>
 8009200:	2a00      	cmp	r2, #0
 8009202:	d1f5      	bne.n	80091f0 <strncmp+0x8>
 8009204:	1ad0      	subs	r0, r2, r3
 8009206:	bd10      	pop	{r4, pc}
 8009208:	4610      	mov	r0, r2
 800920a:	e7fc      	b.n	8009206 <strncmp+0x1e>

0800920c <_sbrk_r>:
 800920c:	b538      	push	{r3, r4, r5, lr}
 800920e:	4d06      	ldr	r5, [pc, #24]	@ (8009228 <_sbrk_r+0x1c>)
 8009210:	2300      	movs	r3, #0
 8009212:	4604      	mov	r4, r0
 8009214:	4608      	mov	r0, r1
 8009216:	602b      	str	r3, [r5, #0]
 8009218:	f7f8 fe32 	bl	8001e80 <_sbrk>
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	d102      	bne.n	8009226 <_sbrk_r+0x1a>
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	b103      	cbz	r3, 8009226 <_sbrk_r+0x1a>
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	bd38      	pop	{r3, r4, r5, pc}
 8009228:	2000059c 	.word	0x2000059c

0800922c <memcpy>:
 800922c:	440a      	add	r2, r1
 800922e:	4291      	cmp	r1, r2
 8009230:	f100 33ff 	add.w	r3, r0, #4294967295
 8009234:	d100      	bne.n	8009238 <memcpy+0xc>
 8009236:	4770      	bx	lr
 8009238:	b510      	push	{r4, lr}
 800923a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800923e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009242:	4291      	cmp	r1, r2
 8009244:	d1f9      	bne.n	800923a <memcpy+0xe>
 8009246:	bd10      	pop	{r4, pc}

08009248 <nan>:
 8009248:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009250 <nan+0x8>
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	00000000 	.word	0x00000000
 8009254:	7ff80000 	.word	0x7ff80000

08009258 <__assert_func>:
 8009258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800925a:	4614      	mov	r4, r2
 800925c:	461a      	mov	r2, r3
 800925e:	4b09      	ldr	r3, [pc, #36]	@ (8009284 <__assert_func+0x2c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4605      	mov	r5, r0
 8009264:	68d8      	ldr	r0, [r3, #12]
 8009266:	b954      	cbnz	r4, 800927e <__assert_func+0x26>
 8009268:	4b07      	ldr	r3, [pc, #28]	@ (8009288 <__assert_func+0x30>)
 800926a:	461c      	mov	r4, r3
 800926c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009270:	9100      	str	r1, [sp, #0]
 8009272:	462b      	mov	r3, r5
 8009274:	4905      	ldr	r1, [pc, #20]	@ (800928c <__assert_func+0x34>)
 8009276:	f000 fba7 	bl	80099c8 <fiprintf>
 800927a:	f000 fbb7 	bl	80099ec <abort>
 800927e:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <__assert_func+0x38>)
 8009280:	e7f4      	b.n	800926c <__assert_func+0x14>
 8009282:	bf00      	nop
 8009284:	20000040 	.word	0x20000040
 8009288:	0800a37d 	.word	0x0800a37d
 800928c:	0800a34f 	.word	0x0800a34f
 8009290:	0800a342 	.word	0x0800a342

08009294 <_calloc_r>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	fba1 5402 	umull	r5, r4, r1, r2
 800929a:	b93c      	cbnz	r4, 80092ac <_calloc_r+0x18>
 800929c:	4629      	mov	r1, r5
 800929e:	f7fe f9c3 	bl	8007628 <_malloc_r>
 80092a2:	4606      	mov	r6, r0
 80092a4:	b928      	cbnz	r0, 80092b2 <_calloc_r+0x1e>
 80092a6:	2600      	movs	r6, #0
 80092a8:	4630      	mov	r0, r6
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	220c      	movs	r2, #12
 80092ae:	6002      	str	r2, [r0, #0]
 80092b0:	e7f9      	b.n	80092a6 <_calloc_r+0x12>
 80092b2:	462a      	mov	r2, r5
 80092b4:	4621      	mov	r1, r4
 80092b6:	f7fd fa70 	bl	800679a <memset>
 80092ba:	e7f5      	b.n	80092a8 <_calloc_r+0x14>

080092bc <rshift>:
 80092bc:	6903      	ldr	r3, [r0, #16]
 80092be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092ca:	f100 0414 	add.w	r4, r0, #20
 80092ce:	dd45      	ble.n	800935c <rshift+0xa0>
 80092d0:	f011 011f 	ands.w	r1, r1, #31
 80092d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092dc:	d10c      	bne.n	80092f8 <rshift+0x3c>
 80092de:	f100 0710 	add.w	r7, r0, #16
 80092e2:	4629      	mov	r1, r5
 80092e4:	42b1      	cmp	r1, r6
 80092e6:	d334      	bcc.n	8009352 <rshift+0x96>
 80092e8:	1a9b      	subs	r3, r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	1eea      	subs	r2, r5, #3
 80092ee:	4296      	cmp	r6, r2
 80092f0:	bf38      	it	cc
 80092f2:	2300      	movcc	r3, #0
 80092f4:	4423      	add	r3, r4
 80092f6:	e015      	b.n	8009324 <rshift+0x68>
 80092f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80092fc:	f1c1 0820 	rsb	r8, r1, #32
 8009300:	40cf      	lsrs	r7, r1
 8009302:	f105 0e04 	add.w	lr, r5, #4
 8009306:	46a1      	mov	r9, r4
 8009308:	4576      	cmp	r6, lr
 800930a:	46f4      	mov	ip, lr
 800930c:	d815      	bhi.n	800933a <rshift+0x7e>
 800930e:	1a9a      	subs	r2, r3, r2
 8009310:	0092      	lsls	r2, r2, #2
 8009312:	3a04      	subs	r2, #4
 8009314:	3501      	adds	r5, #1
 8009316:	42ae      	cmp	r6, r5
 8009318:	bf38      	it	cc
 800931a:	2200      	movcc	r2, #0
 800931c:	18a3      	adds	r3, r4, r2
 800931e:	50a7      	str	r7, [r4, r2]
 8009320:	b107      	cbz	r7, 8009324 <rshift+0x68>
 8009322:	3304      	adds	r3, #4
 8009324:	1b1a      	subs	r2, r3, r4
 8009326:	42a3      	cmp	r3, r4
 8009328:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800932c:	bf08      	it	eq
 800932e:	2300      	moveq	r3, #0
 8009330:	6102      	str	r2, [r0, #16]
 8009332:	bf08      	it	eq
 8009334:	6143      	streq	r3, [r0, #20]
 8009336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800933a:	f8dc c000 	ldr.w	ip, [ip]
 800933e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009342:	ea4c 0707 	orr.w	r7, ip, r7
 8009346:	f849 7b04 	str.w	r7, [r9], #4
 800934a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800934e:	40cf      	lsrs	r7, r1
 8009350:	e7da      	b.n	8009308 <rshift+0x4c>
 8009352:	f851 cb04 	ldr.w	ip, [r1], #4
 8009356:	f847 cf04 	str.w	ip, [r7, #4]!
 800935a:	e7c3      	b.n	80092e4 <rshift+0x28>
 800935c:	4623      	mov	r3, r4
 800935e:	e7e1      	b.n	8009324 <rshift+0x68>

08009360 <__hexdig_fun>:
 8009360:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009364:	2b09      	cmp	r3, #9
 8009366:	d802      	bhi.n	800936e <__hexdig_fun+0xe>
 8009368:	3820      	subs	r0, #32
 800936a:	b2c0      	uxtb	r0, r0
 800936c:	4770      	bx	lr
 800936e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009372:	2b05      	cmp	r3, #5
 8009374:	d801      	bhi.n	800937a <__hexdig_fun+0x1a>
 8009376:	3847      	subs	r0, #71	@ 0x47
 8009378:	e7f7      	b.n	800936a <__hexdig_fun+0xa>
 800937a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800937e:	2b05      	cmp	r3, #5
 8009380:	d801      	bhi.n	8009386 <__hexdig_fun+0x26>
 8009382:	3827      	subs	r0, #39	@ 0x27
 8009384:	e7f1      	b.n	800936a <__hexdig_fun+0xa>
 8009386:	2000      	movs	r0, #0
 8009388:	4770      	bx	lr
	...

0800938c <__gethex>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	b085      	sub	sp, #20
 8009392:	468a      	mov	sl, r1
 8009394:	9302      	str	r3, [sp, #8]
 8009396:	680b      	ldr	r3, [r1, #0]
 8009398:	9001      	str	r0, [sp, #4]
 800939a:	4690      	mov	r8, r2
 800939c:	1c9c      	adds	r4, r3, #2
 800939e:	46a1      	mov	r9, r4
 80093a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80093a4:	2830      	cmp	r0, #48	@ 0x30
 80093a6:	d0fa      	beq.n	800939e <__gethex+0x12>
 80093a8:	eba9 0303 	sub.w	r3, r9, r3
 80093ac:	f1a3 0b02 	sub.w	fp, r3, #2
 80093b0:	f7ff ffd6 	bl	8009360 <__hexdig_fun>
 80093b4:	4605      	mov	r5, r0
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d168      	bne.n	800948c <__gethex+0x100>
 80093ba:	49a0      	ldr	r1, [pc, #640]	@ (800963c <__gethex+0x2b0>)
 80093bc:	2201      	movs	r2, #1
 80093be:	4648      	mov	r0, r9
 80093c0:	f7ff ff12 	bl	80091e8 <strncmp>
 80093c4:	4607      	mov	r7, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d167      	bne.n	800949a <__gethex+0x10e>
 80093ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093ce:	4626      	mov	r6, r4
 80093d0:	f7ff ffc6 	bl	8009360 <__hexdig_fun>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d062      	beq.n	800949e <__gethex+0x112>
 80093d8:	4623      	mov	r3, r4
 80093da:	7818      	ldrb	r0, [r3, #0]
 80093dc:	2830      	cmp	r0, #48	@ 0x30
 80093de:	4699      	mov	r9, r3
 80093e0:	f103 0301 	add.w	r3, r3, #1
 80093e4:	d0f9      	beq.n	80093da <__gethex+0x4e>
 80093e6:	f7ff ffbb 	bl	8009360 <__hexdig_fun>
 80093ea:	fab0 f580 	clz	r5, r0
 80093ee:	096d      	lsrs	r5, r5, #5
 80093f0:	f04f 0b01 	mov.w	fp, #1
 80093f4:	464a      	mov	r2, r9
 80093f6:	4616      	mov	r6, r2
 80093f8:	3201      	adds	r2, #1
 80093fa:	7830      	ldrb	r0, [r6, #0]
 80093fc:	f7ff ffb0 	bl	8009360 <__hexdig_fun>
 8009400:	2800      	cmp	r0, #0
 8009402:	d1f8      	bne.n	80093f6 <__gethex+0x6a>
 8009404:	498d      	ldr	r1, [pc, #564]	@ (800963c <__gethex+0x2b0>)
 8009406:	2201      	movs	r2, #1
 8009408:	4630      	mov	r0, r6
 800940a:	f7ff feed 	bl	80091e8 <strncmp>
 800940e:	2800      	cmp	r0, #0
 8009410:	d13f      	bne.n	8009492 <__gethex+0x106>
 8009412:	b944      	cbnz	r4, 8009426 <__gethex+0x9a>
 8009414:	1c74      	adds	r4, r6, #1
 8009416:	4622      	mov	r2, r4
 8009418:	4616      	mov	r6, r2
 800941a:	3201      	adds	r2, #1
 800941c:	7830      	ldrb	r0, [r6, #0]
 800941e:	f7ff ff9f 	bl	8009360 <__hexdig_fun>
 8009422:	2800      	cmp	r0, #0
 8009424:	d1f8      	bne.n	8009418 <__gethex+0x8c>
 8009426:	1ba4      	subs	r4, r4, r6
 8009428:	00a7      	lsls	r7, r4, #2
 800942a:	7833      	ldrb	r3, [r6, #0]
 800942c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009430:	2b50      	cmp	r3, #80	@ 0x50
 8009432:	d13e      	bne.n	80094b2 <__gethex+0x126>
 8009434:	7873      	ldrb	r3, [r6, #1]
 8009436:	2b2b      	cmp	r3, #43	@ 0x2b
 8009438:	d033      	beq.n	80094a2 <__gethex+0x116>
 800943a:	2b2d      	cmp	r3, #45	@ 0x2d
 800943c:	d034      	beq.n	80094a8 <__gethex+0x11c>
 800943e:	1c71      	adds	r1, r6, #1
 8009440:	2400      	movs	r4, #0
 8009442:	7808      	ldrb	r0, [r1, #0]
 8009444:	f7ff ff8c 	bl	8009360 <__hexdig_fun>
 8009448:	1e43      	subs	r3, r0, #1
 800944a:	b2db      	uxtb	r3, r3
 800944c:	2b18      	cmp	r3, #24
 800944e:	d830      	bhi.n	80094b2 <__gethex+0x126>
 8009450:	f1a0 0210 	sub.w	r2, r0, #16
 8009454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009458:	f7ff ff82 	bl	8009360 <__hexdig_fun>
 800945c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009460:	fa5f fc8c 	uxtb.w	ip, ip
 8009464:	f1bc 0f18 	cmp.w	ip, #24
 8009468:	f04f 030a 	mov.w	r3, #10
 800946c:	d91e      	bls.n	80094ac <__gethex+0x120>
 800946e:	b104      	cbz	r4, 8009472 <__gethex+0xe6>
 8009470:	4252      	negs	r2, r2
 8009472:	4417      	add	r7, r2
 8009474:	f8ca 1000 	str.w	r1, [sl]
 8009478:	b1ed      	cbz	r5, 80094b6 <__gethex+0x12a>
 800947a:	f1bb 0f00 	cmp.w	fp, #0
 800947e:	bf0c      	ite	eq
 8009480:	2506      	moveq	r5, #6
 8009482:	2500      	movne	r5, #0
 8009484:	4628      	mov	r0, r5
 8009486:	b005      	add	sp, #20
 8009488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800948c:	2500      	movs	r5, #0
 800948e:	462c      	mov	r4, r5
 8009490:	e7b0      	b.n	80093f4 <__gethex+0x68>
 8009492:	2c00      	cmp	r4, #0
 8009494:	d1c7      	bne.n	8009426 <__gethex+0x9a>
 8009496:	4627      	mov	r7, r4
 8009498:	e7c7      	b.n	800942a <__gethex+0x9e>
 800949a:	464e      	mov	r6, r9
 800949c:	462f      	mov	r7, r5
 800949e:	2501      	movs	r5, #1
 80094a0:	e7c3      	b.n	800942a <__gethex+0x9e>
 80094a2:	2400      	movs	r4, #0
 80094a4:	1cb1      	adds	r1, r6, #2
 80094a6:	e7cc      	b.n	8009442 <__gethex+0xb6>
 80094a8:	2401      	movs	r4, #1
 80094aa:	e7fb      	b.n	80094a4 <__gethex+0x118>
 80094ac:	fb03 0002 	mla	r0, r3, r2, r0
 80094b0:	e7ce      	b.n	8009450 <__gethex+0xc4>
 80094b2:	4631      	mov	r1, r6
 80094b4:	e7de      	b.n	8009474 <__gethex+0xe8>
 80094b6:	eba6 0309 	sub.w	r3, r6, r9
 80094ba:	3b01      	subs	r3, #1
 80094bc:	4629      	mov	r1, r5
 80094be:	2b07      	cmp	r3, #7
 80094c0:	dc0a      	bgt.n	80094d8 <__gethex+0x14c>
 80094c2:	9801      	ldr	r0, [sp, #4]
 80094c4:	f7fe f93c 	bl	8007740 <_Balloc>
 80094c8:	4604      	mov	r4, r0
 80094ca:	b940      	cbnz	r0, 80094de <__gethex+0x152>
 80094cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009640 <__gethex+0x2b4>)
 80094ce:	4602      	mov	r2, r0
 80094d0:	21e4      	movs	r1, #228	@ 0xe4
 80094d2:	485c      	ldr	r0, [pc, #368]	@ (8009644 <__gethex+0x2b8>)
 80094d4:	f7ff fec0 	bl	8009258 <__assert_func>
 80094d8:	3101      	adds	r1, #1
 80094da:	105b      	asrs	r3, r3, #1
 80094dc:	e7ef      	b.n	80094be <__gethex+0x132>
 80094de:	f100 0a14 	add.w	sl, r0, #20
 80094e2:	2300      	movs	r3, #0
 80094e4:	4655      	mov	r5, sl
 80094e6:	469b      	mov	fp, r3
 80094e8:	45b1      	cmp	r9, r6
 80094ea:	d337      	bcc.n	800955c <__gethex+0x1d0>
 80094ec:	f845 bb04 	str.w	fp, [r5], #4
 80094f0:	eba5 050a 	sub.w	r5, r5, sl
 80094f4:	10ad      	asrs	r5, r5, #2
 80094f6:	6125      	str	r5, [r4, #16]
 80094f8:	4658      	mov	r0, fp
 80094fa:	f7fe fa13 	bl	8007924 <__hi0bits>
 80094fe:	016d      	lsls	r5, r5, #5
 8009500:	f8d8 6000 	ldr.w	r6, [r8]
 8009504:	1a2d      	subs	r5, r5, r0
 8009506:	42b5      	cmp	r5, r6
 8009508:	dd54      	ble.n	80095b4 <__gethex+0x228>
 800950a:	1bad      	subs	r5, r5, r6
 800950c:	4629      	mov	r1, r5
 800950e:	4620      	mov	r0, r4
 8009510:	f7fe fda7 	bl	8008062 <__any_on>
 8009514:	4681      	mov	r9, r0
 8009516:	b178      	cbz	r0, 8009538 <__gethex+0x1ac>
 8009518:	1e6b      	subs	r3, r5, #1
 800951a:	1159      	asrs	r1, r3, #5
 800951c:	f003 021f 	and.w	r2, r3, #31
 8009520:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009524:	f04f 0901 	mov.w	r9, #1
 8009528:	fa09 f202 	lsl.w	r2, r9, r2
 800952c:	420a      	tst	r2, r1
 800952e:	d003      	beq.n	8009538 <__gethex+0x1ac>
 8009530:	454b      	cmp	r3, r9
 8009532:	dc36      	bgt.n	80095a2 <__gethex+0x216>
 8009534:	f04f 0902 	mov.w	r9, #2
 8009538:	4629      	mov	r1, r5
 800953a:	4620      	mov	r0, r4
 800953c:	f7ff febe 	bl	80092bc <rshift>
 8009540:	442f      	add	r7, r5
 8009542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009546:	42bb      	cmp	r3, r7
 8009548:	da42      	bge.n	80095d0 <__gethex+0x244>
 800954a:	9801      	ldr	r0, [sp, #4]
 800954c:	4621      	mov	r1, r4
 800954e:	f7fe f937 	bl	80077c0 <_Bfree>
 8009552:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009554:	2300      	movs	r3, #0
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	25a3      	movs	r5, #163	@ 0xa3
 800955a:	e793      	b.n	8009484 <__gethex+0xf8>
 800955c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009560:	2a2e      	cmp	r2, #46	@ 0x2e
 8009562:	d012      	beq.n	800958a <__gethex+0x1fe>
 8009564:	2b20      	cmp	r3, #32
 8009566:	d104      	bne.n	8009572 <__gethex+0x1e6>
 8009568:	f845 bb04 	str.w	fp, [r5], #4
 800956c:	f04f 0b00 	mov.w	fp, #0
 8009570:	465b      	mov	r3, fp
 8009572:	7830      	ldrb	r0, [r6, #0]
 8009574:	9303      	str	r3, [sp, #12]
 8009576:	f7ff fef3 	bl	8009360 <__hexdig_fun>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	f000 000f 	and.w	r0, r0, #15
 8009580:	4098      	lsls	r0, r3
 8009582:	ea4b 0b00 	orr.w	fp, fp, r0
 8009586:	3304      	adds	r3, #4
 8009588:	e7ae      	b.n	80094e8 <__gethex+0x15c>
 800958a:	45b1      	cmp	r9, r6
 800958c:	d8ea      	bhi.n	8009564 <__gethex+0x1d8>
 800958e:	492b      	ldr	r1, [pc, #172]	@ (800963c <__gethex+0x2b0>)
 8009590:	9303      	str	r3, [sp, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	4630      	mov	r0, r6
 8009596:	f7ff fe27 	bl	80091e8 <strncmp>
 800959a:	9b03      	ldr	r3, [sp, #12]
 800959c:	2800      	cmp	r0, #0
 800959e:	d1e1      	bne.n	8009564 <__gethex+0x1d8>
 80095a0:	e7a2      	b.n	80094e8 <__gethex+0x15c>
 80095a2:	1ea9      	subs	r1, r5, #2
 80095a4:	4620      	mov	r0, r4
 80095a6:	f7fe fd5c 	bl	8008062 <__any_on>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d0c2      	beq.n	8009534 <__gethex+0x1a8>
 80095ae:	f04f 0903 	mov.w	r9, #3
 80095b2:	e7c1      	b.n	8009538 <__gethex+0x1ac>
 80095b4:	da09      	bge.n	80095ca <__gethex+0x23e>
 80095b6:	1b75      	subs	r5, r6, r5
 80095b8:	4621      	mov	r1, r4
 80095ba:	9801      	ldr	r0, [sp, #4]
 80095bc:	462a      	mov	r2, r5
 80095be:	f7fe fb17 	bl	8007bf0 <__lshift>
 80095c2:	1b7f      	subs	r7, r7, r5
 80095c4:	4604      	mov	r4, r0
 80095c6:	f100 0a14 	add.w	sl, r0, #20
 80095ca:	f04f 0900 	mov.w	r9, #0
 80095ce:	e7b8      	b.n	8009542 <__gethex+0x1b6>
 80095d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095d4:	42bd      	cmp	r5, r7
 80095d6:	dd6f      	ble.n	80096b8 <__gethex+0x32c>
 80095d8:	1bed      	subs	r5, r5, r7
 80095da:	42ae      	cmp	r6, r5
 80095dc:	dc34      	bgt.n	8009648 <__gethex+0x2bc>
 80095de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d022      	beq.n	800962c <__gethex+0x2a0>
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d024      	beq.n	8009634 <__gethex+0x2a8>
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d115      	bne.n	800961a <__gethex+0x28e>
 80095ee:	42ae      	cmp	r6, r5
 80095f0:	d113      	bne.n	800961a <__gethex+0x28e>
 80095f2:	2e01      	cmp	r6, #1
 80095f4:	d10b      	bne.n	800960e <__gethex+0x282>
 80095f6:	9a02      	ldr	r2, [sp, #8]
 80095f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	2301      	movs	r3, #1
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	f8ca 3000 	str.w	r3, [sl]
 8009606:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009608:	2562      	movs	r5, #98	@ 0x62
 800960a:	601c      	str	r4, [r3, #0]
 800960c:	e73a      	b.n	8009484 <__gethex+0xf8>
 800960e:	1e71      	subs	r1, r6, #1
 8009610:	4620      	mov	r0, r4
 8009612:	f7fe fd26 	bl	8008062 <__any_on>
 8009616:	2800      	cmp	r0, #0
 8009618:	d1ed      	bne.n	80095f6 <__gethex+0x26a>
 800961a:	9801      	ldr	r0, [sp, #4]
 800961c:	4621      	mov	r1, r4
 800961e:	f7fe f8cf 	bl	80077c0 <_Bfree>
 8009622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009624:	2300      	movs	r3, #0
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	2550      	movs	r5, #80	@ 0x50
 800962a:	e72b      	b.n	8009484 <__gethex+0xf8>
 800962c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f3      	bne.n	800961a <__gethex+0x28e>
 8009632:	e7e0      	b.n	80095f6 <__gethex+0x26a>
 8009634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1dd      	bne.n	80095f6 <__gethex+0x26a>
 800963a:	e7ee      	b.n	800961a <__gethex+0x28e>
 800963c:	0800a1d0 	.word	0x0800a1d0
 8009640:	0800a069 	.word	0x0800a069
 8009644:	0800a37e 	.word	0x0800a37e
 8009648:	1e6f      	subs	r7, r5, #1
 800964a:	f1b9 0f00 	cmp.w	r9, #0
 800964e:	d130      	bne.n	80096b2 <__gethex+0x326>
 8009650:	b127      	cbz	r7, 800965c <__gethex+0x2d0>
 8009652:	4639      	mov	r1, r7
 8009654:	4620      	mov	r0, r4
 8009656:	f7fe fd04 	bl	8008062 <__any_on>
 800965a:	4681      	mov	r9, r0
 800965c:	117a      	asrs	r2, r7, #5
 800965e:	2301      	movs	r3, #1
 8009660:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009664:	f007 071f 	and.w	r7, r7, #31
 8009668:	40bb      	lsls	r3, r7
 800966a:	4213      	tst	r3, r2
 800966c:	4629      	mov	r1, r5
 800966e:	4620      	mov	r0, r4
 8009670:	bf18      	it	ne
 8009672:	f049 0902 	orrne.w	r9, r9, #2
 8009676:	f7ff fe21 	bl	80092bc <rshift>
 800967a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800967e:	1b76      	subs	r6, r6, r5
 8009680:	2502      	movs	r5, #2
 8009682:	f1b9 0f00 	cmp.w	r9, #0
 8009686:	d047      	beq.n	8009718 <__gethex+0x38c>
 8009688:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d015      	beq.n	80096bc <__gethex+0x330>
 8009690:	2b03      	cmp	r3, #3
 8009692:	d017      	beq.n	80096c4 <__gethex+0x338>
 8009694:	2b01      	cmp	r3, #1
 8009696:	d109      	bne.n	80096ac <__gethex+0x320>
 8009698:	f019 0f02 	tst.w	r9, #2
 800969c:	d006      	beq.n	80096ac <__gethex+0x320>
 800969e:	f8da 3000 	ldr.w	r3, [sl]
 80096a2:	ea49 0903 	orr.w	r9, r9, r3
 80096a6:	f019 0f01 	tst.w	r9, #1
 80096aa:	d10e      	bne.n	80096ca <__gethex+0x33e>
 80096ac:	f045 0510 	orr.w	r5, r5, #16
 80096b0:	e032      	b.n	8009718 <__gethex+0x38c>
 80096b2:	f04f 0901 	mov.w	r9, #1
 80096b6:	e7d1      	b.n	800965c <__gethex+0x2d0>
 80096b8:	2501      	movs	r5, #1
 80096ba:	e7e2      	b.n	8009682 <__gethex+0x2f6>
 80096bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096be:	f1c3 0301 	rsb	r3, r3, #1
 80096c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d0f0      	beq.n	80096ac <__gethex+0x320>
 80096ca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096ce:	f104 0314 	add.w	r3, r4, #20
 80096d2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096d6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096da:	f04f 0c00 	mov.w	ip, #0
 80096de:	4618      	mov	r0, r3
 80096e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096e8:	d01b      	beq.n	8009722 <__gethex+0x396>
 80096ea:	3201      	adds	r2, #1
 80096ec:	6002      	str	r2, [r0, #0]
 80096ee:	2d02      	cmp	r5, #2
 80096f0:	f104 0314 	add.w	r3, r4, #20
 80096f4:	d13c      	bne.n	8009770 <__gethex+0x3e4>
 80096f6:	f8d8 2000 	ldr.w	r2, [r8]
 80096fa:	3a01      	subs	r2, #1
 80096fc:	42b2      	cmp	r2, r6
 80096fe:	d109      	bne.n	8009714 <__gethex+0x388>
 8009700:	1171      	asrs	r1, r6, #5
 8009702:	2201      	movs	r2, #1
 8009704:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009708:	f006 061f 	and.w	r6, r6, #31
 800970c:	fa02 f606 	lsl.w	r6, r2, r6
 8009710:	421e      	tst	r6, r3
 8009712:	d13a      	bne.n	800978a <__gethex+0x3fe>
 8009714:	f045 0520 	orr.w	r5, r5, #32
 8009718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800971a:	601c      	str	r4, [r3, #0]
 800971c:	9b02      	ldr	r3, [sp, #8]
 800971e:	601f      	str	r7, [r3, #0]
 8009720:	e6b0      	b.n	8009484 <__gethex+0xf8>
 8009722:	4299      	cmp	r1, r3
 8009724:	f843 cc04 	str.w	ip, [r3, #-4]
 8009728:	d8d9      	bhi.n	80096de <__gethex+0x352>
 800972a:	68a3      	ldr	r3, [r4, #8]
 800972c:	459b      	cmp	fp, r3
 800972e:	db17      	blt.n	8009760 <__gethex+0x3d4>
 8009730:	6861      	ldr	r1, [r4, #4]
 8009732:	9801      	ldr	r0, [sp, #4]
 8009734:	3101      	adds	r1, #1
 8009736:	f7fe f803 	bl	8007740 <_Balloc>
 800973a:	4681      	mov	r9, r0
 800973c:	b918      	cbnz	r0, 8009746 <__gethex+0x3ba>
 800973e:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <__gethex+0x41c>)
 8009740:	4602      	mov	r2, r0
 8009742:	2184      	movs	r1, #132	@ 0x84
 8009744:	e6c5      	b.n	80094d2 <__gethex+0x146>
 8009746:	6922      	ldr	r2, [r4, #16]
 8009748:	3202      	adds	r2, #2
 800974a:	f104 010c 	add.w	r1, r4, #12
 800974e:	0092      	lsls	r2, r2, #2
 8009750:	300c      	adds	r0, #12
 8009752:	f7ff fd6b 	bl	800922c <memcpy>
 8009756:	4621      	mov	r1, r4
 8009758:	9801      	ldr	r0, [sp, #4]
 800975a:	f7fe f831 	bl	80077c0 <_Bfree>
 800975e:	464c      	mov	r4, r9
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	1c5a      	adds	r2, r3, #1
 8009764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009768:	6122      	str	r2, [r4, #16]
 800976a:	2201      	movs	r2, #1
 800976c:	615a      	str	r2, [r3, #20]
 800976e:	e7be      	b.n	80096ee <__gethex+0x362>
 8009770:	6922      	ldr	r2, [r4, #16]
 8009772:	455a      	cmp	r2, fp
 8009774:	dd0b      	ble.n	800978e <__gethex+0x402>
 8009776:	2101      	movs	r1, #1
 8009778:	4620      	mov	r0, r4
 800977a:	f7ff fd9f 	bl	80092bc <rshift>
 800977e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009782:	3701      	adds	r7, #1
 8009784:	42bb      	cmp	r3, r7
 8009786:	f6ff aee0 	blt.w	800954a <__gethex+0x1be>
 800978a:	2501      	movs	r5, #1
 800978c:	e7c2      	b.n	8009714 <__gethex+0x388>
 800978e:	f016 061f 	ands.w	r6, r6, #31
 8009792:	d0fa      	beq.n	800978a <__gethex+0x3fe>
 8009794:	4453      	add	r3, sl
 8009796:	f1c6 0620 	rsb	r6, r6, #32
 800979a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800979e:	f7fe f8c1 	bl	8007924 <__hi0bits>
 80097a2:	42b0      	cmp	r0, r6
 80097a4:	dbe7      	blt.n	8009776 <__gethex+0x3ea>
 80097a6:	e7f0      	b.n	800978a <__gethex+0x3fe>
 80097a8:	0800a069 	.word	0x0800a069

080097ac <L_shift>:
 80097ac:	f1c2 0208 	rsb	r2, r2, #8
 80097b0:	0092      	lsls	r2, r2, #2
 80097b2:	b570      	push	{r4, r5, r6, lr}
 80097b4:	f1c2 0620 	rsb	r6, r2, #32
 80097b8:	6843      	ldr	r3, [r0, #4]
 80097ba:	6804      	ldr	r4, [r0, #0]
 80097bc:	fa03 f506 	lsl.w	r5, r3, r6
 80097c0:	432c      	orrs	r4, r5
 80097c2:	40d3      	lsrs	r3, r2
 80097c4:	6004      	str	r4, [r0, #0]
 80097c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80097ca:	4288      	cmp	r0, r1
 80097cc:	d3f4      	bcc.n	80097b8 <L_shift+0xc>
 80097ce:	bd70      	pop	{r4, r5, r6, pc}

080097d0 <__match>:
 80097d0:	b530      	push	{r4, r5, lr}
 80097d2:	6803      	ldr	r3, [r0, #0]
 80097d4:	3301      	adds	r3, #1
 80097d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097da:	b914      	cbnz	r4, 80097e2 <__match+0x12>
 80097dc:	6003      	str	r3, [r0, #0]
 80097de:	2001      	movs	r0, #1
 80097e0:	bd30      	pop	{r4, r5, pc}
 80097e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80097ea:	2d19      	cmp	r5, #25
 80097ec:	bf98      	it	ls
 80097ee:	3220      	addls	r2, #32
 80097f0:	42a2      	cmp	r2, r4
 80097f2:	d0f0      	beq.n	80097d6 <__match+0x6>
 80097f4:	2000      	movs	r0, #0
 80097f6:	e7f3      	b.n	80097e0 <__match+0x10>

080097f8 <__hexnan>:
 80097f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	680b      	ldr	r3, [r1, #0]
 80097fe:	6801      	ldr	r1, [r0, #0]
 8009800:	115e      	asrs	r6, r3, #5
 8009802:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009806:	f013 031f 	ands.w	r3, r3, #31
 800980a:	b087      	sub	sp, #28
 800980c:	bf18      	it	ne
 800980e:	3604      	addne	r6, #4
 8009810:	2500      	movs	r5, #0
 8009812:	1f37      	subs	r7, r6, #4
 8009814:	4682      	mov	sl, r0
 8009816:	4690      	mov	r8, r2
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	f846 5c04 	str.w	r5, [r6, #-4]
 800981e:	46b9      	mov	r9, r7
 8009820:	463c      	mov	r4, r7
 8009822:	9502      	str	r5, [sp, #8]
 8009824:	46ab      	mov	fp, r5
 8009826:	784a      	ldrb	r2, [r1, #1]
 8009828:	1c4b      	adds	r3, r1, #1
 800982a:	9303      	str	r3, [sp, #12]
 800982c:	b342      	cbz	r2, 8009880 <__hexnan+0x88>
 800982e:	4610      	mov	r0, r2
 8009830:	9105      	str	r1, [sp, #20]
 8009832:	9204      	str	r2, [sp, #16]
 8009834:	f7ff fd94 	bl	8009360 <__hexdig_fun>
 8009838:	2800      	cmp	r0, #0
 800983a:	d151      	bne.n	80098e0 <__hexnan+0xe8>
 800983c:	9a04      	ldr	r2, [sp, #16]
 800983e:	9905      	ldr	r1, [sp, #20]
 8009840:	2a20      	cmp	r2, #32
 8009842:	d818      	bhi.n	8009876 <__hexnan+0x7e>
 8009844:	9b02      	ldr	r3, [sp, #8]
 8009846:	459b      	cmp	fp, r3
 8009848:	dd13      	ble.n	8009872 <__hexnan+0x7a>
 800984a:	454c      	cmp	r4, r9
 800984c:	d206      	bcs.n	800985c <__hexnan+0x64>
 800984e:	2d07      	cmp	r5, #7
 8009850:	dc04      	bgt.n	800985c <__hexnan+0x64>
 8009852:	462a      	mov	r2, r5
 8009854:	4649      	mov	r1, r9
 8009856:	4620      	mov	r0, r4
 8009858:	f7ff ffa8 	bl	80097ac <L_shift>
 800985c:	4544      	cmp	r4, r8
 800985e:	d952      	bls.n	8009906 <__hexnan+0x10e>
 8009860:	2300      	movs	r3, #0
 8009862:	f1a4 0904 	sub.w	r9, r4, #4
 8009866:	f844 3c04 	str.w	r3, [r4, #-4]
 800986a:	f8cd b008 	str.w	fp, [sp, #8]
 800986e:	464c      	mov	r4, r9
 8009870:	461d      	mov	r5, r3
 8009872:	9903      	ldr	r1, [sp, #12]
 8009874:	e7d7      	b.n	8009826 <__hexnan+0x2e>
 8009876:	2a29      	cmp	r2, #41	@ 0x29
 8009878:	d157      	bne.n	800992a <__hexnan+0x132>
 800987a:	3102      	adds	r1, #2
 800987c:	f8ca 1000 	str.w	r1, [sl]
 8009880:	f1bb 0f00 	cmp.w	fp, #0
 8009884:	d051      	beq.n	800992a <__hexnan+0x132>
 8009886:	454c      	cmp	r4, r9
 8009888:	d206      	bcs.n	8009898 <__hexnan+0xa0>
 800988a:	2d07      	cmp	r5, #7
 800988c:	dc04      	bgt.n	8009898 <__hexnan+0xa0>
 800988e:	462a      	mov	r2, r5
 8009890:	4649      	mov	r1, r9
 8009892:	4620      	mov	r0, r4
 8009894:	f7ff ff8a 	bl	80097ac <L_shift>
 8009898:	4544      	cmp	r4, r8
 800989a:	d936      	bls.n	800990a <__hexnan+0x112>
 800989c:	f1a8 0204 	sub.w	r2, r8, #4
 80098a0:	4623      	mov	r3, r4
 80098a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80098a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80098aa:	429f      	cmp	r7, r3
 80098ac:	d2f9      	bcs.n	80098a2 <__hexnan+0xaa>
 80098ae:	1b3b      	subs	r3, r7, r4
 80098b0:	f023 0303 	bic.w	r3, r3, #3
 80098b4:	3304      	adds	r3, #4
 80098b6:	3401      	adds	r4, #1
 80098b8:	3e03      	subs	r6, #3
 80098ba:	42b4      	cmp	r4, r6
 80098bc:	bf88      	it	hi
 80098be:	2304      	movhi	r3, #4
 80098c0:	4443      	add	r3, r8
 80098c2:	2200      	movs	r2, #0
 80098c4:	f843 2b04 	str.w	r2, [r3], #4
 80098c8:	429f      	cmp	r7, r3
 80098ca:	d2fb      	bcs.n	80098c4 <__hexnan+0xcc>
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	b91b      	cbnz	r3, 80098d8 <__hexnan+0xe0>
 80098d0:	4547      	cmp	r7, r8
 80098d2:	d128      	bne.n	8009926 <__hexnan+0x12e>
 80098d4:	2301      	movs	r3, #1
 80098d6:	603b      	str	r3, [r7, #0]
 80098d8:	2005      	movs	r0, #5
 80098da:	b007      	add	sp, #28
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	3501      	adds	r5, #1
 80098e2:	2d08      	cmp	r5, #8
 80098e4:	f10b 0b01 	add.w	fp, fp, #1
 80098e8:	dd06      	ble.n	80098f8 <__hexnan+0x100>
 80098ea:	4544      	cmp	r4, r8
 80098ec:	d9c1      	bls.n	8009872 <__hexnan+0x7a>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80098f4:	2501      	movs	r5, #1
 80098f6:	3c04      	subs	r4, #4
 80098f8:	6822      	ldr	r2, [r4, #0]
 80098fa:	f000 000f 	and.w	r0, r0, #15
 80098fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009902:	6020      	str	r0, [r4, #0]
 8009904:	e7b5      	b.n	8009872 <__hexnan+0x7a>
 8009906:	2508      	movs	r5, #8
 8009908:	e7b3      	b.n	8009872 <__hexnan+0x7a>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d0dd      	beq.n	80098cc <__hexnan+0xd4>
 8009910:	f1c3 0320 	rsb	r3, r3, #32
 8009914:	f04f 32ff 	mov.w	r2, #4294967295
 8009918:	40da      	lsrs	r2, r3
 800991a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800991e:	4013      	ands	r3, r2
 8009920:	f846 3c04 	str.w	r3, [r6, #-4]
 8009924:	e7d2      	b.n	80098cc <__hexnan+0xd4>
 8009926:	3f04      	subs	r7, #4
 8009928:	e7d0      	b.n	80098cc <__hexnan+0xd4>
 800992a:	2004      	movs	r0, #4
 800992c:	e7d5      	b.n	80098da <__hexnan+0xe2>

0800992e <__ascii_mbtowc>:
 800992e:	b082      	sub	sp, #8
 8009930:	b901      	cbnz	r1, 8009934 <__ascii_mbtowc+0x6>
 8009932:	a901      	add	r1, sp, #4
 8009934:	b142      	cbz	r2, 8009948 <__ascii_mbtowc+0x1a>
 8009936:	b14b      	cbz	r3, 800994c <__ascii_mbtowc+0x1e>
 8009938:	7813      	ldrb	r3, [r2, #0]
 800993a:	600b      	str	r3, [r1, #0]
 800993c:	7812      	ldrb	r2, [r2, #0]
 800993e:	1e10      	subs	r0, r2, #0
 8009940:	bf18      	it	ne
 8009942:	2001      	movne	r0, #1
 8009944:	b002      	add	sp, #8
 8009946:	4770      	bx	lr
 8009948:	4610      	mov	r0, r2
 800994a:	e7fb      	b.n	8009944 <__ascii_mbtowc+0x16>
 800994c:	f06f 0001 	mvn.w	r0, #1
 8009950:	e7f8      	b.n	8009944 <__ascii_mbtowc+0x16>

08009952 <_realloc_r>:
 8009952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009956:	4680      	mov	r8, r0
 8009958:	4615      	mov	r5, r2
 800995a:	460c      	mov	r4, r1
 800995c:	b921      	cbnz	r1, 8009968 <_realloc_r+0x16>
 800995e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009962:	4611      	mov	r1, r2
 8009964:	f7fd be60 	b.w	8007628 <_malloc_r>
 8009968:	b92a      	cbnz	r2, 8009976 <_realloc_r+0x24>
 800996a:	f7fd fde9 	bl	8007540 <_free_r>
 800996e:	2400      	movs	r4, #0
 8009970:	4620      	mov	r0, r4
 8009972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009976:	f000 f840 	bl	80099fa <_malloc_usable_size_r>
 800997a:	4285      	cmp	r5, r0
 800997c:	4606      	mov	r6, r0
 800997e:	d802      	bhi.n	8009986 <_realloc_r+0x34>
 8009980:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009984:	d8f4      	bhi.n	8009970 <_realloc_r+0x1e>
 8009986:	4629      	mov	r1, r5
 8009988:	4640      	mov	r0, r8
 800998a:	f7fd fe4d 	bl	8007628 <_malloc_r>
 800998e:	4607      	mov	r7, r0
 8009990:	2800      	cmp	r0, #0
 8009992:	d0ec      	beq.n	800996e <_realloc_r+0x1c>
 8009994:	42b5      	cmp	r5, r6
 8009996:	462a      	mov	r2, r5
 8009998:	4621      	mov	r1, r4
 800999a:	bf28      	it	cs
 800999c:	4632      	movcs	r2, r6
 800999e:	f7ff fc45 	bl	800922c <memcpy>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4640      	mov	r0, r8
 80099a6:	f7fd fdcb 	bl	8007540 <_free_r>
 80099aa:	463c      	mov	r4, r7
 80099ac:	e7e0      	b.n	8009970 <_realloc_r+0x1e>

080099ae <__ascii_wctomb>:
 80099ae:	4603      	mov	r3, r0
 80099b0:	4608      	mov	r0, r1
 80099b2:	b141      	cbz	r1, 80099c6 <__ascii_wctomb+0x18>
 80099b4:	2aff      	cmp	r2, #255	@ 0xff
 80099b6:	d904      	bls.n	80099c2 <__ascii_wctomb+0x14>
 80099b8:	228a      	movs	r2, #138	@ 0x8a
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	4770      	bx	lr
 80099c2:	700a      	strb	r2, [r1, #0]
 80099c4:	2001      	movs	r0, #1
 80099c6:	4770      	bx	lr

080099c8 <fiprintf>:
 80099c8:	b40e      	push	{r1, r2, r3}
 80099ca:	b503      	push	{r0, r1, lr}
 80099cc:	4601      	mov	r1, r0
 80099ce:	ab03      	add	r3, sp, #12
 80099d0:	4805      	ldr	r0, [pc, #20]	@ (80099e8 <fiprintf+0x20>)
 80099d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d6:	6800      	ldr	r0, [r0, #0]
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	f000 f83f 	bl	8009a5c <_vfiprintf_r>
 80099de:	b002      	add	sp, #8
 80099e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80099e4:	b003      	add	sp, #12
 80099e6:	4770      	bx	lr
 80099e8:	20000040 	.word	0x20000040

080099ec <abort>:
 80099ec:	b508      	push	{r3, lr}
 80099ee:	2006      	movs	r0, #6
 80099f0:	f000 fa08 	bl	8009e04 <raise>
 80099f4:	2001      	movs	r0, #1
 80099f6:	f7f8 f9cb 	bl	8001d90 <_exit>

080099fa <_malloc_usable_size_r>:
 80099fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fe:	1f18      	subs	r0, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	bfbc      	itt	lt
 8009a04:	580b      	ldrlt	r3, [r1, r0]
 8009a06:	18c0      	addlt	r0, r0, r3
 8009a08:	4770      	bx	lr

08009a0a <__sfputc_r>:
 8009a0a:	6893      	ldr	r3, [r2, #8]
 8009a0c:	3b01      	subs	r3, #1
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	b410      	push	{r4}
 8009a12:	6093      	str	r3, [r2, #8]
 8009a14:	da08      	bge.n	8009a28 <__sfputc_r+0x1e>
 8009a16:	6994      	ldr	r4, [r2, #24]
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	db01      	blt.n	8009a20 <__sfputc_r+0x16>
 8009a1c:	290a      	cmp	r1, #10
 8009a1e:	d103      	bne.n	8009a28 <__sfputc_r+0x1e>
 8009a20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a24:	f000 b932 	b.w	8009c8c <__swbuf_r>
 8009a28:	6813      	ldr	r3, [r2, #0]
 8009a2a:	1c58      	adds	r0, r3, #1
 8009a2c:	6010      	str	r0, [r2, #0]
 8009a2e:	7019      	strb	r1, [r3, #0]
 8009a30:	4608      	mov	r0, r1
 8009a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <__sfputs_r>:
 8009a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3a:	4606      	mov	r6, r0
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	4614      	mov	r4, r2
 8009a40:	18d5      	adds	r5, r2, r3
 8009a42:	42ac      	cmp	r4, r5
 8009a44:	d101      	bne.n	8009a4a <__sfputs_r+0x12>
 8009a46:	2000      	movs	r0, #0
 8009a48:	e007      	b.n	8009a5a <__sfputs_r+0x22>
 8009a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4e:	463a      	mov	r2, r7
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff ffda 	bl	8009a0a <__sfputc_r>
 8009a56:	1c43      	adds	r3, r0, #1
 8009a58:	d1f3      	bne.n	8009a42 <__sfputs_r+0xa>
 8009a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a5c <_vfiprintf_r>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	460d      	mov	r5, r1
 8009a62:	b09d      	sub	sp, #116	@ 0x74
 8009a64:	4614      	mov	r4, r2
 8009a66:	4698      	mov	r8, r3
 8009a68:	4606      	mov	r6, r0
 8009a6a:	b118      	cbz	r0, 8009a74 <_vfiprintf_r+0x18>
 8009a6c:	6a03      	ldr	r3, [r0, #32]
 8009a6e:	b90b      	cbnz	r3, 8009a74 <_vfiprintf_r+0x18>
 8009a70:	f7fc fdc6 	bl	8006600 <__sinit>
 8009a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	d405      	bmi.n	8009a86 <_vfiprintf_r+0x2a>
 8009a7a:	89ab      	ldrh	r3, [r5, #12]
 8009a7c:	059a      	lsls	r2, r3, #22
 8009a7e:	d402      	bmi.n	8009a86 <_vfiprintf_r+0x2a>
 8009a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a82:	f7fc ff08 	bl	8006896 <__retarget_lock_acquire_recursive>
 8009a86:	89ab      	ldrh	r3, [r5, #12]
 8009a88:	071b      	lsls	r3, r3, #28
 8009a8a:	d501      	bpl.n	8009a90 <_vfiprintf_r+0x34>
 8009a8c:	692b      	ldr	r3, [r5, #16]
 8009a8e:	b99b      	cbnz	r3, 8009ab8 <_vfiprintf_r+0x5c>
 8009a90:	4629      	mov	r1, r5
 8009a92:	4630      	mov	r0, r6
 8009a94:	f000 f938 	bl	8009d08 <__swsetup_r>
 8009a98:	b170      	cbz	r0, 8009ab8 <_vfiprintf_r+0x5c>
 8009a9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a9c:	07dc      	lsls	r4, r3, #31
 8009a9e:	d504      	bpl.n	8009aaa <_vfiprintf_r+0x4e>
 8009aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa4:	b01d      	add	sp, #116	@ 0x74
 8009aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aaa:	89ab      	ldrh	r3, [r5, #12]
 8009aac:	0598      	lsls	r0, r3, #22
 8009aae:	d4f7      	bmi.n	8009aa0 <_vfiprintf_r+0x44>
 8009ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ab2:	f7fc fef1 	bl	8006898 <__retarget_lock_release_recursive>
 8009ab6:	e7f3      	b.n	8009aa0 <_vfiprintf_r+0x44>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8009abc:	2320      	movs	r3, #32
 8009abe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ac6:	2330      	movs	r3, #48	@ 0x30
 8009ac8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c78 <_vfiprintf_r+0x21c>
 8009acc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ad0:	f04f 0901 	mov.w	r9, #1
 8009ad4:	4623      	mov	r3, r4
 8009ad6:	469a      	mov	sl, r3
 8009ad8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009adc:	b10a      	cbz	r2, 8009ae2 <_vfiprintf_r+0x86>
 8009ade:	2a25      	cmp	r2, #37	@ 0x25
 8009ae0:	d1f9      	bne.n	8009ad6 <_vfiprintf_r+0x7a>
 8009ae2:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae6:	d00b      	beq.n	8009b00 <_vfiprintf_r+0xa4>
 8009ae8:	465b      	mov	r3, fp
 8009aea:	4622      	mov	r2, r4
 8009aec:	4629      	mov	r1, r5
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7ff ffa2 	bl	8009a38 <__sfputs_r>
 8009af4:	3001      	adds	r0, #1
 8009af6:	f000 80a7 	beq.w	8009c48 <_vfiprintf_r+0x1ec>
 8009afa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009afc:	445a      	add	r2, fp
 8009afe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b00:	f89a 3000 	ldrb.w	r3, [sl]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 809f 	beq.w	8009c48 <_vfiprintf_r+0x1ec>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b14:	f10a 0a01 	add.w	sl, sl, #1
 8009b18:	9304      	str	r3, [sp, #16]
 8009b1a:	9307      	str	r3, [sp, #28]
 8009b1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b20:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b22:	4654      	mov	r4, sl
 8009b24:	2205      	movs	r2, #5
 8009b26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2a:	4853      	ldr	r0, [pc, #332]	@ (8009c78 <_vfiprintf_r+0x21c>)
 8009b2c:	f7f6 fb58 	bl	80001e0 <memchr>
 8009b30:	9a04      	ldr	r2, [sp, #16]
 8009b32:	b9d8      	cbnz	r0, 8009b6c <_vfiprintf_r+0x110>
 8009b34:	06d1      	lsls	r1, r2, #27
 8009b36:	bf44      	itt	mi
 8009b38:	2320      	movmi	r3, #32
 8009b3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b3e:	0713      	lsls	r3, r2, #28
 8009b40:	bf44      	itt	mi
 8009b42:	232b      	movmi	r3, #43	@ 0x2b
 8009b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b48:	f89a 3000 	ldrb.w	r3, [sl]
 8009b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b4e:	d015      	beq.n	8009b7c <_vfiprintf_r+0x120>
 8009b50:	9a07      	ldr	r2, [sp, #28]
 8009b52:	4654      	mov	r4, sl
 8009b54:	2000      	movs	r0, #0
 8009b56:	f04f 0c0a 	mov.w	ip, #10
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b60:	3b30      	subs	r3, #48	@ 0x30
 8009b62:	2b09      	cmp	r3, #9
 8009b64:	d94b      	bls.n	8009bfe <_vfiprintf_r+0x1a2>
 8009b66:	b1b0      	cbz	r0, 8009b96 <_vfiprintf_r+0x13a>
 8009b68:	9207      	str	r2, [sp, #28]
 8009b6a:	e014      	b.n	8009b96 <_vfiprintf_r+0x13a>
 8009b6c:	eba0 0308 	sub.w	r3, r0, r8
 8009b70:	fa09 f303 	lsl.w	r3, r9, r3
 8009b74:	4313      	orrs	r3, r2
 8009b76:	9304      	str	r3, [sp, #16]
 8009b78:	46a2      	mov	sl, r4
 8009b7a:	e7d2      	b.n	8009b22 <_vfiprintf_r+0xc6>
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	1d19      	adds	r1, r3, #4
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	9103      	str	r1, [sp, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	bfbb      	ittet	lt
 8009b88:	425b      	neglt	r3, r3
 8009b8a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b8e:	9307      	strge	r3, [sp, #28]
 8009b90:	9307      	strlt	r3, [sp, #28]
 8009b92:	bfb8      	it	lt
 8009b94:	9204      	strlt	r2, [sp, #16]
 8009b96:	7823      	ldrb	r3, [r4, #0]
 8009b98:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b9a:	d10a      	bne.n	8009bb2 <_vfiprintf_r+0x156>
 8009b9c:	7863      	ldrb	r3, [r4, #1]
 8009b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba0:	d132      	bne.n	8009c08 <_vfiprintf_r+0x1ac>
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	1d1a      	adds	r2, r3, #4
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	9203      	str	r2, [sp, #12]
 8009baa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bae:	3402      	adds	r4, #2
 8009bb0:	9305      	str	r3, [sp, #20]
 8009bb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c88 <_vfiprintf_r+0x22c>
 8009bb6:	7821      	ldrb	r1, [r4, #0]
 8009bb8:	2203      	movs	r2, #3
 8009bba:	4650      	mov	r0, sl
 8009bbc:	f7f6 fb10 	bl	80001e0 <memchr>
 8009bc0:	b138      	cbz	r0, 8009bd2 <_vfiprintf_r+0x176>
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	eba0 000a 	sub.w	r0, r0, sl
 8009bc8:	2240      	movs	r2, #64	@ 0x40
 8009bca:	4082      	lsls	r2, r0
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	3401      	adds	r4, #1
 8009bd0:	9304      	str	r3, [sp, #16]
 8009bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd6:	4829      	ldr	r0, [pc, #164]	@ (8009c7c <_vfiprintf_r+0x220>)
 8009bd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bdc:	2206      	movs	r2, #6
 8009bde:	f7f6 faff 	bl	80001e0 <memchr>
 8009be2:	2800      	cmp	r0, #0
 8009be4:	d03f      	beq.n	8009c66 <_vfiprintf_r+0x20a>
 8009be6:	4b26      	ldr	r3, [pc, #152]	@ (8009c80 <_vfiprintf_r+0x224>)
 8009be8:	bb1b      	cbnz	r3, 8009c32 <_vfiprintf_r+0x1d6>
 8009bea:	9b03      	ldr	r3, [sp, #12]
 8009bec:	3307      	adds	r3, #7
 8009bee:	f023 0307 	bic.w	r3, r3, #7
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	9303      	str	r3, [sp, #12]
 8009bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bf8:	443b      	add	r3, r7
 8009bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfc:	e76a      	b.n	8009ad4 <_vfiprintf_r+0x78>
 8009bfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c02:	460c      	mov	r4, r1
 8009c04:	2001      	movs	r0, #1
 8009c06:	e7a8      	b.n	8009b5a <_vfiprintf_r+0xfe>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	3401      	adds	r4, #1
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	f04f 0c0a 	mov.w	ip, #10
 8009c14:	4620      	mov	r0, r4
 8009c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1a:	3a30      	subs	r2, #48	@ 0x30
 8009c1c:	2a09      	cmp	r2, #9
 8009c1e:	d903      	bls.n	8009c28 <_vfiprintf_r+0x1cc>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d0c6      	beq.n	8009bb2 <_vfiprintf_r+0x156>
 8009c24:	9105      	str	r1, [sp, #20]
 8009c26:	e7c4      	b.n	8009bb2 <_vfiprintf_r+0x156>
 8009c28:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c2c:	4604      	mov	r4, r0
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e7f0      	b.n	8009c14 <_vfiprintf_r+0x1b8>
 8009c32:	ab03      	add	r3, sp, #12
 8009c34:	9300      	str	r3, [sp, #0]
 8009c36:	462a      	mov	r2, r5
 8009c38:	4b12      	ldr	r3, [pc, #72]	@ (8009c84 <_vfiprintf_r+0x228>)
 8009c3a:	a904      	add	r1, sp, #16
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	f7fb fe87 	bl	8005950 <_printf_float>
 8009c42:	4607      	mov	r7, r0
 8009c44:	1c78      	adds	r0, r7, #1
 8009c46:	d1d6      	bne.n	8009bf6 <_vfiprintf_r+0x19a>
 8009c48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c4a:	07d9      	lsls	r1, r3, #31
 8009c4c:	d405      	bmi.n	8009c5a <_vfiprintf_r+0x1fe>
 8009c4e:	89ab      	ldrh	r3, [r5, #12]
 8009c50:	059a      	lsls	r2, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <_vfiprintf_r+0x1fe>
 8009c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c56:	f7fc fe1f 	bl	8006898 <__retarget_lock_release_recursive>
 8009c5a:	89ab      	ldrh	r3, [r5, #12]
 8009c5c:	065b      	lsls	r3, r3, #25
 8009c5e:	f53f af1f 	bmi.w	8009aa0 <_vfiprintf_r+0x44>
 8009c62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c64:	e71e      	b.n	8009aa4 <_vfiprintf_r+0x48>
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b05      	ldr	r3, [pc, #20]	@ (8009c84 <_vfiprintf_r+0x228>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7fc f905 	bl	8005e80 <_printf_i>
 8009c76:	e7e4      	b.n	8009c42 <_vfiprintf_r+0x1e6>
 8009c78:	0800a329 	.word	0x0800a329
 8009c7c:	0800a333 	.word	0x0800a333
 8009c80:	08005951 	.word	0x08005951
 8009c84:	08009a39 	.word	0x08009a39
 8009c88:	0800a32f 	.word	0x0800a32f

08009c8c <__swbuf_r>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	460e      	mov	r6, r1
 8009c90:	4614      	mov	r4, r2
 8009c92:	4605      	mov	r5, r0
 8009c94:	b118      	cbz	r0, 8009c9e <__swbuf_r+0x12>
 8009c96:	6a03      	ldr	r3, [r0, #32]
 8009c98:	b90b      	cbnz	r3, 8009c9e <__swbuf_r+0x12>
 8009c9a:	f7fc fcb1 	bl	8006600 <__sinit>
 8009c9e:	69a3      	ldr	r3, [r4, #24]
 8009ca0:	60a3      	str	r3, [r4, #8]
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	071a      	lsls	r2, r3, #28
 8009ca6:	d501      	bpl.n	8009cac <__swbuf_r+0x20>
 8009ca8:	6923      	ldr	r3, [r4, #16]
 8009caa:	b943      	cbnz	r3, 8009cbe <__swbuf_r+0x32>
 8009cac:	4621      	mov	r1, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f82a 	bl	8009d08 <__swsetup_r>
 8009cb4:	b118      	cbz	r0, 8009cbe <__swbuf_r+0x32>
 8009cb6:	f04f 37ff 	mov.w	r7, #4294967295
 8009cba:	4638      	mov	r0, r7
 8009cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	6922      	ldr	r2, [r4, #16]
 8009cc2:	1a98      	subs	r0, r3, r2
 8009cc4:	6963      	ldr	r3, [r4, #20]
 8009cc6:	b2f6      	uxtb	r6, r6
 8009cc8:	4283      	cmp	r3, r0
 8009cca:	4637      	mov	r7, r6
 8009ccc:	dc05      	bgt.n	8009cda <__swbuf_r+0x4e>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7ff fa47 	bl	8009164 <_fflush_r>
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d1ed      	bne.n	8009cb6 <__swbuf_r+0x2a>
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	60a3      	str	r3, [r4, #8]
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	6022      	str	r2, [r4, #0]
 8009ce6:	701e      	strb	r6, [r3, #0]
 8009ce8:	6962      	ldr	r2, [r4, #20]
 8009cea:	1c43      	adds	r3, r0, #1
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d004      	beq.n	8009cfa <__swbuf_r+0x6e>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	07db      	lsls	r3, r3, #31
 8009cf4:	d5e1      	bpl.n	8009cba <__swbuf_r+0x2e>
 8009cf6:	2e0a      	cmp	r6, #10
 8009cf8:	d1df      	bne.n	8009cba <__swbuf_r+0x2e>
 8009cfa:	4621      	mov	r1, r4
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f7ff fa31 	bl	8009164 <_fflush_r>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d0d9      	beq.n	8009cba <__swbuf_r+0x2e>
 8009d06:	e7d6      	b.n	8009cb6 <__swbuf_r+0x2a>

08009d08 <__swsetup_r>:
 8009d08:	b538      	push	{r3, r4, r5, lr}
 8009d0a:	4b29      	ldr	r3, [pc, #164]	@ (8009db0 <__swsetup_r+0xa8>)
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	6818      	ldr	r0, [r3, #0]
 8009d10:	460c      	mov	r4, r1
 8009d12:	b118      	cbz	r0, 8009d1c <__swsetup_r+0x14>
 8009d14:	6a03      	ldr	r3, [r0, #32]
 8009d16:	b90b      	cbnz	r3, 8009d1c <__swsetup_r+0x14>
 8009d18:	f7fc fc72 	bl	8006600 <__sinit>
 8009d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d20:	0719      	lsls	r1, r3, #28
 8009d22:	d422      	bmi.n	8009d6a <__swsetup_r+0x62>
 8009d24:	06da      	lsls	r2, r3, #27
 8009d26:	d407      	bmi.n	8009d38 <__swsetup_r+0x30>
 8009d28:	2209      	movs	r2, #9
 8009d2a:	602a      	str	r2, [r5, #0]
 8009d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d30:	81a3      	strh	r3, [r4, #12]
 8009d32:	f04f 30ff 	mov.w	r0, #4294967295
 8009d36:	e033      	b.n	8009da0 <__swsetup_r+0x98>
 8009d38:	0758      	lsls	r0, r3, #29
 8009d3a:	d512      	bpl.n	8009d62 <__swsetup_r+0x5a>
 8009d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d3e:	b141      	cbz	r1, 8009d52 <__swsetup_r+0x4a>
 8009d40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d44:	4299      	cmp	r1, r3
 8009d46:	d002      	beq.n	8009d4e <__swsetup_r+0x46>
 8009d48:	4628      	mov	r0, r5
 8009d4a:	f7fd fbf9 	bl	8007540 <_free_r>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d52:	89a3      	ldrh	r3, [r4, #12]
 8009d54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d58:	81a3      	strh	r3, [r4, #12]
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	6063      	str	r3, [r4, #4]
 8009d5e:	6923      	ldr	r3, [r4, #16]
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f043 0308 	orr.w	r3, r3, #8
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	6923      	ldr	r3, [r4, #16]
 8009d6c:	b94b      	cbnz	r3, 8009d82 <__swsetup_r+0x7a>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d78:	d003      	beq.n	8009d82 <__swsetup_r+0x7a>
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	f000 f883 	bl	8009e88 <__smakebuf_r>
 8009d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d86:	f013 0201 	ands.w	r2, r3, #1
 8009d8a:	d00a      	beq.n	8009da2 <__swsetup_r+0x9a>
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	60a2      	str	r2, [r4, #8]
 8009d90:	6962      	ldr	r2, [r4, #20]
 8009d92:	4252      	negs	r2, r2
 8009d94:	61a2      	str	r2, [r4, #24]
 8009d96:	6922      	ldr	r2, [r4, #16]
 8009d98:	b942      	cbnz	r2, 8009dac <__swsetup_r+0xa4>
 8009d9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d9e:	d1c5      	bne.n	8009d2c <__swsetup_r+0x24>
 8009da0:	bd38      	pop	{r3, r4, r5, pc}
 8009da2:	0799      	lsls	r1, r3, #30
 8009da4:	bf58      	it	pl
 8009da6:	6962      	ldrpl	r2, [r4, #20]
 8009da8:	60a2      	str	r2, [r4, #8]
 8009daa:	e7f4      	b.n	8009d96 <__swsetup_r+0x8e>
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7f7      	b.n	8009da0 <__swsetup_r+0x98>
 8009db0:	20000040 	.word	0x20000040

08009db4 <_raise_r>:
 8009db4:	291f      	cmp	r1, #31
 8009db6:	b538      	push	{r3, r4, r5, lr}
 8009db8:	4605      	mov	r5, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	d904      	bls.n	8009dc8 <_raise_r+0x14>
 8009dbe:	2316      	movs	r3, #22
 8009dc0:	6003      	str	r3, [r0, #0]
 8009dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc6:	bd38      	pop	{r3, r4, r5, pc}
 8009dc8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009dca:	b112      	cbz	r2, 8009dd2 <_raise_r+0x1e>
 8009dcc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dd0:	b94b      	cbnz	r3, 8009de6 <_raise_r+0x32>
 8009dd2:	4628      	mov	r0, r5
 8009dd4:	f000 f830 	bl	8009e38 <_getpid_r>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4601      	mov	r1, r0
 8009ddc:	4628      	mov	r0, r5
 8009dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009de2:	f000 b817 	b.w	8009e14 <_kill_r>
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d00a      	beq.n	8009e00 <_raise_r+0x4c>
 8009dea:	1c59      	adds	r1, r3, #1
 8009dec:	d103      	bne.n	8009df6 <_raise_r+0x42>
 8009dee:	2316      	movs	r3, #22
 8009df0:	6003      	str	r3, [r0, #0]
 8009df2:	2001      	movs	r0, #1
 8009df4:	e7e7      	b.n	8009dc6 <_raise_r+0x12>
 8009df6:	2100      	movs	r1, #0
 8009df8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	4798      	blx	r3
 8009e00:	2000      	movs	r0, #0
 8009e02:	e7e0      	b.n	8009dc6 <_raise_r+0x12>

08009e04 <raise>:
 8009e04:	4b02      	ldr	r3, [pc, #8]	@ (8009e10 <raise+0xc>)
 8009e06:	4601      	mov	r1, r0
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	f7ff bfd3 	b.w	8009db4 <_raise_r>
 8009e0e:	bf00      	nop
 8009e10:	20000040 	.word	0x20000040

08009e14 <_kill_r>:
 8009e14:	b538      	push	{r3, r4, r5, lr}
 8009e16:	4d07      	ldr	r5, [pc, #28]	@ (8009e34 <_kill_r+0x20>)
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4608      	mov	r0, r1
 8009e1e:	4611      	mov	r1, r2
 8009e20:	602b      	str	r3, [r5, #0]
 8009e22:	f7f7 ffa5 	bl	8001d70 <_kill>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	d102      	bne.n	8009e30 <_kill_r+0x1c>
 8009e2a:	682b      	ldr	r3, [r5, #0]
 8009e2c:	b103      	cbz	r3, 8009e30 <_kill_r+0x1c>
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	bd38      	pop	{r3, r4, r5, pc}
 8009e32:	bf00      	nop
 8009e34:	2000059c 	.word	0x2000059c

08009e38 <_getpid_r>:
 8009e38:	f7f7 bf92 	b.w	8001d60 <_getpid>

08009e3c <__swhatbuf_r>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	460c      	mov	r4, r1
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	2900      	cmp	r1, #0
 8009e46:	b096      	sub	sp, #88	@ 0x58
 8009e48:	4615      	mov	r5, r2
 8009e4a:	461e      	mov	r6, r3
 8009e4c:	da0d      	bge.n	8009e6a <__swhatbuf_r+0x2e>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e54:	f04f 0100 	mov.w	r1, #0
 8009e58:	bf14      	ite	ne
 8009e5a:	2340      	movne	r3, #64	@ 0x40
 8009e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e60:	2000      	movs	r0, #0
 8009e62:	6031      	str	r1, [r6, #0]
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	b016      	add	sp, #88	@ 0x58
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	466a      	mov	r2, sp
 8009e6c:	f000 f848 	bl	8009f00 <_fstat_r>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dbec      	blt.n	8009e4e <__swhatbuf_r+0x12>
 8009e74:	9901      	ldr	r1, [sp, #4]
 8009e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e7e:	4259      	negs	r1, r3
 8009e80:	4159      	adcs	r1, r3
 8009e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e86:	e7eb      	b.n	8009e60 <__swhatbuf_r+0x24>

08009e88 <__smakebuf_r>:
 8009e88:	898b      	ldrh	r3, [r1, #12]
 8009e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e8c:	079d      	lsls	r5, r3, #30
 8009e8e:	4606      	mov	r6, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	d507      	bpl.n	8009ea4 <__smakebuf_r+0x1c>
 8009e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	b003      	add	sp, #12
 8009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea4:	ab01      	add	r3, sp, #4
 8009ea6:	466a      	mov	r2, sp
 8009ea8:	f7ff ffc8 	bl	8009e3c <__swhatbuf_r>
 8009eac:	9f00      	ldr	r7, [sp, #0]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7fd fbb8 	bl	8007628 <_malloc_r>
 8009eb8:	b948      	cbnz	r0, 8009ece <__smakebuf_r+0x46>
 8009eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ebe:	059a      	lsls	r2, r3, #22
 8009ec0:	d4ee      	bmi.n	8009ea0 <__smakebuf_r+0x18>
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	f043 0302 	orr.w	r3, r3, #2
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	e7e2      	b.n	8009e94 <__smakebuf_r+0xc>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	6020      	str	r0, [r4, #0]
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ede:	b15b      	cbz	r3, 8009ef8 <__smakebuf_r+0x70>
 8009ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f000 f81d 	bl	8009f24 <_isatty_r>
 8009eea:	b128      	cbz	r0, 8009ef8 <__smakebuf_r+0x70>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	431d      	orrs	r5, r3
 8009efc:	81a5      	strh	r5, [r4, #12]
 8009efe:	e7cf      	b.n	8009ea0 <__smakebuf_r+0x18>

08009f00 <_fstat_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	@ (8009f20 <_fstat_r+0x20>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	602b      	str	r3, [r5, #0]
 8009f0e:	f7f7 ff8f 	bl	8001e30 <_fstat>
 8009f12:	1c43      	adds	r3, r0, #1
 8009f14:	d102      	bne.n	8009f1c <_fstat_r+0x1c>
 8009f16:	682b      	ldr	r3, [r5, #0]
 8009f18:	b103      	cbz	r3, 8009f1c <_fstat_r+0x1c>
 8009f1a:	6023      	str	r3, [r4, #0]
 8009f1c:	bd38      	pop	{r3, r4, r5, pc}
 8009f1e:	bf00      	nop
 8009f20:	2000059c 	.word	0x2000059c

08009f24 <_isatty_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d06      	ldr	r5, [pc, #24]	@ (8009f40 <_isatty_r+0x1c>)
 8009f28:	2300      	movs	r3, #0
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	4608      	mov	r0, r1
 8009f2e:	602b      	str	r3, [r5, #0]
 8009f30:	f7f7 ff8e 	bl	8001e50 <_isatty>
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d102      	bne.n	8009f3e <_isatty_r+0x1a>
 8009f38:	682b      	ldr	r3, [r5, #0]
 8009f3a:	b103      	cbz	r3, 8009f3e <_isatty_r+0x1a>
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	bd38      	pop	{r3, r4, r5, pc}
 8009f40:	2000059c 	.word	0x2000059c

08009f44 <_init>:
 8009f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f46:	bf00      	nop
 8009f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f4a:	bc08      	pop	{r3}
 8009f4c:	469e      	mov	lr, r3
 8009f4e:	4770      	bx	lr

08009f50 <_fini>:
 8009f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f52:	bf00      	nop
 8009f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f56:	bc08      	pop	{r3}
 8009f58:	469e      	mov	lr, r3
 8009f5a:	4770      	bx	lr
