
I2C_LM75.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b834  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800b9d8  0800b9d8  0000c9d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be40  0800be40  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800be40  0800be40  0000ce40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be48  0800be48  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be48  0800be48  0000ce48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be4c  0800be4c  0000ce4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800be50  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  200001d8  0800c028  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  0800c028  0000d524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010426  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219e  00000000  00000000  0001d62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0001f7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c87  00000000  00000000  000207a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017571  00000000  00000000  0002142f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127e2  00000000  00000000  000389a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091cb2  00000000  00000000  0004b182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dce34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000596c  00000000  00000000  000dce78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e27e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9bc 	.word	0x0800b9bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800b9bc 	.word	0x0800b9bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_I2C_MasterRxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a20      	ldr	r2, [pc, #128]	@ (8001080 <HAL_I2C_MasterRxCpltCallback+0x8c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d139      	bne.n	8001078 <HAL_I2C_MasterRxCpltCallback+0x84>
	{


		// ---------------- LM75A Sensor code ----------------- //

		temperature = Rx_data[0] << 8 | Rx_data[1];
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_I2C_MasterRxCpltCallback+0x90>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b21a      	sxth	r2, r3
 800100c:	4b1d      	ldr	r3, [pc, #116]	@ (8001084 <HAL_I2C_MasterRxCpltCallback+0x90>)
 800100e:	785b      	ldrb	r3, [r3, #1]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21a      	sxth	r2, r3
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_I2C_MasterRxCpltCallback+0x94>)
 8001018:	801a      	strh	r2, [r3, #0]
		}
		*/

		// --------------------------------------------------- //

		out_temperature = temperature/256.0;
 800101a:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_I2C_MasterRxCpltCallback+0x94>)
 800101c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa87 	bl	8000534 <__aeabi_i2d>
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <HAL_I2C_MasterRxCpltCallback+0x98>)
 800102c:	f7ff fc16 	bl	800085c <__aeabi_ddiv>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fdde 	bl	8000bf8 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 8001040:	6013      	str	r3, [r2, #0]

		length = snprintf(string, sizeof(string), "Temperature: %.3f %cC \n", out_temperature, 176);
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_I2C_MasterRxCpltCallback+0x9c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa86 	bl	8000558 <__aeabi_f2d>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	21b0      	movs	r1, #176	@ 0xb0
 8001052:	9102      	str	r1, [sp, #8]
 8001054:	e9cd 2300 	strd	r2, r3, [sp]
 8001058:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <HAL_I2C_MasterRxCpltCallback+0xa0>)
 800105a:	2120      	movs	r1, #32
 800105c:	480e      	ldr	r0, [pc, #56]	@ (8001098 <HAL_I2C_MasterRxCpltCallback+0xa4>)
 800105e:	f007 f841 	bl	80080e4 <sniprintf>
 8001062:	4603      	mov	r3, r0
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <HAL_I2C_MasterRxCpltCallback+0xa8>)
 8001066:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit_DMA(&huart2, string, length);
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <HAL_I2C_MasterRxCpltCallback+0xa8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	b29b      	uxth	r3, r3
 800106e:	461a      	mov	r2, r3
 8001070:	4909      	ldr	r1, [pc, #36]	@ (8001098 <HAL_I2C_MasterRxCpltCallback+0xa4>)
 8001072:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <HAL_I2C_MasterRxCpltCallback+0xac>)
 8001074:	f005 f8f4 	bl	8006260 <HAL_UART_Transmit_DMA>
	}

}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200001f4 	.word	0x200001f4
 8001084:	2000039c 	.word	0x2000039c
 8001088:	200003c4 	.word	0x200003c4
 800108c:	40700000 	.word	0x40700000
 8001090:	200003c8 	.word	0x200003c8
 8001094:	0800b9d8 	.word	0x0800b9d8
 8001098:	200003a4 	.word	0x200003a4
 800109c:	200003cc 	.word	0x200003cc
 80010a0:	200002f0 	.word	0x200002f0

080010a4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d106      	bne.n	80010c2 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_I2C_Master_Receive_DMA(&hi2c1, LM75_RD_ADDRESS, Rx_data, 2); //LM75A
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010b6:	8819      	ldrh	r1, [r3, #0]
 80010b8:	2302      	movs	r3, #2
 80010ba:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010bc:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80010be:	f001 fe41 	bl	8002d44 <HAL_I2C_Master_Receive_DMA>
		//HAL_I2C_Master_Receive_DMA(&hi2c1, LM75_RD_ADDRESS, Rx_data, 6); //LM75B

	}
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002a8 	.word	0x200002a8
 80010d0:	20000002 	.word	0x20000002
 80010d4:	2000039c 	.word	0x2000039c
 80010d8:	200001f4 	.word	0x200001f4

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f000 fc99 	bl	8001a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f821 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 f959 	bl	80013a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010ee:	f000 f92f 	bl	8001350 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010f2:	f000 f903 	bl	80012fc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80010f6:	f000 f885 	bl	8001204 <MX_I2C1_Init>
  MX_TIM2_Init();
 80010fa:	f000 f8b1 	bl	8001260 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_I2C_Master_Transmit(&hi2c1, LM75_WR_ADDRESS, &LM75_REGISTER, 2, 10);
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <main+0x40>)
 8001100:	8819      	ldrh	r1, [r3, #0]
 8001102:	230a      	movs	r3, #10
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2302      	movs	r3, #2
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <main+0x44>)
 800110a:	4806      	ldr	r0, [pc, #24]	@ (8001124 <main+0x48>)
 800110c:	f001 fd1c 	bl	8002b48 <HAL_I2C_Master_Transmit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <main+0x4c>)
 8001112:	f004 fc6b 	bl	80059ec <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001116:	bf00      	nop
 8001118:	e7fd      	b.n	8001116 <main+0x3a>
 800111a:	bf00      	nop
 800111c:	20000000 	.word	0x20000000
 8001120:	20000398 	.word	0x20000398
 8001124:	200001f4 	.word	0x200001f4
 8001128:	200002a8 	.word	0x200002a8

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	@ 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f007 f869 	bl	8008212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <SystemClock_Config+0xd0>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a28      	ldr	r2, [pc, #160]	@ (80011fc <SystemClock_Config+0xd0>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b26      	ldr	r3, [pc, #152]	@ (80011fc <SystemClock_Config+0xd0>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <SystemClock_Config+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001178:	4a21      	ldr	r2, [pc, #132]	@ (8001200 <SystemClock_Config+0xd4>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <SystemClock_Config+0xd4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001194:	2310      	movs	r3, #16
 8001196:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011a0:	2310      	movs	r3, #16
 80011a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011ae:	2307      	movs	r3, #7
 80011b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 ff30 	bl	800501c <HAL_RCC_OscConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011c2:	f000 f95b 	bl	800147c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c6:	230f      	movs	r3, #15
 80011c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ca:	2302      	movs	r3, #2
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2102      	movs	r1, #2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 f992 	bl	800550c <HAL_RCC_ClockConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011ee:	f000 f945 	bl	800147c <Error_Handler>
  }
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	@ 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800
 8001200:	40007000 	.word	0x40007000

08001204 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_I2C1_Init+0x50>)
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <MX_I2C1_Init+0x54>)
 800120c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001210:	4a12      	ldr	r2, [pc, #72]	@ (800125c <MX_I2C1_Init+0x58>)
 8001212:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001220:	4b0c      	ldr	r3, [pc, #48]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001222:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001226:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001228:	4b0a      	ldr	r3, [pc, #40]	@ (8001254 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001234:	4b07      	ldr	r3, [pc, #28]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001240:	4804      	ldr	r0, [pc, #16]	@ (8001254 <MX_I2C1_Init+0x50>)
 8001242:	f001 fb27 	bl	8002894 <HAL_I2C_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800124c:	f000 f916 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}
 8001254:	200001f4 	.word	0x200001f4
 8001258:	40005400 	.word	0x40005400
 800125c:	000186a0 	.word	0x000186a0

08001260 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	463b      	mov	r3, r7
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127c:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <MX_TIM2_Init+0x98>)
 800127e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001282:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8001284:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_TIM2_Init+0x98>)
 8001286:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800128a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_TIM2_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (TEMPO*10) - 1;
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_TIM2_Init+0x98>)
 8001294:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001298:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_TIM2_Init+0x98>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <MX_TIM2_Init+0x98>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a6:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_TIM2_Init+0x98>)
 80012a8:	f004 fb50 	bl	800594c <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012b2:	f000 f8e3 	bl	800147c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <MX_TIM2_Init+0x98>)
 80012c4:	f004 fce4 	bl	8005c90 <HAL_TIM_ConfigClockSource>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ce:	f000 f8d5 	bl	800147c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	@ (80012f8 <MX_TIM2_Init+0x98>)
 80012e0:	f004 feec 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ea:	f000 f8c7 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002a8 	.word	0x200002a8

080012fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <MX_USART2_UART_Init+0x50>)
 8001304:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001308:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800130c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131a:	4b0b      	ldr	r3, [pc, #44]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001322:	220c      	movs	r2, #12
 8001324:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_USART2_UART_Init+0x4c>)
 8001334:	f004 ff44 	bl	80061c0 <HAL_UART_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133e:	f000 f89d 	bl	800147c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200002f0 	.word	0x200002f0
 800134c:	40004400 	.word	0x40004400

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_DMA_Init+0x4c>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <MX_DMA_Init+0x4c>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <MX_DMA_Init+0x4c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	200b      	movs	r0, #11
 8001378:	f000 fc9b 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800137c:	200b      	movs	r0, #11
 800137e:	f000 fcb4 	bl	8001cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2011      	movs	r0, #17
 8001388:	f000 fc93 	bl	8001cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800138c:	2011      	movs	r0, #17
 800138e:	f000 fcac 	bl	8001cea <HAL_NVIC_EnableIRQ>

}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a2c      	ldr	r2, [pc, #176]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b26      	ldr	r3, [pc, #152]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	4a25      	ldr	r2, [pc, #148]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e2:	4b23      	ldr	r3, [pc, #140]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001470 <MX_GPIO_Init+0xd0>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_GPIO_Init+0xd0>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a17      	ldr	r2, [pc, #92]	@ (8001470 <MX_GPIO_Init+0xd0>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_GPIO_Init+0xd0>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2120      	movs	r1, #32
 800142a:	4812      	ldr	r0, [pc, #72]	@ (8001474 <MX_GPIO_Init+0xd4>)
 800142c:	f001 fa18 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001430:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001436:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	480c      	ldr	r0, [pc, #48]	@ (8001478 <MX_GPIO_Init+0xd8>)
 8001448:	f001 f886 	bl	8002558 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144c:	2320      	movs	r3, #32
 800144e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4619      	mov	r1, r3
 8001462:	4804      	ldr	r0, [pc, #16]	@ (8001474 <MX_GPIO_Init+0xd4>)
 8001464:	f001 f878 	bl	8002558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	@ 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000
 8001478:	40020800 	.word	0x40020800

0800147c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001480:	b672      	cpsid	i
}
 8001482:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <Error_Handler+0x8>

08001488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001496:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <HAL_MspInit+0x4c>)
 8001498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149c:	6453      	str	r3, [r2, #68]	@ 0x44
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_MspInit+0x4c>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014c6:	2007      	movs	r0, #7
 80014c8:	f000 fbe8 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a38      	ldr	r2, [pc, #224]	@ (80015d8 <HAL_I2C_MspInit+0x100>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d16a      	bne.n	80015d0 <HAL_I2C_MspInit+0xf8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <HAL_I2C_MspInit+0x104>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a36      	ldr	r2, [pc, #216]	@ (80015dc <HAL_I2C_MspInit+0x104>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <HAL_I2C_MspInit+0x104>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001516:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800151a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151c:	2312      	movs	r3, #18
 800151e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001524:	2303      	movs	r3, #3
 8001526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001528:	2304      	movs	r3, #4
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	482b      	ldr	r0, [pc, #172]	@ (80015e0 <HAL_I2C_MspInit+0x108>)
 8001534:	f001 f810 	bl	8002558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <HAL_I2C_MspInit+0x104>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001540:	4a26      	ldr	r2, [pc, #152]	@ (80015dc <HAL_I2C_MspInit+0x104>)
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001546:	6413      	str	r3, [r2, #64]	@ 0x40
 8001548:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <HAL_I2C_MspInit+0x104>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001554:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001556:	4a24      	ldr	r2, [pc, #144]	@ (80015e8 <HAL_I2C_MspInit+0x110>)
 8001558:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 800155c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001560:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001574:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157c:	4b19      	ldr	r3, [pc, #100]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 800157e:	2200      	movs	r2, #0
 8001580:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001582:	4b18      	ldr	r3, [pc, #96]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001584:	2200      	movs	r2, #0
 8001586:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001588:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001594:	4813      	ldr	r0, [pc, #76]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 8001596:	f000 fbc3 	bl	8001d20 <HAL_DMA_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80015a0:	f7ff ff6c 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a0f      	ldr	r2, [pc, #60]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 80015a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80015aa:	4a0e      	ldr	r2, [pc, #56]	@ (80015e4 <HAL_I2C_MspInit+0x10c>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	201f      	movs	r0, #31
 80015b6:	f000 fb7c 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015ba:	201f      	movs	r0, #31
 80015bc:	f000 fb95 	bl	8001cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2020      	movs	r0, #32
 80015c6:	f000 fb74 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015ca:	2020      	movs	r0, #32
 80015cc:	f000 fb8d 	bl	8001cea <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015d0:	bf00      	nop
 80015d2:	3728      	adds	r7, #40	@ 0x28
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40005400 	.word	0x40005400
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40020400 	.word	0x40020400
 80015e4:	20000248 	.word	0x20000248
 80015e8:	40026010 	.word	0x40026010

080015ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015fc:	d115      	bne.n	800162a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <HAL_TIM_Base_MspInit+0x48>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a0b      	ldr	r2, [pc, #44]	@ (8001634 <HAL_TIM_Base_MspInit+0x48>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_TIM_Base_MspInit+0x48>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	201c      	movs	r0, #28
 8001620:	f000 fb47 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001624:	201c      	movs	r0, #28
 8001626:	f000 fb60 	bl	8001cea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a34      	ldr	r2, [pc, #208]	@ (8001728 <HAL_UART_MspInit+0xf0>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d161      	bne.n	800171e <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b33      	ldr	r3, [pc, #204]	@ (800172c <HAL_UART_MspInit+0xf4>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	4a32      	ldr	r2, [pc, #200]	@ (800172c <HAL_UART_MspInit+0xf4>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001668:	6413      	str	r3, [r2, #64]	@ 0x40
 800166a:	4b30      	ldr	r3, [pc, #192]	@ (800172c <HAL_UART_MspInit+0xf4>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <HAL_UART_MspInit+0xf4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	4a2b      	ldr	r2, [pc, #172]	@ (800172c <HAL_UART_MspInit+0xf4>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	@ 0x30
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <HAL_UART_MspInit+0xf4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001692:	230c      	movs	r3, #12
 8001694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016a2:	2307      	movs	r3, #7
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	4820      	ldr	r0, [pc, #128]	@ (8001730 <HAL_UART_MspInit+0xf8>)
 80016ae:	f000 ff53 	bl	8002558 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016b4:	4a20      	ldr	r2, [pc, #128]	@ (8001738 <HAL_UART_MspInit+0x100>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80016be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016c2:	2240      	movs	r2, #64	@ 0x40
 80016c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016cc:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016d4:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016da:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80016e0:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ec:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80016f2:	4810      	ldr	r0, [pc, #64]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 80016f4:	f000 fb14 	bl	8001d20 <HAL_DMA_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80016fe:	f7ff febd 	bl	800147c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 8001706:	639a      	str	r2, [r3, #56]	@ 0x38
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_UART_MspInit+0xfc>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2026      	movs	r0, #38	@ 0x26
 8001714:	f000 facd 	bl	8001cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001718:	2026      	movs	r0, #38	@ 0x26
 800171a:	f000 fae6 	bl	8001cea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	@ 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40004400 	.word	0x40004400
 800172c:	40023800 	.word	0x40023800
 8001730:	40020000 	.word	0x40020000
 8001734:	20000338 	.word	0x20000338
 8001738:	400260a0 	.word	0x400260a0

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 f993 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <DMA1_Stream0_IRQHandler+0x10>)
 80017a2:	f000 fc55 	bl	8002050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000248 	.word	0x20000248

080017b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <DMA1_Stream6_IRQHandler+0x10>)
 80017b6:	f000 fc4b 	bl	8002050 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000338 	.word	0x20000338

080017c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <TIM2_IRQHandler+0x10>)
 80017ca:	f004 f971 	bl	8005ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200002a8 	.word	0x200002a8

080017d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <I2C1_EV_IRQHandler+0x10>)
 80017de:	f001 fbdd 	bl	8002f9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200001f4 	.word	0x200001f4

080017ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <I2C1_ER_IRQHandler+0x10>)
 80017f2:	f001 fd26 	bl	8003242 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200001f4 	.word	0x200001f4

08001800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001804:	4802      	ldr	r0, [pc, #8]	@ (8001810 <USART2_IRQHandler+0x10>)
 8001806:	f004 fd9b 	bl	8006340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200002f0 	.word	0x200002f0

08001814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return 1;
 8001818:	2301      	movs	r3, #1
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_kill>:

int _kill(int pid, int sig)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800182e:	f006 fd43 	bl	80082b8 <__errno>
 8001832:	4603      	mov	r3, r0
 8001834:	2216      	movs	r2, #22
 8001836:	601a      	str	r2, [r3, #0]
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_exit>:

void _exit (int status)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ffe7 	bl	8001824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001856:	bf00      	nop
 8001858:	e7fd      	b.n	8001856 <_exit+0x12>

0800185a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	e00a      	b.n	8001882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800186c:	f3af 8000 	nop.w
 8001870:	4601      	mov	r1, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1c5a      	adds	r2, r3, #1
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	b2ca      	uxtb	r2, r1
 800187a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3301      	adds	r3, #1
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	dbf0      	blt.n	800186c <_read+0x12>
  }

  return len;
 800188a:	687b      	ldr	r3, [r7, #4]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e009      	b.n	80018ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	60ba      	str	r2, [r7, #8]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbf1      	blt.n	80018a6 <_write+0x12>
  }
  return len;
 80018c2:	687b      	ldr	r3, [r7, #4]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_close>:

int _close(int file)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018f4:	605a      	str	r2, [r3, #4]
  return 0;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <_isatty>:

int _isatty(int file)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800190c:	2301      	movs	r3, #1
}
 800190e:	4618      	mov	r0, r3
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	@ (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	@ (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f006 fca8 	bl	80082b8 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	@ (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20018000 	.word	0x20018000
 8001994:	00000400 	.word	0x00000400
 8001998:	200003d0 	.word	0x200003d0
 800199c:	20000528 	.word	0x20000528

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	@ (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019c8:	f7ff ffea 	bl	80019a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ce:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f006 fc67 	bl	80082c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fb71 	bl	80010dc <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a08:	0800be50 	.word	0x0800be50
  ldr r2, =_sbss
 8001a0c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a10:	20000524 	.word	0x20000524

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	@ (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	@ (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f92b 	bl	8001c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fd1c 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	@ (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	@ (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f943 	bl	8001d06 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f90b 	bl	8001cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	@ (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	2000000c 	.word	0x2000000c
 8001ab8:	20000008 	.word	0x20000008

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	200003d4 	.word	0x200003d4

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200003d4 	.word	0x200003d4

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4907      	ldr	r1, [pc, #28]	@ (8001b98 <__NVIC_EnableIRQ+0x38>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	@ (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	@ (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c68:	d301      	bcc.n	8001c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00f      	b.n	8001c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <SysTick_Config+0x40>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c76:	210f      	movs	r1, #15
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295
 8001c7c:	f7ff ff8e 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <SysTick_Config+0x40>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c86:	4b04      	ldr	r3, [pc, #16]	@ (8001c98 <SysTick_Config+0x40>)
 8001c88:	2207      	movs	r2, #7
 8001c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	e000e010 	.word	0xe000e010

08001c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff ff29 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
 8001cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc4:	f7ff ff3e 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	6978      	ldr	r0, [r7, #20]
 8001cd0:	f7ff ff8e 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cda:	4611      	mov	r1, r2
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	bf00      	nop
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff31 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff ffa2 	bl	8001c58 <SysTick_Config>
 8001d14:	4603      	mov	r3, r0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
	...

08001d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d2c:	f7ff feda 	bl	8001ae4 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e099      	b.n	8001e70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d5c:	e00f      	b.n	8001d7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5e:	f7ff fec1 	bl	8001ae4 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d908      	bls.n	8001d7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2203      	movs	r2, #3
 8001d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e078      	b.n	8001e70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e8      	bne.n	8001d5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4b38      	ldr	r3, [pc, #224]	@ (8001e78 <HAL_DMA_Init+0x158>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d107      	bne.n	8001de8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	4313      	orrs	r3, r2
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f023 0307 	bic.w	r3, r3, #7
 8001dfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d117      	bne.n	8001e42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00e      	beq.n	8001e42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fb1b 	bl	8002460 <DMA_CheckFifoParam>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2240      	movs	r2, #64	@ 0x40
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e016      	b.n	8001e70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fad2 	bl	80023f4 <DMA_CalcBaseAndBitshift>
 8001e50:	4603      	mov	r3, r0
 8001e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e58:	223f      	movs	r2, #63	@ 0x3f
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	f010803f 	.word	0xf010803f

08001e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DMA_Start_IT+0x26>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e040      	b.n	8001f24 <HAL_DMA_Start_IT+0xa8>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d12f      	bne.n	8001f16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fa64 	bl	8002398 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ed4:	223f      	movs	r2, #63	@ 0x3f
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 0216 	orr.w	r2, r2, #22
 8001eea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d007      	beq.n	8001f04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f042 0208 	orr.w	r2, r2, #8
 8001f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e005      	b.n	8001f22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f3a:	f7ff fdd3 	bl	8001ae4 <HAL_GetTick>
 8001f3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d008      	beq.n	8001f5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e052      	b.n	8002004 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0216 	bic.w	r2, r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_DMA_Abort+0x62>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0208 	bic.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0201 	bic.w	r2, r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fae:	e013      	b.n	8001fd8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fb0:	f7ff fd98 	bl	8001ae4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b05      	cmp	r3, #5
 8001fbc:	d90c      	bls.n	8001fd8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e015      	b.n	8002004 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1e4      	bne.n	8001fb0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fea:	223f      	movs	r2, #63	@ 0x3f
 8001fec:	409a      	lsls	r2, r3
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d004      	beq.n	800202a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00c      	b.n	8002044 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2205      	movs	r2, #5
 800202e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 0201 	bic.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800205c:	4b8e      	ldr	r3, [pc, #568]	@ (8002298 <HAL_DMA_IRQHandler+0x248>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a8e      	ldr	r2, [pc, #568]	@ (800229c <HAL_DMA_IRQHandler+0x24c>)
 8002062:	fba2 2303 	umull	r2, r3, r2, r3
 8002066:	0a9b      	lsrs	r3, r3, #10
 8002068:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207a:	2208      	movs	r2, #8
 800207c:	409a      	lsls	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01a      	beq.n	80020bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0204 	bic.w	r2, r2, #4
 80020a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020a8:	2208      	movs	r2, #8
 80020aa:	409a      	lsls	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020b4:	f043 0201 	orr.w	r2, r3, #1
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c0:	2201      	movs	r2, #1
 80020c2:	409a      	lsls	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d012      	beq.n	80020f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00b      	beq.n	80020f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	2201      	movs	r2, #1
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ea:	f043 0202 	orr.w	r2, r3, #2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f6:	2204      	movs	r2, #4
 80020f8:	409a      	lsls	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d012      	beq.n	8002128 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	2204      	movs	r2, #4
 8002116:	409a      	lsls	r2, r3
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002120:	f043 0204 	orr.w	r2, r3, #4
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800212c:	2210      	movs	r2, #16
 800212e:	409a      	lsls	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d043      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d03c      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800214a:	2210      	movs	r2, #16
 800214c:	409a      	lsls	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d018      	beq.n	8002192 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d108      	bne.n	8002180 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	d024      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	4798      	blx	r3
 800217e:	e01f      	b.n	80021c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	4798      	blx	r3
 8002190:	e016      	b.n	80021c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d107      	bne.n	80021b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0208 	bic.w	r2, r2, #8
 80021ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c4:	2220      	movs	r2, #32
 80021c6:	409a      	lsls	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 808f 	beq.w	80022f0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 8087 	beq.w	80022f0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e6:	2220      	movs	r2, #32
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d136      	bne.n	8002268 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0216 	bic.w	r2, r2, #22
 8002208:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002218:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	2b00      	cmp	r3, #0
 8002220:	d103      	bne.n	800222a <HAL_DMA_IRQHandler+0x1da>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 0208 	bic.w	r2, r2, #8
 8002238:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800223e:	223f      	movs	r2, #63	@ 0x3f
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2201      	movs	r2, #1
 800224a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800225a:	2b00      	cmp	r3, #0
 800225c:	d07e      	beq.n	800235c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	4798      	blx	r3
        }
        return;
 8002266:	e079      	b.n	800235c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01d      	beq.n	80022b2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10d      	bne.n	80022a0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002288:	2b00      	cmp	r3, #0
 800228a:	d031      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4798      	blx	r3
 8002294:	e02c      	b.n	80022f0 <HAL_DMA_IRQHandler+0x2a0>
 8002296:	bf00      	nop
 8002298:	20000004 	.word	0x20000004
 800229c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d023      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	4798      	blx	r3
 80022b0:	e01e      	b.n	80022f0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10f      	bne.n	80022e0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0210 	bic.w	r2, r2, #16
 80022ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d032      	beq.n	800235e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d022      	beq.n	800234a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2205      	movs	r2, #5
 8002308:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	3301      	adds	r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	429a      	cmp	r2, r3
 8002326:	d307      	bcc.n	8002338 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f2      	bne.n	800231c <HAL_DMA_IRQHandler+0x2cc>
 8002336:	e000      	b.n	800233a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002338:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
 800235a:	e000      	b.n	800235e <HAL_DMA_IRQHandler+0x30e>
        return;
 800235c:	bf00      	nop
    }
  }
}
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002372:	b2db      	uxtb	r3, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80023b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b40      	cmp	r3, #64	@ 0x40
 80023c4:	d108      	bne.n	80023d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80023d6:	e007      	b.n	80023e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	60da      	str	r2, [r3, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b10      	subs	r3, #16
 8002404:	4a14      	ldr	r2, [pc, #80]	@ (8002458 <DMA_CalcBaseAndBitshift+0x64>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <DMA_CalcBaseAndBitshift+0x68>)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	461a      	mov	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d909      	bls.n	8002436 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800242a:	f023 0303 	bic.w	r3, r3, #3
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	659a      	str	r2, [r3, #88]	@ 0x58
 8002434:	e007      	b.n	8002446 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800243e:	f023 0303 	bic.w	r3, r3, #3
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	aaaaaaab 	.word	0xaaaaaaab
 800245c:	0800ba08 	.word	0x0800ba08

08002460 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002470:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11f      	bne.n	80024ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d856      	bhi.n	800252e <DMA_CheckFifoParam+0xce>
 8002480:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <DMA_CheckFifoParam+0x28>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	08002499 	.word	0x08002499
 800248c:	080024ab 	.word	0x080024ab
 8002490:	08002499 	.word	0x08002499
 8002494:	0800252f 	.word	0x0800252f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d046      	beq.n	8002532 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a8:	e043      	b.n	8002532 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024b2:	d140      	bne.n	8002536 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b8:	e03d      	b.n	8002536 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c2:	d121      	bne.n	8002508 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d837      	bhi.n	800253a <DMA_CheckFifoParam+0xda>
 80024ca:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <DMA_CheckFifoParam+0x70>)
 80024cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	080024e7 	.word	0x080024e7
 80024d8:	080024e1 	.word	0x080024e1
 80024dc:	080024f9 	.word	0x080024f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e030      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d025      	beq.n	800253e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024f6:	e022      	b.n	800253e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002500:	d11f      	bne.n	8002542 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002506:	e01c      	b.n	8002542 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d903      	bls.n	8002516 <DMA_CheckFifoParam+0xb6>
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d003      	beq.n	800251c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002514:	e018      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      break;
 800251a:	e015      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002520:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      break;
 800252c:	e00b      	b.n	8002546 <DMA_CheckFifoParam+0xe6>
      break;
 800252e:	bf00      	nop
 8002530:	e00a      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002532:	bf00      	nop
 8002534:	e008      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002536:	bf00      	nop
 8002538:	e006      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253a:	bf00      	nop
 800253c:	e004      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e002      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;   
 8002542:	bf00      	nop
 8002544:	e000      	b.n	8002548 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
    }
  } 
  
  return status; 
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	b480      	push	{r7}
 800255a:	b089      	sub	sp, #36	@ 0x24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	e159      	b.n	8002828 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002574:	2201      	movs	r2, #1
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	429a      	cmp	r2, r3
 800258e:	f040 8148 	bne.w	8002822 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	2b01      	cmp	r3, #1
 800259c:	d005      	beq.n	80025aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d130      	bne.n	800260c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	2203      	movs	r2, #3
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b03      	cmp	r3, #3
 8002616:	d017      	beq.n	8002648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	2203      	movs	r2, #3
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d123      	bne.n	800269c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	220f      	movs	r2, #15
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691a      	ldr	r2, [r3, #16]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	08da      	lsrs	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3208      	adds	r2, #8
 8002696:	69b9      	ldr	r1, [r7, #24]
 8002698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	2203      	movs	r2, #3
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0203 	and.w	r2, r3, #3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a2 	beq.w	8002822 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	4b57      	ldr	r3, [pc, #348]	@ (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e6:	4a56      	ldr	r2, [pc, #344]	@ (8002840 <HAL_GPIO_Init+0x2e8>)
 80026e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80026ee:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <HAL_GPIO_Init+0x2e8>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fa:	4a52      	ldr	r2, [pc, #328]	@ (8002844 <HAL_GPIO_Init+0x2ec>)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	089b      	lsrs	r3, r3, #2
 8002700:	3302      	adds	r3, #2
 8002702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	220f      	movs	r2, #15
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4013      	ands	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a49      	ldr	r2, [pc, #292]	@ (8002848 <HAL_GPIO_Init+0x2f0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d019      	beq.n	800275a <HAL_GPIO_Init+0x202>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a48      	ldr	r2, [pc, #288]	@ (800284c <HAL_GPIO_Init+0x2f4>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_GPIO_Init+0x1fe>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a47      	ldr	r2, [pc, #284]	@ (8002850 <HAL_GPIO_Init+0x2f8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00d      	beq.n	8002752 <HAL_GPIO_Init+0x1fa>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a46      	ldr	r2, [pc, #280]	@ (8002854 <HAL_GPIO_Init+0x2fc>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d007      	beq.n	800274e <HAL_GPIO_Init+0x1f6>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a45      	ldr	r2, [pc, #276]	@ (8002858 <HAL_GPIO_Init+0x300>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d101      	bne.n	800274a <HAL_GPIO_Init+0x1f2>
 8002746:	2304      	movs	r3, #4
 8002748:	e008      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274a:	2307      	movs	r3, #7
 800274c:	e006      	b.n	800275c <HAL_GPIO_Init+0x204>
 800274e:	2303      	movs	r3, #3
 8002750:	e004      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002752:	2302      	movs	r3, #2
 8002754:	e002      	b.n	800275c <HAL_GPIO_Init+0x204>
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_GPIO_Init+0x204>
 800275a:	2300      	movs	r3, #0
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f002 0203 	and.w	r2, r2, #3
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	4093      	lsls	r3, r2
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800276c:	4935      	ldr	r1, [pc, #212]	@ (8002844 <HAL_GPIO_Init+0x2ec>)
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	089b      	lsrs	r3, r3, #2
 8002772:	3302      	adds	r3, #2
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277a:	4b38      	ldr	r3, [pc, #224]	@ (800285c <HAL_GPIO_Init+0x304>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279e:	4a2f      	ldr	r2, [pc, #188]	@ (800285c <HAL_GPIO_Init+0x304>)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a4:	4b2d      	ldr	r3, [pc, #180]	@ (800285c <HAL_GPIO_Init+0x304>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c8:	4a24      	ldr	r2, [pc, #144]	@ (800285c <HAL_GPIO_Init+0x304>)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ce:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_GPIO_Init+0x304>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4013      	ands	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f2:	4a1a      	ldr	r2, [pc, #104]	@ (800285c <HAL_GPIO_Init+0x304>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f8:	4b18      	ldr	r3, [pc, #96]	@ (800285c <HAL_GPIO_Init+0x304>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800281c:	4a0f      	ldr	r2, [pc, #60]	@ (800285c <HAL_GPIO_Init+0x304>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	f67f aea2 	bls.w	8002574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002830:	bf00      	nop
 8002832:	bf00      	nop
 8002834:	3724      	adds	r7, #36	@ 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40013800 	.word	0x40013800
 8002848:	40020000 	.word	0x40020000
 800284c:	40020400 	.word	0x40020400
 8002850:	40020800 	.word	0x40020800
 8002854:	40020c00 	.word	0x40020c00
 8002858:	40021000 	.word	0x40021000
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e12b      	b.n	8002afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fe0c 	bl	80014d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	@ 0x24
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028f8:	f003 f800 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a81      	ldr	r2, [pc, #516]	@ (8002b08 <HAL_I2C_Init+0x274>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d807      	bhi.n	8002918 <HAL_I2C_Init+0x84>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a80      	ldr	r2, [pc, #512]	@ (8002b0c <HAL_I2C_Init+0x278>)
 800290c:	4293      	cmp	r3, r2
 800290e:	bf94      	ite	ls
 8002910:	2301      	movls	r3, #1
 8002912:	2300      	movhi	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	e006      	b.n	8002926 <HAL_I2C_Init+0x92>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b10 <HAL_I2C_Init+0x27c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	bf94      	ite	ls
 8002920:	2301      	movls	r3, #1
 8002922:	2300      	movhi	r3, #0
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e0e7      	b.n	8002afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a78      	ldr	r2, [pc, #480]	@ (8002b14 <HAL_I2C_Init+0x280>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9b      	lsrs	r3, r3, #18
 8002938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	430a      	orrs	r2, r1
 800294c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4a6a      	ldr	r2, [pc, #424]	@ (8002b08 <HAL_I2C_Init+0x274>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d802      	bhi.n	8002968 <HAL_I2C_Init+0xd4>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	3301      	adds	r3, #1
 8002966:	e009      	b.n	800297c <HAL_I2C_Init+0xe8>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	4a69      	ldr	r2, [pc, #420]	@ (8002b18 <HAL_I2C_Init+0x284>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	099b      	lsrs	r3, r3, #6
 800297a:	3301      	adds	r3, #1
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800298e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	495c      	ldr	r1, [pc, #368]	@ (8002b08 <HAL_I2C_Init+0x274>)
 8002998:	428b      	cmp	r3, r1
 800299a:	d819      	bhi.n	80029d0 <HAL_I2C_Init+0x13c>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	1e59      	subs	r1, r3, #1
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029aa:	1c59      	adds	r1, r3, #1
 80029ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80029b0:	400b      	ands	r3, r1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_I2C_Init+0x138>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1e59      	subs	r1, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	e051      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029cc:	2304      	movs	r3, #4
 80029ce:	e04f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d111      	bne.n	80029fc <HAL_I2C_Init+0x168>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1e58      	subs	r0, r3, #1
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6859      	ldr	r1, [r3, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	440b      	add	r3, r1
 80029e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ea:	3301      	adds	r3, #1
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e012      	b.n	8002a22 <HAL_I2C_Init+0x18e>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1e58      	subs	r0, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6859      	ldr	r1, [r3, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	0099      	lsls	r1, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf0c      	ite	eq
 8002a1c:	2301      	moveq	r3, #1
 8002a1e:	2300      	movne	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_I2C_Init+0x196>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e022      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10e      	bne.n	8002a50 <HAL_I2C_Init+0x1bc>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e58      	subs	r0, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6859      	ldr	r1, [r3, #4]
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	440b      	add	r3, r1
 8002a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a4e:	e00f      	b.n	8002a70 <HAL_I2C_Init+0x1dc>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1e58      	subs	r0, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	0099      	lsls	r1, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	6809      	ldr	r1, [r1, #0]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69da      	ldr	r2, [r3, #28]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6911      	ldr	r1, [r2, #16]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68d2      	ldr	r2, [r2, #12]
 8002aaa:	4311      	orrs	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	000186a0 	.word	0x000186a0
 8002b0c:	001e847f 	.word	0x001e847f
 8002b10:	003d08ff 	.word	0x003d08ff
 8002b14:	431bde83 	.word	0x431bde83
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b2e:	2b80      	cmp	r3, #128	@ 0x80
 8002b30:	d103      	bne.n	8002b3a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	461a      	mov	r2, r3
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7fe ffc2 	bl	8001ae4 <HAL_GetTick>
 8002b60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80e0 	bne.w	8002d30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	2319      	movs	r3, #25
 8002b76:	2201      	movs	r2, #1
 8002b78:	4970      	ldr	r1, [pc, #448]	@ (8002d3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f002 f828 	bl	8004bd0 <I2C_WaitOnFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b86:	2302      	movs	r3, #2
 8002b88:	e0d3      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_I2C_Master_Transmit+0x50>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e0cc      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d007      	beq.n	8002bbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2221      	movs	r2, #33	@ 0x21
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2210      	movs	r2, #16
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	893a      	ldrh	r2, [r7, #8]
 8002bee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	@ (8002d40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002bfe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c00:	8979      	ldrh	r1, [r7, #10]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	6a3a      	ldr	r2, [r7, #32]
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f001 fd9c 	bl	8004744 <I2C_MasterRequestWrite>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e08d      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c16:	2300      	movs	r3, #0
 8002c18:	613b      	str	r3, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c2c:	e066      	b.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	6a39      	ldr	r1, [r7, #32]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f002 f8e6 	bl	8004e04 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e06b      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	781a      	ldrb	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d11b      	bne.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d017      	beq.n	8002cd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	6a39      	ldr	r1, [r7, #32]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f002 f8dd 	bl	8004e94 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00d      	beq.n	8002cfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d107      	bne.n	8002cf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d194      	bne.n	8002c2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	00100002 	.word	0x00100002
 8002d40:	ffff0000 	.word	0xffff0000

08002d44 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	607a      	str	r2, [r7, #4]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	460b      	mov	r3, r1
 8002d52:	817b      	strh	r3, [r7, #10]
 8002d54:	4613      	mov	r3, r2
 8002d56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	f040 8109 	bne.w	8002f7c <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d6a:	4b87      	ldr	r3, [pc, #540]	@ (8002f88 <HAL_I2C_Master_Receive_DMA+0x244>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	08db      	lsrs	r3, r3, #3
 8002d70:	4a86      	ldr	r2, [pc, #536]	@ (8002f8c <HAL_I2C_Master_Receive_DMA+0x248>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a1a      	lsrs	r2, r3, #8
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009a      	lsls	r2, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d112      	bne.n	8002db6 <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f043 0220 	orr.w	r2, r3, #32
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0e3      	b.n	8002f7e <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b02      	cmp	r3, #2
 8002dc2:	d0df      	beq.n	8002d84 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Master_Receive_DMA+0x8e>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e0d5      	b.n	8002f7e <HAL_I2C_Master_Receive_DMA+0x23a>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d007      	beq.n	8002df8 <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2222      	movs	r2, #34	@ 0x22
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2210      	movs	r2, #16
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	893a      	ldrh	r2, [r7, #8]
 8002e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8002e38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e3a:	897a      	ldrh	r2, [r7, #10]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d07b      	beq.n	8002f40 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d02a      	beq.n	8002ea6 <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e54:	4a4f      	ldr	r2, [pc, #316]	@ (8002f94 <HAL_I2C_Master_Receive_DMA+0x250>)
 8002e56:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f98 <HAL_I2C_Master_Receive_DMA+0x254>)
 8002e5e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e64:	2200      	movs	r2, #0
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e74:	2200      	movs	r2, #0
 8002e76:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3310      	adds	r3, #16
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	461a      	mov	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e96:	f7fe fff1 	bl	8001e7c <HAL_DMA_Start_IT>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d139      	bne.n	8002f18 <HAL_I2C_Master_Receive_DMA+0x1d4>
 8002ea4:	e013      	b.n	8002ece <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e057      	b.n	8002f7e <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002edc:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eec:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f04:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	e02f      	b.n	8002f78 <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	f043 0210 	orr.w	r2, r3, #16
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e01e      	b.n	8002f7e <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8002f56:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f66:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f76:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	14f8b589 	.word	0x14f8b589
 8002f90:	ffff0000 	.word	0xffff0000
 8002f94:	08004849 	.word	0x08004849
 8002f98:	08004a07 	.word	0x08004a07

08002f9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d003      	beq.n	8002fd4 <HAL_I2C_EV_IRQHandler+0x38>
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b40      	cmp	r3, #64	@ 0x40
 8002fd0:	f040 80b1 	bne.w	8003136 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <HAL_I2C_EV_IRQHandler+0x6e>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002ff4:	d003      	beq.n	8002ffe <HAL_I2C_EV_IRQHandler+0x62>
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_EV_IRQHandler+0x66>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <HAL_I2C_EV_IRQHandler+0x68>
 8003002:	2300      	movs	r3, #0
 8003004:	2b01      	cmp	r3, #1
 8003006:	f000 8114 	beq.w	8003232 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00b      	beq.n	800302c <HAL_I2C_EV_IRQHandler+0x90>
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f001 ffe1 	bl	8004fe6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fd70 	bl	8003b0a <I2C_Master_SB>
 800302a:	e083      	b.n	8003134 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_I2C_EV_IRQHandler+0xac>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fde8 	bl	8003c16 <I2C_Master_ADD10>
 8003046:	e075      	b.n	8003134 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_I2C_EV_IRQHandler+0xc8>
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fe04 	bl	8003c6a <I2C_Master_ADDR>
 8003062:	e067      	b.n	8003134 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d036      	beq.n	80030dc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800307c:	f000 80db 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0x10a>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d008      	beq.n	80030a6 <HAL_I2C_EV_IRQHandler+0x10a>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d103      	bne.n	80030a6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f9cc 	bl	800343c <I2C_MasterTransmit_TXE>
 80030a4:	e046      	b.n	8003134 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80c2 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80bc 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80030be:	7bbb      	ldrb	r3, [r7, #14]
 80030c0:	2b21      	cmp	r3, #33	@ 0x21
 80030c2:	d103      	bne.n	80030cc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fa55 	bl	8003574 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030ca:	e0b4      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b40      	cmp	r3, #64	@ 0x40
 80030d0:	f040 80b1 	bne.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fac3 	bl	8003660 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030da:	e0ac      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030ea:	f000 80a4 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x178>
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d008      	beq.n	8003114 <HAL_I2C_EV_IRQHandler+0x178>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d103      	bne.n	8003114 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fb3f 	bl	8003790 <I2C_MasterReceive_RXNE>
 8003112:	e00f      	b.n	8003134 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 808b 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8085 	beq.w	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fbf7 	bl	8003920 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003132:	e080      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
 8003134:	e07f      	b.n	8003236 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d004      	beq.n	8003148 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e007      	b.n	8003158 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d011      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00c      	beq.n	8003186 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 ffc2 	bl	8004108 <I2C_Slave_ADDR>
 8003184:	e05a      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x206>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fffc 	bl	8004198 <I2C_Slave_STOPF>
 80031a0:	e04c      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031a2:	7bbb      	ldrb	r3, [r7, #14]
 80031a4:	2b21      	cmp	r3, #33	@ 0x21
 80031a6:	d002      	beq.n	80031ae <HAL_I2C_EV_IRQHandler+0x212>
 80031a8:	7bbb      	ldrb	r3, [r7, #14]
 80031aa:	2b29      	cmp	r3, #41	@ 0x29
 80031ac:	d120      	bne.n	80031f0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00d      	beq.n	80031d4 <HAL_I2C_EV_IRQHandler+0x238>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d008      	beq.n	80031d4 <HAL_I2C_EV_IRQHandler+0x238>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d103      	bne.n	80031d4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fedd 	bl	8003f8c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031d2:	e032      	b.n	800323a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02d      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x29e>
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d028      	beq.n	800323a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 ff0c 	bl	8004006 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031ee:	e024      	b.n	800323a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0x27a>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d008      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0x27a>
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0304 	and.w	r3, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 ff1a 	bl	8004048 <I2C_SlaveReceive_RXNE>
 8003214:	e012      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 ff4a 	bl	80040c4 <I2C_SlaveReceive_BTF>
 8003230:	e004      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800323a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b08a      	sub	sp, #40	@ 0x28
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800325a:	2300      	movs	r3, #0
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003264:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00d      	beq.n	800328c <HAL_I2C_ER_IRQHandler+0x4a>
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800328a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00d      	beq.n	80032b2 <HAL_I2C_ER_IRQHandler+0x70>
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80032a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80032b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d03e      	beq.n	800333a <HAL_I2C_ER_IRQHandler+0xf8>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d039      	beq.n	800333a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80032c6:	7efb      	ldrb	r3, [r7, #27]
 80032c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80032e0:	7ebb      	ldrb	r3, [r7, #26]
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d112      	bne.n	800330c <HAL_I2C_ER_IRQHandler+0xca>
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10f      	bne.n	800330c <HAL_I2C_ER_IRQHandler+0xca>
 80032ec:	7cfb      	ldrb	r3, [r7, #19]
 80032ee:	2b21      	cmp	r3, #33	@ 0x21
 80032f0:	d008      	beq.n	8003304 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80032f2:	7cfb      	ldrb	r3, [r7, #19]
 80032f4:	2b29      	cmp	r3, #41	@ 0x29
 80032f6:	d005      	beq.n	8003304 <HAL_I2C_ER_IRQHandler+0xc2>
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b28      	cmp	r3, #40	@ 0x28
 80032fc:	d106      	bne.n	800330c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b21      	cmp	r3, #33	@ 0x21
 8003302:	d103      	bne.n	800330c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f001 f877 	bl	80043f8 <I2C_Slave_AF>
 800330a:	e016      	b.n	800333a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003314:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800331e:	7efb      	ldrb	r3, [r7, #27]
 8003320:	2b10      	cmp	r3, #16
 8003322:	d002      	beq.n	800332a <HAL_I2C_ER_IRQHandler+0xe8>
 8003324:	7efb      	ldrb	r3, [r7, #27]
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d107      	bne.n	800333a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003338:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <HAL_I2C_ER_IRQHandler+0x11e>
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800334a:	2b00      	cmp	r3, #0
 800334c:	d008      	beq.n	8003360 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800335e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d008      	beq.n	8003378 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f001 f8b4 	bl	80044e0 <I2C_ITError>
  }
}
 8003378:	bf00      	nop
 800337a:	3728      	adds	r7, #40	@ 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
 80033c8:	4613      	mov	r3, r2
 80033ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800344a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003452:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	d150      	bne.n	8003504 <I2C_MasterTransmit_TXE+0xc8>
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b21      	cmp	r3, #33	@ 0x21
 8003466:	d14d      	bne.n	8003504 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b08      	cmp	r3, #8
 800346c:	d01d      	beq.n	80034aa <I2C_MasterTransmit_TXE+0x6e>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b20      	cmp	r3, #32
 8003472:	d01a      	beq.n	80034aa <I2C_MasterTransmit_TXE+0x6e>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800347a:	d016      	beq.n	80034aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800348a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2211      	movs	r2, #17
 8003490:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7ff ff6c 	bl	8003380 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034a8:	e060      	b.n	800356c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80034b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b40      	cmp	r3, #64	@ 0x40
 80034e2:	d107      	bne.n	80034f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff7d 	bl	80033ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034f2:	e03b      	b.n	800356c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff3f 	bl	8003380 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003502:	e033      	b.n	800356c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b21      	cmp	r3, #33	@ 0x21
 8003508:	d005      	beq.n	8003516 <I2C_MasterTransmit_TXE+0xda>
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2b40      	cmp	r3, #64	@ 0x40
 800350e:	d12d      	bne.n	800356c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b22      	cmp	r3, #34	@ 0x22
 8003514:	d12a      	bne.n	800356c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800351a:	b29b      	uxth	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d108      	bne.n	8003532 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800352e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003530:	e01c      	b.n	800356c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b40      	cmp	r3, #64	@ 0x40
 800353c:	d103      	bne.n	8003546 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f88e 	bl	8003660 <I2C_MemoryTransmit_TXE_BTF>
}
 8003544:	e012      	b.n	800356c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	781a      	ldrb	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003560:	b29b      	uxth	r3, r3
 8003562:	3b01      	subs	r3, #1
 8003564:	b29a      	uxth	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800356a:	e7ff      	b.n	800356c <I2C_MasterTransmit_TXE+0x130>
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b21      	cmp	r3, #33	@ 0x21
 800358c:	d164      	bne.n	8003658 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	781a      	ldrb	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035bc:	e04c      	b.n	8003658 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d01d      	beq.n	8003600 <I2C_MasterTransmit_BTF+0x8c>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d01a      	beq.n	8003600 <I2C_MasterTransmit_BTF+0x8c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80035d0:	d016      	beq.n	8003600 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80035e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2211      	movs	r2, #17
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff fec1 	bl	8003380 <HAL_I2C_MasterTxCpltCallback>
}
 80035fe:	e02b      	b.n	8003658 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800360e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800361e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b40      	cmp	r3, #64	@ 0x40
 8003638:	d107      	bne.n	800364a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fed2 	bl	80033ec <HAL_I2C_MemTxCpltCallback>
}
 8003648:	e006      	b.n	8003658 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff fe94 	bl	8003380 <HAL_I2C_MasterTxCpltCallback>
}
 8003658:	bf00      	nop
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003674:	2b00      	cmp	r3, #0
 8003676:	d11d      	bne.n	80036b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10b      	bne.n	8003698 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003684:	b2da      	uxtb	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003690:	1c9a      	adds	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003696:	e077      	b.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369c:	b29b      	uxth	r3, r3
 800369e:	121b      	asrs	r3, r3, #8
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036b2:	e069      	b.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10b      	bne.n	80036d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036d2:	e059      	b.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d152      	bne.n	8003782 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80036dc:	7bfb      	ldrb	r3, [r7, #15]
 80036de:	2b22      	cmp	r3, #34	@ 0x22
 80036e0:	d10d      	bne.n	80036fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80036fc:	e044      	b.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d015      	beq.n	8003734 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b21      	cmp	r3, #33	@ 0x21
 800370c:	d112      	bne.n	8003734 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003732:	e029      	b.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d124      	bne.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b21      	cmp	r3, #33	@ 0x21
 8003742:	d121      	bne.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003752:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003762:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff fe36 	bl	80033ec <HAL_I2C_MemTxCpltCallback>
}
 8003780:	e002      	b.n	8003788 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff f9ca 	bl	8002b1c <I2C_Flush_DR>
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b22      	cmp	r3, #34	@ 0x22
 80037a2:	f040 80b9 	bne.w	8003918 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037aa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d921      	bls.n	80037fe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691a      	ldr	r2, [r3, #16]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	f040 8096 	bne.w	8003918 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037fa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80037fc:	e08c      	b.n	8003918 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003802:	2b02      	cmp	r3, #2
 8003804:	d07f      	beq.n	8003906 <I2C_MasterReceive_RXNE+0x176>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <I2C_MasterReceive_RXNE+0x82>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d179      	bne.n	8003906 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f001 fb86 	bl	8004f24 <I2C_WaitOnSTOPRequestThroughIT>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d14c      	bne.n	80038b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800382c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800383c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d10a      	bne.n	800388e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff fdba 	bl	8003400 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800388c:	e044      	b.n	8003918 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d002      	beq.n	80038a2 <I2C_MasterReceive_RXNE+0x112>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d103      	bne.n	80038aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80038a8:	e002      	b.n	80038b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2212      	movs	r2, #18
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd fb9f 	bl	8000ff4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038b6:	e02f      	b.n	8003918 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fd88 	bl	8003414 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003904:	e008      	b.n	8003918 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003914:	605a      	str	r2, [r3, #4]
}
 8003916:	e7ff      	b.n	8003918 <I2C_MasterReceive_RXNE+0x188>
 8003918:	bf00      	nop
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b04      	cmp	r3, #4
 8003936:	d11b      	bne.n	8003970 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003946:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800396e:	e0c8      	b.n	8003b02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	2b03      	cmp	r3, #3
 8003978:	d129      	bne.n	80039ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003988:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d00a      	beq.n	80039a6 <I2C_MasterReceive_BTF+0x86>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d007      	beq.n	80039a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80039cc:	e099      	b.n	8003b02 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	f040 8081 	bne.w	8003adc <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d002      	beq.n	80039e6 <I2C_MasterReceive_BTF+0xc6>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b10      	cmp	r3, #16
 80039e4:	d108      	bne.n	80039f8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e019      	b.n	8003a2c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d002      	beq.n	8003a04 <I2C_MasterReceive_BTF+0xe4>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d108      	bne.n	8003a16 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e00a      	b.n	8003a2c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d007      	beq.n	8003a2c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003a86:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b40      	cmp	r3, #64	@ 0x40
 8003a9a:	d10a      	bne.n	8003ab2 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fca8 	bl	8003400 <HAL_I2C_MemRxCpltCallback>
}
 8003ab0:	e027      	b.n	8003b02 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d002      	beq.n	8003ac6 <I2C_MasterReceive_BTF+0x1a6>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	d103      	bne.n	8003ace <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003acc:	e002      	b.n	8003ad4 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2212      	movs	r2, #18
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f7fd fa8d 	bl	8000ff4 <HAL_I2C_MasterRxCpltCallback>
}
 8003ada:	e012      	b.n	8003b02 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b01      	subs	r3, #1
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003b02:	bf00      	nop
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b40      	cmp	r3, #64	@ 0x40
 8003b1c:	d117      	bne.n	8003b4e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b36:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b38:	e067      	b.n	8003c0a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]
}
 8003b4c:	e05d      	b.n	8003c0a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b56:	d133      	bne.n	8003bc0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b21      	cmp	r3, #33	@ 0x21
 8003b62:	d109      	bne.n	8003b78 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	e008      	b.n	8003b8a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d004      	beq.n	8003b9c <I2C_Master_SB+0x92>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d108      	bne.n	8003bae <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d032      	beq.n	8003c0a <I2C_Master_SB+0x100>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d02d      	beq.n	8003c0a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bbc:	605a      	str	r2, [r3, #4]
}
 8003bbe:	e024      	b.n	8003c0a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10e      	bne.n	8003be6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	11db      	asrs	r3, r3, #7
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f003 0306 	and.w	r3, r3, #6
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	f063 030f 	orn	r3, r3, #15
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	611a      	str	r2, [r3, #16]
}
 8003be4:	e011      	b.n	8003c0a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d10d      	bne.n	8003c0a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	11db      	asrs	r3, r3, #7
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 0306 	and.w	r3, r3, #6
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f063 030e 	orn	r3, r3, #14
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d004      	beq.n	8003c3c <I2C_Master_ADD10+0x26>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <I2C_Master_ADD10+0x48>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c5c:	605a      	str	r2, [r3, #4]
  }
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b091      	sub	sp, #68	@ 0x44
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c80:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b22      	cmp	r3, #34	@ 0x22
 8003c92:	f040 8169 	bne.w	8003f68 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10f      	bne.n	8003cbe <I2C_Master_ADDR+0x54>
 8003c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003ca2:	2b40      	cmp	r3, #64	@ 0x40
 8003ca4:	d10b      	bne.n	8003cbe <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	e160      	b.n	8003f80 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11d      	bne.n	8003d02 <I2C_Master_ADDR+0x98>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cce:	d118      	bne.n	8003d02 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8003d00:	e13e      	b.n	8003f80 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d113      	bne.n	8003d34 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d30:	601a      	str	r2, [r3, #0]
 8003d32:	e115      	b.n	8003f60 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	f040 808a 	bne.w	8003e54 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d46:	d137      	bne.n	8003db8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d56:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d66:	d113      	bne.n	8003d90 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d76:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	e0e7      	b.n	8003f60 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d90:	2300      	movs	r3, #0
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	623b      	str	r3, [r7, #32]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e0d3      	b.n	8003f60 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d02e      	beq.n	8003e1c <I2C_Master_ADDR+0x1b2>
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d02b      	beq.n	8003e1c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dc6:	2b12      	cmp	r3, #18
 8003dc8:	d102      	bne.n	8003dd0 <I2C_Master_ADDR+0x166>
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d125      	bne.n	8003e1c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d00e      	beq.n	8003df4 <I2C_Master_ADDR+0x18a>
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d00b      	beq.n	8003df4 <I2C_Master_ADDR+0x18a>
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dde:	2b10      	cmp	r3, #16
 8003de0:	d008      	beq.n	8003df4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e007      	b.n	8003e04 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e02:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e04:	2300      	movs	r3, #0
 8003e06:	61fb      	str	r3, [r7, #28]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	61fb      	str	r3, [r7, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	61fb      	str	r3, [r7, #28]
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	e0a1      	b.n	8003f60 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	e085      	b.n	8003f60 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d14d      	bne.n	8003efa <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d016      	beq.n	8003e92 <I2C_Master_ADDR+0x228>
 8003e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d013      	beq.n	8003e92 <I2C_Master_ADDR+0x228>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d010      	beq.n	8003e92 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e007      	b.n	8003ea2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb0:	d117      	bne.n	8003ee2 <I2C_Master_ADDR+0x278>
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eb8:	d00b      	beq.n	8003ed2 <I2C_Master_ADDR+0x268>
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d008      	beq.n	8003ed2 <I2C_Master_ADDR+0x268>
 8003ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d005      	beq.n	8003ed2 <I2C_Master_ADDR+0x268>
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d002      	beq.n	8003ed2 <I2C_Master_ADDR+0x268>
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d107      	bne.n	8003ee2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ee0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e032      	b.n	8003f60 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f08:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f18:	d117      	bne.n	8003f4a <I2C_Master_ADDR+0x2e0>
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f20:	d00b      	beq.n	8003f3a <I2C_Master_ADDR+0x2d0>
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d008      	beq.n	8003f3a <I2C_Master_ADDR+0x2d0>
 8003f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2a:	2b08      	cmp	r3, #8
 8003f2c:	d005      	beq.n	8003f3a <I2C_Master_ADDR+0x2d0>
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	2b10      	cmp	r3, #16
 8003f32:	d002      	beq.n	8003f3a <I2C_Master_ADDR+0x2d0>
 8003f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d107      	bne.n	8003f4a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f48:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	613b      	str	r3, [r7, #16]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f66:	e00b      	b.n	8003f80 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
}
 8003f7e:	e7ff      	b.n	8003f80 <I2C_Master_ADDR+0x316>
 8003f80:	bf00      	nop
 8003f82:	3744      	adds	r7, #68	@ 0x44
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02b      	beq.n	8003ffe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d114      	bne.n	8003ffe <I2C_SlaveTransmit_TXE+0x72>
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b29      	cmp	r3, #41	@ 0x29
 8003fd8:	d111      	bne.n	8003ffe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2221      	movs	r2, #33	@ 0x21
 8003fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2228      	movs	r2, #40	@ 0x28
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7ff f9cb 	bl	8003394 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ffe:	bf00      	nop
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2b00      	cmp	r3, #0
 8004016:	d011      	beq.n	800403c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	781a      	ldrb	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004056:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d02c      	beq.n	80040bc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <I2C_SlaveReceive_RXNE+0x74>
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	2b2a      	cmp	r3, #42	@ 0x2a
 8004096:	d111      	bne.n	80040bc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040a6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2222      	movs	r2, #34	@ 0x22
 80040ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2228      	movs	r2, #40	@ 0x28
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f7ff f976 	bl	80033a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004112:	2300      	movs	r3, #0
 8004114:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004122:	2b28      	cmp	r3, #40	@ 0x28
 8004124:	d125      	bne.n	8004172 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004134:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414a:	2b00      	cmp	r3, #0
 800414c:	d103      	bne.n	8004156 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	81bb      	strh	r3, [r7, #12]
 8004154:	e002      	b.n	800415c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004164:	89ba      	ldrh	r2, [r7, #12]
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	4619      	mov	r1, r3
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff f926 	bl	80033bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004170:	e00e      	b.n	8004190 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	60bb      	str	r3, [r7, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041b6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
 80041d4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041f4:	d172      	bne.n	80042dc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041f6:	7bfb      	ldrb	r3, [r7, #15]
 80041f8:	2b22      	cmp	r3, #34	@ 0x22
 80041fa:	d002      	beq.n	8004202 <I2C_Slave_STOPF+0x6a>
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004200:	d135      	bne.n	800426e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b29a      	uxth	r2, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d005      	beq.n	8004226 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800421e:	f043 0204 	orr.w	r2, r3, #4
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004234:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423a:	4618      	mov	r0, r3
 800423c:	f7fe f892 	bl	8002364 <HAL_DMA_GetState>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d049      	beq.n	80042da <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800424a:	4a69      	ldr	r2, [pc, #420]	@ (80043f0 <I2C_Slave_STOPF+0x258>)
 800424c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd feda 	bl	800200c <HAL_DMA_Abort_IT>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d03d      	beq.n	80042da <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004268:	4610      	mov	r0, r2
 800426a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800426c:	e035      	b.n	80042da <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d005      	beq.n	8004292 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe f85c 	bl	8002364 <HAL_DMA_GetState>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d014      	beq.n	80042dc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b6:	4a4e      	ldr	r2, [pc, #312]	@ (80043f0 <I2C_Slave_STOPF+0x258>)
 80042b8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd fea4 	bl	800200c <HAL_DMA_Abort_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042d4:	4610      	mov	r0, r2
 80042d6:	4798      	blx	r3
 80042d8:	e000      	b.n	80042dc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042da:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d03e      	beq.n	8004364 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d112      	bne.n	800431a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b40      	cmp	r3, #64	@ 0x40
 8004326:	d112      	bne.n	800434e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29b      	uxth	r3, r3
 8004346:	3b01      	subs	r3, #1
 8004348:	b29a      	uxth	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	f043 0204 	orr.w	r2, r3, #4
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f8b7 	bl	80044e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004372:	e039      	b.n	80043e8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b2a      	cmp	r3, #42	@ 0x2a
 8004378:	d109      	bne.n	800438e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2228      	movs	r2, #40	@ 0x28
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff f80d 	bl	80033a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b28      	cmp	r3, #40	@ 0x28
 8004398:	d111      	bne.n	80043be <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <I2C_Slave_STOPF+0x25c>)
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7ff f80e 	bl	80033d8 <HAL_I2C_ListenCpltCallback>
}
 80043bc:	e014      	b.n	80043e8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	2b22      	cmp	r3, #34	@ 0x22
 80043c4:	d002      	beq.n	80043cc <I2C_Slave_STOPF+0x234>
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b22      	cmp	r3, #34	@ 0x22
 80043ca:	d10d      	bne.n	80043e8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7fe ffe0 	bl	80033a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	08004a81 	.word	0x08004a81
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004406:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d002      	beq.n	800441a <I2C_Slave_AF+0x22>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b20      	cmp	r3, #32
 8004418:	d129      	bne.n	800446e <I2C_Slave_AF+0x76>
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b28      	cmp	r3, #40	@ 0x28
 800441e:	d126      	bne.n	800446e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a2e      	ldr	r2, [pc, #184]	@ (80044dc <I2C_Slave_AF+0xe4>)
 8004424:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004434:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800443e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe ffb6 	bl	80033d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800446c:	e031      	b.n	80044d2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	2b21      	cmp	r3, #33	@ 0x21
 8004472:	d129      	bne.n	80044c8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <I2C_Slave_AF+0xe4>)
 8004478:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2221      	movs	r2, #33	@ 0x21
 800447e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800449e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fe fb2e 	bl	8002b1c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fe ff67 	bl	8003394 <HAL_I2C_SlaveTxCpltCallback>
}
 80044c6:	e004      	b.n	80044d2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044d0:	615a      	str	r2, [r3, #20]
}
 80044d2:	bf00      	nop
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	ffff0000 	.word	0xffff0000

080044e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80044f8:	7bbb      	ldrb	r3, [r7, #14]
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d002      	beq.n	8004504 <I2C_ITError+0x24>
 80044fe:	7bbb      	ldrb	r3, [r7, #14]
 8004500:	2b40      	cmp	r3, #64	@ 0x40
 8004502:	d10a      	bne.n	800451a <I2C_ITError+0x3a>
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b22      	cmp	r3, #34	@ 0x22
 8004508:	d107      	bne.n	800451a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004518:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800451a:	7bfb      	ldrb	r3, [r7, #15]
 800451c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004520:	2b28      	cmp	r3, #40	@ 0x28
 8004522:	d107      	bne.n	8004534 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2228      	movs	r2, #40	@ 0x28
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004532:	e015      	b.n	8004560 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800453e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004542:	d00a      	beq.n	800455a <I2C_ITError+0x7a>
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b60      	cmp	r3, #96	@ 0x60
 8004548:	d007      	beq.n	800455a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800456a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800456e:	d162      	bne.n	8004636 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800457e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004584:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d020      	beq.n	80045d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004592:	4a6a      	ldr	r2, [pc, #424]	@ (800473c <I2C_ITError+0x25c>)
 8004594:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459a:	4618      	mov	r0, r3
 800459c:	f7fd fd36 	bl	800200c <HAL_DMA_Abort_IT>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8089 	beq.w	80046ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80045ca:	4610      	mov	r0, r2
 80045cc:	4798      	blx	r3
 80045ce:	e074      	b.n	80046ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d4:	4a59      	ldr	r2, [pc, #356]	@ (800473c <I2C_ITError+0x25c>)
 80045d6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fd fd15 	bl	800200c <HAL_DMA_Abort_IT>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d068      	beq.n	80046ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f2:	2b40      	cmp	r3, #64	@ 0x40
 80045f4:	d10b      	bne.n	800460e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2220      	movs	r2, #32
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004630:	4610      	mov	r0, r2
 8004632:	4798      	blx	r3
 8004634:	e041      	b.n	80046ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b60      	cmp	r3, #96	@ 0x60
 8004640:	d125      	bne.n	800468e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800465a:	2b40      	cmp	r3, #64	@ 0x40
 800465c:	d10b      	bne.n	8004676 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0201 	bic.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fe fece 	bl	8003428 <HAL_I2C_AbortCpltCallback>
 800468c:	e015      	b.n	80046ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d10b      	bne.n	80046b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691a      	ldr	r2, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fe fead 	bl	8003414 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10e      	bne.n	80046e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d007      	beq.n	80046f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80046f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	2b04      	cmp	r3, #4
 800470a:	d113      	bne.n	8004734 <I2C_ITError+0x254>
 800470c:	7bfb      	ldrb	r3, [r7, #15]
 800470e:	2b28      	cmp	r3, #40	@ 0x28
 8004710:	d110      	bne.n	8004734 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <I2C_ITError+0x260>)
 8004716:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fe52 	bl	80033d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08004a81 	.word	0x08004a81
 8004740:	ffff0000 	.word	0xffff0000

08004744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b088      	sub	sp, #32
 8004748:	af02      	add	r7, sp, #8
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	603b      	str	r3, [r7, #0]
 8004750:	460b      	mov	r3, r1
 8004752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d006      	beq.n	800476e <I2C_MasterRequestWrite+0x2a>
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d003      	beq.n	800476e <I2C_MasterRequestWrite+0x2a>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800476c:	d108      	bne.n	8004780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e00b      	b.n	8004798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004784:	2b12      	cmp	r3, #18
 8004786:	d107      	bne.n	8004798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fa13 	bl	8004bd0 <I2C_WaitOnFlagUntilTimeout>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00d      	beq.n	80047cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047be:	d103      	bne.n	80047c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e035      	b.n	8004838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047d4:	d108      	bne.n	80047e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047e4:	611a      	str	r2, [r3, #16]
 80047e6:	e01b      	b.n	8004820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047e8:	897b      	ldrh	r3, [r7, #10]
 80047ea:	11db      	asrs	r3, r3, #7
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	f003 0306 	and.w	r3, r3, #6
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f063 030f 	orn	r3, r3, #15
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	490e      	ldr	r1, [pc, #56]	@ (8004840 <I2C_MasterRequestWrite+0xfc>)
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fa5c 	bl	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e010      	b.n	8004838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004816:	897b      	ldrh	r3, [r7, #10]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4907      	ldr	r1, [pc, #28]	@ (8004844 <I2C_MasterRequestWrite+0x100>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fa4c 	bl	8004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	00010008 	.word	0x00010008
 8004844:	00010002 	.word	0x00010002

08004848 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004864:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800487a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004880:	2b00      	cmp	r3, #0
 8004882:	d003      	beq.n	800488c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004888:	2200      	movs	r2, #0
 800488a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	2200      	movs	r2, #0
 800489a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80048a2:	2b21      	cmp	r3, #33	@ 0x21
 80048a4:	d007      	beq.n	80048b6 <I2C_DMAXferCplt+0x6e>
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80048ac:	2b22      	cmp	r3, #34	@ 0x22
 80048ae:	d131      	bne.n	8004914 <I2C_DMAXferCplt+0xcc>
 80048b0:	7cbb      	ldrb	r3, [r7, #18]
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d12e      	bne.n	8004914 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2200      	movs	r2, #0
 80048ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	2b29      	cmp	r3, #41	@ 0x29
 80048d0:	d10a      	bne.n	80048e8 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2221      	movs	r2, #33	@ 0x21
 80048d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2228      	movs	r2, #40	@ 0x28
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048e0:	6978      	ldr	r0, [r7, #20]
 80048e2:	f7fe fd57 	bl	8003394 <HAL_I2C_SlaveTxCpltCallback>
 80048e6:	e00c      	b.n	8004902 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80048ec:	d109      	bne.n	8004902 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2222      	movs	r2, #34	@ 0x22
 80048f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2228      	movs	r2, #40	@ 0x28
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	f7fe fd53 	bl	80033a8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004910:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004912:	e074      	b.n	80049fe <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d06e      	beq.n	80049fe <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d107      	bne.n	800493a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004938:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004948:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004950:	d009      	beq.n	8004966 <I2C_DMAXferCplt+0x11e>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b08      	cmp	r3, #8
 8004956:	d006      	beq.n	8004966 <I2C_DMAXferCplt+0x11e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800495e:	d002      	beq.n	8004966 <I2C_DMAXferCplt+0x11e>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b20      	cmp	r3, #32
 8004964:	d107      	bne.n	8004976 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004974:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004984:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004994:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2200      	movs	r2, #0
 800499a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80049a4:	6978      	ldr	r0, [r7, #20]
 80049a6:	f7fe fd35 	bl	8003414 <HAL_I2C_ErrorCallback>
}
 80049aa:	e028      	b.n	80049fe <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	2220      	movs	r2, #32
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	d10a      	bne.n	80049d6 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	2200      	movs	r2, #0
 80049cc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7fe fd16 	bl	8003400 <HAL_I2C_MemRxCpltCallback>
}
 80049d4:	e013      	b.n	80049fe <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d002      	beq.n	80049ea <I2C_DMAXferCplt+0x1a2>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d103      	bne.n	80049f2 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80049f0:	e002      	b.n	80049f8 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2212      	movs	r2, #18
 80049f6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	f7fc fafb 	bl	8000ff4 <HAL_I2C_MasterRxCpltCallback>
}
 80049fe:	bf00      	nop
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a20:	2200      	movs	r2, #0
 8004a22:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	2200      	movs	r2, #0
 8004a32:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fd fca3 	bl	8002380 <HAL_DMA_GetError>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d01b      	beq.n	8004a78 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6a:	f043 0210 	orr.w	r2, r3, #16
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7fe fcce 	bl	8003414 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a90:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a98:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc8 <I2C_DMAAbort+0x148>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	08db      	lsrs	r3, r3, #3
 8004aa0:	4a4a      	ldr	r2, [pc, #296]	@ (8004bcc <I2C_DMAAbort+0x14c>)
 8004aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa6:	0a1a      	lsrs	r2, r3, #8
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	00da      	lsls	r2, r3, #3
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abe:	f043 0220 	orr.w	r2, r3, #32
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004ac6:	e00a      	b.n	8004ade <I2C_DMAAbort+0x5e>
    }
    count--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004adc:	d0ea      	beq.n	8004ab4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aea:	2200      	movs	r2, #0
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	2200      	movs	r2, #0
 8004afc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b0c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2200      	movs	r2, #0
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b20:	2200      	movs	r2, #0
 8004b22:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	2200      	movs	r2, #0
 8004b32:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0201 	bic.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b60      	cmp	r3, #96	@ 0x60
 8004b4e:	d10e      	bne.n	8004b6e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b66:	6978      	ldr	r0, [r7, #20]
 8004b68:	f7fe fc5e 	bl	8003428 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b6c:	e027      	b.n	8004bbe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004b74:	2b28      	cmp	r3, #40	@ 0x28
 8004b76:	d117      	bne.n	8004ba8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0201 	orr.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2228      	movs	r2, #40	@ 0x28
 8004ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ba6:	e007      	b.n	8004bb8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004bb8:	6978      	ldr	r0, [r7, #20]
 8004bba:	f7fe fc2b 	bl	8003414 <HAL_I2C_ErrorCallback>
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000004 	.word	0x20000004
 8004bcc:	14f8b589 	.word	0x14f8b589

08004bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be0:	e048      	b.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be8:	d044      	beq.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bea:	f7fc ff7b 	bl	8001ae4 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d302      	bcc.n	8004c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d139      	bne.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10d      	bne.n	8004c26 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	43da      	mvns	r2, r3
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	4013      	ands	r3, r2
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2301      	moveq	r3, #1
 8004c1e:	2300      	movne	r3, #0
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	e00c      	b.n	8004c40 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	43da      	mvns	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	461a      	mov	r2, r3
 8004c40:	79fb      	ldrb	r3, [r7, #7]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d116      	bne.n	8004c74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e023      	b.n	8004cbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	0c1b      	lsrs	r3, r3, #16
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10d      	bne.n	8004c9a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	43da      	mvns	r2, r3
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	bf0c      	ite	eq
 8004c90:	2301      	moveq	r3, #1
 8004c92:	2300      	movne	r3, #0
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	e00c      	b.n	8004cb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d093      	beq.n	8004be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
 8004cd0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004cd2:	e071      	b.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ce2:	d123      	bne.n	8004d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e067      	b.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d32:	d041      	beq.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d34:	f7fc fed6 	bl	8001ae4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d136      	bne.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10c      	bne.n	8004d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	43da      	mvns	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	4013      	ands	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bf14      	ite	ne
 8004d66:	2301      	movne	r3, #1
 8004d68:	2300      	moveq	r3, #0
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	e00b      	b.n	8004d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	43da      	mvns	r2, r3
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf14      	ite	ne
 8004d80:	2301      	movne	r3, #1
 8004d82:	2300      	moveq	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e021      	b.n	8004dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10c      	bne.n	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf14      	ite	ne
 8004dd4:	2301      	movne	r3, #1
 8004dd6:	2300      	moveq	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	e00b      	b.n	8004df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	43da      	mvns	r2, r3
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	4013      	ands	r3, r2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f af6d 	bne.w	8004cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3710      	adds	r7, #16
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e10:	e034      	b.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f8b8 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d001      	beq.n	8004e22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e034      	b.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d028      	beq.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fc fe5b 	bl	8001ae4 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d11d      	bne.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4a:	2b80      	cmp	r3, #128	@ 0x80
 8004e4c:	d016      	beq.n	8004e7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e007      	b.n	8004e8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e86:	2b80      	cmp	r3, #128	@ 0x80
 8004e88:	d1c3      	bne.n	8004e12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea0:	e034      	b.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 f870 	bl	8004f88 <I2C_IsAcknowledgeFailed>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e034      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb8:	d028      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eba:	f7fc fe13 	bl	8001ae4 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d302      	bcc.n	8004ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11d      	bne.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d016      	beq.n	8004f0c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef8:	f043 0220 	orr.w	r2, r3, #32
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e007      	b.n	8004f1c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d1c3      	bne.n	8004ea2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f30:	4b13      	ldr	r3, [pc, #76]	@ (8004f80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	08db      	lsrs	r3, r3, #3
 8004f36:	4a13      	ldr	r2, [pc, #76]	@ (8004f84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004f38:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3c:	0a1a      	lsrs	r2, r3, #8
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d107      	bne.n	8004f62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f043 0220 	orr.w	r2, r3, #32
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e008      	b.n	8004f74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f70:	d0e9      	beq.n	8004f46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000004 	.word	0x20000004
 8004f84:	14f8b589 	.word	0x14f8b589

08004f88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9e:	d11b      	bne.n	8004fd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fa8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004ff6:	d103      	bne.n	8005000 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ffe:	e007      	b.n	8005010 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005008:	d102      	bne.n	8005010 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2208      	movs	r2, #8
 800500e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e267      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d075      	beq.n	8005126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800503a:	4b88      	ldr	r3, [pc, #544]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 030c 	and.w	r3, r3, #12
 8005042:	2b04      	cmp	r3, #4
 8005044:	d00c      	beq.n	8005060 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005046:	4b85      	ldr	r3, [pc, #532]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800504e:	2b08      	cmp	r3, #8
 8005050:	d112      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005052:	4b82      	ldr	r3, [pc, #520]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800505e:	d10b      	bne.n	8005078 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005060:	4b7e      	ldr	r3, [pc, #504]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d05b      	beq.n	8005124 <HAL_RCC_OscConfig+0x108>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d157      	bne.n	8005124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e242      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005080:	d106      	bne.n	8005090 <HAL_RCC_OscConfig+0x74>
 8005082:	4b76      	ldr	r3, [pc, #472]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a75      	ldr	r2, [pc, #468]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e01d      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005098:	d10c      	bne.n	80050b4 <HAL_RCC_OscConfig+0x98>
 800509a:	4b70      	ldr	r3, [pc, #448]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a6f      	ldr	r2, [pc, #444]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	4b6d      	ldr	r3, [pc, #436]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a6c      	ldr	r2, [pc, #432]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	e00b      	b.n	80050cc <HAL_RCC_OscConfig+0xb0>
 80050b4:	4b69      	ldr	r3, [pc, #420]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a68      	ldr	r2, [pc, #416]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	4b66      	ldr	r3, [pc, #408]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a65      	ldr	r2, [pc, #404]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d013      	beq.n	80050fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fc fd06 	bl	8001ae4 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fc fd02 	bl	8001ae4 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	@ 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e207      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ee:	4b5b      	ldr	r3, [pc, #364]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0xc0>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fc:	f7fc fcf2 	bl	8001ae4 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005104:	f7fc fcee 	bl	8001ae4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b64      	cmp	r3, #100	@ 0x64
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e1f3      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005116:	4b51      	ldr	r3, [pc, #324]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1f0      	bne.n	8005104 <HAL_RCC_OscConfig+0xe8>
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d063      	beq.n	80051fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005132:	4b4a      	ldr	r3, [pc, #296]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513e:	4b47      	ldr	r3, [pc, #284]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005146:	2b08      	cmp	r3, #8
 8005148:	d11c      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800514a:	4b44      	ldr	r3, [pc, #272]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d116      	bne.n	8005184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005156:	4b41      	ldr	r3, [pc, #260]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d001      	beq.n	800516e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e1c7      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b3b      	ldr	r3, [pc, #236]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4937      	ldr	r1, [pc, #220]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005182:	e03a      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d020      	beq.n	80051ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800518c:	4b34      	ldr	r3, [pc, #208]	@ (8005260 <HAL_RCC_OscConfig+0x244>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005192:	f7fc fca7 	bl	8001ae4 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800519a:	f7fc fca3 	bl	8001ae4 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e1a8      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051ac:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051b8:	4b28      	ldr	r3, [pc, #160]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4925      	ldr	r1, [pc, #148]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	600b      	str	r3, [r1, #0]
 80051cc:	e015      	b.n	80051fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ce:	4b24      	ldr	r3, [pc, #144]	@ (8005260 <HAL_RCC_OscConfig+0x244>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051d4:	f7fc fc86 	bl	8001ae4 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051da:	e008      	b.n	80051ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051dc:	f7fc fc82 	bl	8001ae4 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e187      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ee:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1f0      	bne.n	80051dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d036      	beq.n	8005274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d016      	beq.n	800523c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800520e:	4b15      	ldr	r3, [pc, #84]	@ (8005264 <HAL_RCC_OscConfig+0x248>)
 8005210:	2201      	movs	r2, #1
 8005212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005214:	f7fc fc66 	bl	8001ae4 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800521c:	f7fc fc62 	bl	8001ae4 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e167      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800522e:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <HAL_RCC_OscConfig+0x240>)
 8005230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x200>
 800523a:	e01b      	b.n	8005274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <HAL_RCC_OscConfig+0x248>)
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005242:	f7fc fc4f 	bl	8001ae4 <HAL_GetTick>
 8005246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	e00e      	b.n	8005268 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800524a:	f7fc fc4b 	bl	8001ae4 <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	2b02      	cmp	r3, #2
 8005256:	d907      	bls.n	8005268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e150      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
 800525c:	40023800 	.word	0x40023800
 8005260:	42470000 	.word	0x42470000
 8005264:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005268:	4b88      	ldr	r3, [pc, #544]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800526a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1ea      	bne.n	800524a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8097 	beq.w	80053b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005286:	4b81      	ldr	r3, [pc, #516]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10f      	bne.n	80052b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60bb      	str	r3, [r7, #8]
 8005296:	4b7d      	ldr	r3, [pc, #500]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	4a7c      	ldr	r2, [pc, #496]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80052a2:	4b7a      	ldr	r3, [pc, #488]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b2:	4b77      	ldr	r3, [pc, #476]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d118      	bne.n	80052f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052be:	4b74      	ldr	r3, [pc, #464]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a73      	ldr	r2, [pc, #460]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ca:	f7fc fc0b 	bl	8001ae4 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fc fc07 	bl	8001ae4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e10c      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052e4:	4b6a      	ldr	r3, [pc, #424]	@ (8005490 <HAL_RCC_OscConfig+0x474>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d106      	bne.n	8005306 <HAL_RCC_OscConfig+0x2ea>
 80052f8:	4b64      	ldr	r3, [pc, #400]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fc:	4a63      	ldr	r2, [pc, #396]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	6713      	str	r3, [r2, #112]	@ 0x70
 8005304:	e01c      	b.n	8005340 <HAL_RCC_OscConfig+0x324>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	2b05      	cmp	r3, #5
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x30c>
 800530e:	4b5f      	ldr	r3, [pc, #380]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005312:	4a5e      	ldr	r2, [pc, #376]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	6713      	str	r3, [r2, #112]	@ 0x70
 800531a:	4b5c      	ldr	r3, [pc, #368]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531e:	4a5b      	ldr	r2, [pc, #364]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	6713      	str	r3, [r2, #112]	@ 0x70
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0x324>
 8005328:	4b58      	ldr	r3, [pc, #352]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800532c:	4a57      	ldr	r2, [pc, #348]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800532e:	f023 0301 	bic.w	r3, r3, #1
 8005332:	6713      	str	r3, [r2, #112]	@ 0x70
 8005334:	4b55      	ldr	r3, [pc, #340]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005338:	4a54      	ldr	r2, [pc, #336]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 800533a:	f023 0304 	bic.w	r3, r3, #4
 800533e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d015      	beq.n	8005374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005348:	f7fc fbcc 	bl	8001ae4 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534e:	e00a      	b.n	8005366 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005350:	f7fc fbc8 	bl	8001ae4 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535e:	4293      	cmp	r3, r2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e0cb      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005366:	4b49      	ldr	r3, [pc, #292]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0ee      	beq.n	8005350 <HAL_RCC_OscConfig+0x334>
 8005372:	e014      	b.n	800539e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005374:	f7fc fbb6 	bl	8001ae4 <HAL_GetTick>
 8005378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800537a:	e00a      	b.n	8005392 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537c:	f7fc fbb2 	bl	8001ae4 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800538a:	4293      	cmp	r3, r2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e0b5      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005392:	4b3e      	ldr	r3, [pc, #248]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005396:	f003 0302 	and.w	r3, r3, #2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1ee      	bne.n	800537c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d105      	bne.n	80053b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a4:	4b39      	ldr	r3, [pc, #228]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a8:	4a38      	ldr	r2, [pc, #224]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80a1 	beq.w	80054fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053ba:	4b34      	ldr	r3, [pc, #208]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f003 030c 	and.w	r3, r3, #12
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d05c      	beq.n	8005480 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d141      	bne.n	8005452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ce:	4b31      	ldr	r3, [pc, #196]	@ (8005494 <HAL_RCC_OscConfig+0x478>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d4:	f7fc fb86 	bl	8001ae4 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc fb82 	bl	8001ae4 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e087      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	4b27      	ldr	r3, [pc, #156]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69da      	ldr	r2, [r3, #28]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	431a      	orrs	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	019b      	lsls	r3, r3, #6
 800540a:	431a      	orrs	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	085b      	lsrs	r3, r3, #1
 8005412:	3b01      	subs	r3, #1
 8005414:	041b      	lsls	r3, r3, #16
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	491b      	ldr	r1, [pc, #108]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005424:	4b1b      	ldr	r3, [pc, #108]	@ (8005494 <HAL_RCC_OscConfig+0x478>)
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800542a:	f7fc fb5b 	bl	8001ae4 <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005432:	f7fc fb57 	bl	8001ae4 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b02      	cmp	r3, #2
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e05c      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005444:	4b11      	ldr	r3, [pc, #68]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d0f0      	beq.n	8005432 <HAL_RCC_OscConfig+0x416>
 8005450:	e054      	b.n	80054fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005452:	4b10      	ldr	r3, [pc, #64]	@ (8005494 <HAL_RCC_OscConfig+0x478>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005458:	f7fc fb44 	bl	8001ae4 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fc fb40 	bl	8001ae4 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e045      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005472:	4b06      	ldr	r3, [pc, #24]	@ (800548c <HAL_RCC_OscConfig+0x470>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1f0      	bne.n	8005460 <HAL_RCC_OscConfig+0x444>
 800547e:	e03d      	b.n	80054fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d107      	bne.n	8005498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e038      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
 800548c:	40023800 	.word	0x40023800
 8005490:	40007000 	.word	0x40007000
 8005494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005498:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <HAL_RCC_OscConfig+0x4ec>)
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d028      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d121      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d11a      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054c8:	4013      	ands	r3, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d111      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054de:	085b      	lsrs	r3, r3, #1
 80054e0:	3b01      	subs	r3, #1
 80054e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d107      	bne.n	80054f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023800 	.word	0x40023800

0800550c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0cc      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b68      	ldr	r3, [pc, #416]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0307 	and.w	r3, r3, #7
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d90c      	bls.n	8005548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b65      	ldr	r3, [pc, #404]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	b2d2      	uxtb	r2, r2
 8005534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005536:	4b63      	ldr	r3, [pc, #396]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0b8      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d020      	beq.n	8005596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005560:	4b59      	ldr	r3, [pc, #356]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	4a58      	ldr	r2, [pc, #352]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005566:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800556a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005578:	4b53      	ldr	r3, [pc, #332]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	4a52      	ldr	r2, [pc, #328]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005584:	4b50      	ldr	r3, [pc, #320]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	494d      	ldr	r1, [pc, #308]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005592:	4313      	orrs	r3, r2
 8005594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d044      	beq.n	800562c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d107      	bne.n	80055ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055aa:	4b47      	ldr	r3, [pc, #284]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d119      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e07f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d107      	bne.n	80055da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ca:	4b3f      	ldr	r3, [pc, #252]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d109      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e06f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055da:	4b3b      	ldr	r3, [pc, #236]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e067      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ea:	4b37      	ldr	r3, [pc, #220]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f023 0203 	bic.w	r2, r3, #3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4934      	ldr	r1, [pc, #208]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fc fa72 	bl	8001ae4 <HAL_GetTick>
 8005600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005602:	e00a      	b.n	800561a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005604:	f7fc fa6e 	bl	8001ae4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e04f      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	4b2b      	ldr	r3, [pc, #172]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 020c 	and.w	r2, r3, #12
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	429a      	cmp	r2, r3
 800562a:	d1eb      	bne.n	8005604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800562c:	4b25      	ldr	r3, [pc, #148]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	429a      	cmp	r2, r3
 8005638:	d20c      	bcs.n	8005654 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800563a:	4b22      	ldr	r3, [pc, #136]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005642:	4b20      	ldr	r3, [pc, #128]	@ (80056c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	429a      	cmp	r2, r3
 800564e:	d001      	beq.n	8005654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e032      	b.n	80056ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b00      	cmp	r3, #0
 800565e:	d008      	beq.n	8005672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005660:	4b19      	ldr	r3, [pc, #100]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	4916      	ldr	r1, [pc, #88]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800566e:	4313      	orrs	r3, r2
 8005670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800567e:	4b12      	ldr	r3, [pc, #72]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	490e      	ldr	r1, [pc, #56]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800568e:	4313      	orrs	r3, r2
 8005690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005692:	f000 f821 	bl	80056d8 <HAL_RCC_GetSysClockFreq>
 8005696:	4602      	mov	r2, r0
 8005698:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	091b      	lsrs	r3, r3, #4
 800569e:	f003 030f 	and.w	r3, r3, #15
 80056a2:	490a      	ldr	r1, [pc, #40]	@ (80056cc <HAL_RCC_ClockConfig+0x1c0>)
 80056a4:	5ccb      	ldrb	r3, [r1, r3]
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	4a09      	ldr	r2, [pc, #36]	@ (80056d0 <HAL_RCC_ClockConfig+0x1c4>)
 80056ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80056ae:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <HAL_RCC_ClockConfig+0x1c8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc f9d2 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	40023c00 	.word	0x40023c00
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800b9f0 	.word	0x0800b9f0
 80056d0:	20000004 	.word	0x20000004
 80056d4:	20000008 	.word	0x20000008

080056d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b094      	sub	sp, #80	@ 0x50
 80056de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056f0:	4b79      	ldr	r3, [pc, #484]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 030c 	and.w	r3, r3, #12
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d00d      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x40>
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	f200 80e1 	bhi.w	80058c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_RCC_GetSysClockFreq+0x34>
 8005706:	2b04      	cmp	r3, #4
 8005708:	d003      	beq.n	8005712 <HAL_RCC_GetSysClockFreq+0x3a>
 800570a:	e0db      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800570c:	4b73      	ldr	r3, [pc, #460]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x204>)
 800570e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005710:	e0db      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005712:	4b73      	ldr	r3, [pc, #460]	@ (80058e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005714:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005716:	e0d8      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005718:	4b6f      	ldr	r3, [pc, #444]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005720:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005722:	4b6d      	ldr	r3, [pc, #436]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d063      	beq.n	80057f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800572e:	4b6a      	ldr	r3, [pc, #424]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	099b      	lsrs	r3, r3, #6
 8005734:	2200      	movs	r2, #0
 8005736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005738:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	633b      	str	r3, [r7, #48]	@ 0x30
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	@ 0x34
 8005746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f04f 0000 	mov.w	r0, #0
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	0159      	lsls	r1, r3, #5
 8005758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800575c:	0150      	lsls	r0, r2, #5
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4621      	mov	r1, r4
 8005764:	1a51      	subs	r1, r2, r1
 8005766:	6139      	str	r1, [r7, #16]
 8005768:	4629      	mov	r1, r5
 800576a:	eb63 0301 	sbc.w	r3, r3, r1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800577c:	4659      	mov	r1, fp
 800577e:	018b      	lsls	r3, r1, #6
 8005780:	4651      	mov	r1, sl
 8005782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005786:	4651      	mov	r1, sl
 8005788:	018a      	lsls	r2, r1, #6
 800578a:	4651      	mov	r1, sl
 800578c:	ebb2 0801 	subs.w	r8, r2, r1
 8005790:	4659      	mov	r1, fp
 8005792:	eb63 0901 	sbc.w	r9, r3, r1
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057aa:	4690      	mov	r8, r2
 80057ac:	4699      	mov	r9, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	eb18 0303 	adds.w	r3, r8, r3
 80057b4:	60bb      	str	r3, [r7, #8]
 80057b6:	462b      	mov	r3, r5
 80057b8:	eb49 0303 	adc.w	r3, r9, r3
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ca:	4629      	mov	r1, r5
 80057cc:	024b      	lsls	r3, r1, #9
 80057ce:	4621      	mov	r1, r4
 80057d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057d4:	4621      	mov	r1, r4
 80057d6:	024a      	lsls	r2, r1, #9
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057de:	2200      	movs	r2, #0
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057e8:	f7fb fa56 	bl	8000c98 <__aeabi_uldivmod>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4613      	mov	r3, r2
 80057f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f4:	e058      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057f6:	4b38      	ldr	r3, [pc, #224]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	099b      	lsrs	r3, r3, #6
 80057fc:	2200      	movs	r2, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	4611      	mov	r1, r2
 8005802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005806:	623b      	str	r3, [r7, #32]
 8005808:	2300      	movs	r3, #0
 800580a:	627b      	str	r3, [r7, #36]	@ 0x24
 800580c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005810:	4642      	mov	r2, r8
 8005812:	464b      	mov	r3, r9
 8005814:	f04f 0000 	mov.w	r0, #0
 8005818:	f04f 0100 	mov.w	r1, #0
 800581c:	0159      	lsls	r1, r3, #5
 800581e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005822:	0150      	lsls	r0, r2, #5
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4641      	mov	r1, r8
 800582a:	ebb2 0a01 	subs.w	sl, r2, r1
 800582e:	4649      	mov	r1, r9
 8005830:	eb63 0b01 	sbc.w	fp, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005848:	ebb2 040a 	subs.w	r4, r2, sl
 800584c:	eb63 050b 	sbc.w	r5, r3, fp
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	00eb      	lsls	r3, r5, #3
 800585a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800585e:	00e2      	lsls	r2, r4, #3
 8005860:	4614      	mov	r4, r2
 8005862:	461d      	mov	r5, r3
 8005864:	4643      	mov	r3, r8
 8005866:	18e3      	adds	r3, r4, r3
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	464b      	mov	r3, r9
 800586c:	eb45 0303 	adc.w	r3, r5, r3
 8005870:	607b      	str	r3, [r7, #4]
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800587e:	4629      	mov	r1, r5
 8005880:	028b      	lsls	r3, r1, #10
 8005882:	4621      	mov	r1, r4
 8005884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005888:	4621      	mov	r1, r4
 800588a:	028a      	lsls	r2, r1, #10
 800588c:	4610      	mov	r0, r2
 800588e:	4619      	mov	r1, r3
 8005890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005892:	2200      	movs	r2, #0
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	61fa      	str	r2, [r7, #28]
 8005898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800589c:	f7fb f9fc 	bl	8000c98 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4613      	mov	r3, r2
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058a8:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	3301      	adds	r3, #1
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80058b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058c2:	e002      	b.n	80058ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <HAL_RCC_GetSysClockFreq+0x204>)
 80058c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3750      	adds	r7, #80	@ 0x50
 80058d0:	46bd      	mov	sp, r7
 80058d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d6:	bf00      	nop
 80058d8:	40023800 	.word	0x40023800
 80058dc:	00f42400 	.word	0x00f42400
 80058e0:	007a1200 	.word	0x007a1200

080058e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058e8:	4b03      	ldr	r3, [pc, #12]	@ (80058f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80058ea:	681b      	ldr	r3, [r3, #0]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	20000004 	.word	0x20000004

080058fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005900:	f7ff fff0 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 8005904:	4602      	mov	r2, r0
 8005906:	4b05      	ldr	r3, [pc, #20]	@ (800591c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	0a9b      	lsrs	r3, r3, #10
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	4903      	ldr	r1, [pc, #12]	@ (8005920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005912:	5ccb      	ldrb	r3, [r1, r3]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005918:	4618      	mov	r0, r3
 800591a:	bd80      	pop	{r7, pc}
 800591c:	40023800 	.word	0x40023800
 8005920:	0800ba00 	.word	0x0800ba00

08005924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005928:	f7ff ffdc 	bl	80058e4 <HAL_RCC_GetHCLKFreq>
 800592c:	4602      	mov	r2, r0
 800592e:	4b05      	ldr	r3, [pc, #20]	@ (8005944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	0b5b      	lsrs	r3, r3, #13
 8005934:	f003 0307 	and.w	r3, r3, #7
 8005938:	4903      	ldr	r1, [pc, #12]	@ (8005948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800593a:	5ccb      	ldrb	r3, [r1, r3]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005940:	4618      	mov	r0, r3
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40023800 	.word	0x40023800
 8005948:	0800ba00 	.word	0x0800ba00

0800594c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e041      	b.n	80059e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fb fe3a 	bl	80015ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	3304      	adds	r3, #4
 8005988:	4619      	mov	r1, r3
 800598a:	4610      	mov	r0, r2
 800598c:	f000 fa70 	bl	8005e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d001      	beq.n	8005a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e044      	b.n	8005a8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1e      	ldr	r2, [pc, #120]	@ (8005a9c <HAL_TIM_Base_Start_IT+0xb0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d018      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x6c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a2e:	d013      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x6c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00e      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x6c>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d009      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x6c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x6c>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a16      	ldr	r2, [pc, #88]	@ (8005aac <HAL_TIM_Base_Start_IT+0xc0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d111      	bne.n	8005a7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0307 	and.w	r3, r3, #7
 8005a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2b06      	cmp	r3, #6
 8005a68:	d010      	beq.n	8005a8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f042 0201 	orr.w	r2, r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	e007      	b.n	8005a8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40000400 	.word	0x40000400
 8005aa4:	40000800 	.word	0x40000800
 8005aa8:	40000c00 	.word	0x40000c00
 8005aac:	40014000 	.word	0x40014000

08005ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d020      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01b      	beq.n	8005b14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0202 	mvn.w	r2, #2
 8005ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f999 	bl	8005e32 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f98b 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f99c 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d020      	beq.n	8005b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01b      	beq.n	8005b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0204 	mvn.w	r2, #4
 8005b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f973 	bl	8005e32 <HAL_TIM_IC_CaptureCallback>
 8005b4c:	e005      	b.n	8005b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f965 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f976 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d020      	beq.n	8005bac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01b      	beq.n	8005bac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0208 	mvn.w	r2, #8
 8005b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2204      	movs	r2, #4
 8005b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 f94d 	bl	8005e32 <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f93f 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f950 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d020      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01b      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0210 	mvn.w	r2, #16
 8005bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f927 	bl	8005e32 <HAL_TIM_IC_CaptureCallback>
 8005be4:	e005      	b.n	8005bf2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f919 	bl	8005e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f92a 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00c      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d007      	beq.n	8005c1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f06f 0201 	mvn.w	r2, #1
 8005c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7fb fa44 	bl	80010a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00c      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d007      	beq.n	8005c40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 fab6 	bl	80061ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00c      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f8fb 	bl	8005e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00c      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f003 0320 	and.w	r3, r3, #32
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0220 	mvn.w	r2, #32
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fa88 	bl	8006198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3710      	adds	r7, #16
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d101      	bne.n	8005cac <HAL_TIM_ConfigClockSource+0x1c>
 8005ca8:	2302      	movs	r3, #2
 8005caa:	e0b4      	b.n	8005e16 <HAL_TIM_ConfigClockSource+0x186>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2202      	movs	r2, #2
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce4:	d03e      	beq.n	8005d64 <HAL_TIM_ConfigClockSource+0xd4>
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cea:	f200 8087 	bhi.w	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cf2:	f000 8086 	beq.w	8005e02 <HAL_TIM_ConfigClockSource+0x172>
 8005cf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfa:	d87f      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b70      	cmp	r3, #112	@ 0x70
 8005cfe:	d01a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0xa6>
 8005d00:	2b70      	cmp	r3, #112	@ 0x70
 8005d02:	d87b      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b60      	cmp	r3, #96	@ 0x60
 8005d06:	d050      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x11a>
 8005d08:	2b60      	cmp	r3, #96	@ 0x60
 8005d0a:	d877      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b50      	cmp	r3, #80	@ 0x50
 8005d0e:	d03c      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0xfa>
 8005d10:	2b50      	cmp	r3, #80	@ 0x50
 8005d12:	d873      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	d058      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x13a>
 8005d18:	2b40      	cmp	r3, #64	@ 0x40
 8005d1a:	d86f      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b30      	cmp	r3, #48	@ 0x30
 8005d1e:	d064      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b30      	cmp	r3, #48	@ 0x30
 8005d22:	d86b      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d060      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d867      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d05c      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d05a      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	e062      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d46:	f000 f999 	bl	800607c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005d58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	609a      	str	r2, [r3, #8]
      break;
 8005d62:	e04f      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005d74:	f000 f982 	bl	800607c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d86:	609a      	str	r2, [r3, #8]
      break;
 8005d88:	e03c      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 f8f6 	bl	8005f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2150      	movs	r1, #80	@ 0x50
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f94f 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005da8:	e02c      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005db6:	461a      	mov	r2, r3
 8005db8:	f000 f915 	bl	8005fe6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2160      	movs	r1, #96	@ 0x60
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f93f 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e01c      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f000 f8d6 	bl	8005f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2140      	movs	r1, #64	@ 0x40
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 f92f 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005de8:	e00c      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f000 f926 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005dfa:	e003      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005e00:	e000      	b.n	8005e04 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b083      	sub	sp, #12
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr

08005e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e32:	b480      	push	{r7}
 8005e34:	b083      	sub	sp, #12
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e4e:	bf00      	nop
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3a      	ldr	r2, [pc, #232]	@ (8005f6c <TIM_Base_SetConfig+0xfc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d00f      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e8e:	d00b      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a37      	ldr	r2, [pc, #220]	@ (8005f70 <TIM_Base_SetConfig+0x100>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d007      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a36      	ldr	r2, [pc, #216]	@ (8005f74 <TIM_Base_SetConfig+0x104>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d003      	beq.n	8005ea8 <TIM_Base_SetConfig+0x38>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a35      	ldr	r2, [pc, #212]	@ (8005f78 <TIM_Base_SetConfig+0x108>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d108      	bne.n	8005eba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	68fa      	ldr	r2, [r7, #12]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8005f6c <TIM_Base_SetConfig+0xfc>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01b      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec8:	d017      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	@ (8005f70 <TIM_Base_SetConfig+0x100>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a27      	ldr	r2, [pc, #156]	@ (8005f74 <TIM_Base_SetConfig+0x104>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a26      	ldr	r2, [pc, #152]	@ (8005f78 <TIM_Base_SetConfig+0x108>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a25      	ldr	r2, [pc, #148]	@ (8005f7c <TIM_Base_SetConfig+0x10c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a24      	ldr	r2, [pc, #144]	@ (8005f80 <TIM_Base_SetConfig+0x110>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0x8a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a23      	ldr	r2, [pc, #140]	@ (8005f84 <TIM_Base_SetConfig+0x114>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a0e      	ldr	r2, [pc, #56]	@ (8005f6c <TIM_Base_SetConfig+0xfc>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d103      	bne.n	8005f40 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d105      	bne.n	8005f5e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f023 0201 	bic.w	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0201 	bic.w	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 030a 	bic.w	r3, r3, #10
 8005fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	f023 0210 	bic.w	r2, r3, #16
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006022:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	f043 0307 	orr.w	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	431a      	orrs	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	609a      	str	r2, [r3, #8]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e050      	b.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68fa      	ldr	r2, [r7, #12]
 8006102:	4313      	orrs	r3, r2
 8006104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1c      	ldr	r2, [pc, #112]	@ (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d018      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006120:	d013      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a18      	ldr	r2, [pc, #96]	@ (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00e      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a16      	ldr	r2, [pc, #88]	@ (800618c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d009      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a15      	ldr	r2, [pc, #84]	@ (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d004      	beq.n	800614a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a13      	ldr	r2, [pc, #76]	@ (8006194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d10c      	bne.n	8006164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	4313      	orrs	r3, r2
 800615a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40014000 	.word	0x40014000

08006198 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d101      	bne.n	80061d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e042      	b.n	8006258 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fb fa26 	bl	8001638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2224      	movs	r2, #36	@ 0x24
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68da      	ldr	r2, [r3, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fdcb 	bl	8006da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	691a      	ldr	r2, [r3, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08c      	sub	sp, #48	@ 0x30
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b20      	cmp	r3, #32
 8006278:	d156      	bne.n	8006328 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_UART_Transmit_DMA+0x26>
 8006280:	88fb      	ldrh	r3, [r7, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e04f      	b.n	800632a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	88fa      	ldrh	r2, [r7, #6]
 8006294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	88fa      	ldrh	r2, [r7, #6]
 800629a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2221      	movs	r2, #33	@ 0x21
 80062a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ae:	4a21      	ldr	r2, [pc, #132]	@ (8006334 <HAL_UART_Transmit_DMA+0xd4>)
 80062b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b6:	4a20      	ldr	r2, [pc, #128]	@ (8006338 <HAL_UART_Transmit_DMA+0xd8>)
 80062b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062be:	4a1f      	ldr	r2, [pc, #124]	@ (800633c <HAL_UART_Transmit_DMA+0xdc>)
 80062c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	2200      	movs	r2, #0
 80062c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80062d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062d6:	6819      	ldr	r1, [r3, #0]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	461a      	mov	r2, r3
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	f7fb fdcb 	bl	8001e7c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3314      	adds	r3, #20
 80062f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	617b      	str	r3, [r7, #20]
   return(result);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006310:	627a      	str	r2, [r7, #36]	@ 0x24
 8006312:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6a39      	ldr	r1, [r7, #32]
 8006316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	61fb      	str	r3, [r7, #28]
   return(result);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e5      	bne.n	80062f0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	e000      	b.n	800632a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006328:	2302      	movs	r3, #2
  }
}
 800632a:	4618      	mov	r0, r3
 800632c:	3730      	adds	r7, #48	@ 0x30
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	080068cd 	.word	0x080068cd
 8006338:	08006967 	.word	0x08006967
 800633c:	08006983 	.word	0x08006983

08006340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b0ba      	sub	sp, #232	@ 0xe8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006366:	2300      	movs	r3, #0
 8006368:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800636c:	2300      	movs	r3, #0
 800636e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800637e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10f      	bne.n	80063a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_UART_IRQHandler+0x66>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fc40 	bl	8006c24 <UART_Receive_IT>
      return;
 80063a4:	e25b      	b.n	800685e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80de 	beq.w	800656c <HAL_UART_IRQHandler+0x22c>
 80063b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063b4:	f003 0301 	and.w	r3, r3, #1
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d106      	bne.n	80063ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80d1 	beq.w	800656c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80063ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ce:	f003 0301 	and.w	r3, r3, #1
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_UART_IRQHandler+0xae>
 80063d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e6:	f043 0201 	orr.w	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80063ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00b      	beq.n	8006412 <HAL_UART_IRQHandler+0xd2>
 80063fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	f043 0202 	orr.w	r2, r3, #2
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <HAL_UART_IRQHandler+0xf6>
 800641e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d005      	beq.n	8006436 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642e:	f043 0204 	orr.w	r2, r3, #4
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d011      	beq.n	8006466 <HAL_UART_IRQHandler+0x126>
 8006442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d105      	bne.n	800645a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800644e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d005      	beq.n	8006466 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645e:	f043 0208 	orr.w	r2, r3, #8
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 81f2 	beq.w	8006854 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_UART_IRQHandler+0x14e>
 800647c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	2b00      	cmp	r3, #0
 8006486:	d002      	beq.n	800648e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fbcb 	bl	8006c24 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d103      	bne.n	80064ba <HAL_UART_IRQHandler+0x17a>
 80064b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d04f      	beq.n	800655a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fad3 	bl	8006a66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064ca:	2b40      	cmp	r3, #64	@ 0x40
 80064cc:	d141      	bne.n	8006552 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3314      	adds	r3, #20
 80064d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80064e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80064e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3314      	adds	r3, #20
 80064f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80064fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80064fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1d9      	bne.n	80064ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d013      	beq.n	800654a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006526:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <HAL_UART_IRQHandler+0x3e0>)
 8006528:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652e:	4618      	mov	r0, r3
 8006530:	f7fb fd6c 	bl	800200c <HAL_DMA_Abort_IT>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006544:	4610      	mov	r0, r2
 8006546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	e00e      	b.n	8006568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f9a8 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006550:	e00a      	b.n	8006568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f9a4 	bl	80068a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006558:	e006      	b.n	8006568 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f9a0 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006566:	e175      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006568:	bf00      	nop
    return;
 800656a:	e173      	b.n	8006854 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006570:	2b01      	cmp	r3, #1
 8006572:	f040 814f 	bne.w	8006814 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8148 	beq.w	8006814 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8141 	beq.w	8006814 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	f040 80b6 	bne.w	8006724 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8145 	beq.w	8006858 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065d6:	429a      	cmp	r2, r3
 80065d8:	f080 813e 	bcs.w	8006858 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80065e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ee:	f000 8088 	beq.w	8006702 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006608:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800660c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006610:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	330c      	adds	r3, #12
 800661a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800661e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006622:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800662a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006636:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1d9      	bne.n	80065f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3314      	adds	r3, #20
 8006644:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800664e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006650:	f023 0301 	bic.w	r3, r3, #1
 8006654:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	3314      	adds	r3, #20
 800665e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006662:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006666:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800666a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006674:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e1      	bne.n	800663e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3314      	adds	r3, #20
 8006680:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800668a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800668c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006690:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800669e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e3      	bne.n	800667a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	330c      	adds	r3, #12
 80066c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80066d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d2:	f023 0310 	bic.w	r3, r3, #16
 80066d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80066e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80066e6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80066ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80066f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e3      	bne.n	80066c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fb fc15 	bl	8001f2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2202      	movs	r2, #2
 8006706:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006710:	b29b      	uxth	r3, r3
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	b29b      	uxth	r3, r3
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f8cb 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800671e:	e09b      	b.n	8006858 <HAL_UART_IRQHandler+0x518>
 8006720:	08006b2d 	.word	0x08006b2d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800672c:	b29b      	uxth	r3, r3
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 808e 	beq.w	800685c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 8089 	beq.w	800685c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	330c      	adds	r3, #12
 8006750:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800675a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006760:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	330c      	adds	r3, #12
 800676a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800676e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006770:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006774:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800677c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e3      	bne.n	800674a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3314      	adds	r3, #20
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	623b      	str	r3, [r7, #32]
   return(result);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	3314      	adds	r3, #20
 80067a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80067a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ae:	e841 2300 	strex	r3, r2, [r1]
 80067b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1e3      	bne.n	8006782 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067ec:	61fa      	str	r2, [r7, #28]
 80067ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	69b9      	ldr	r1, [r7, #24]
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	617b      	str	r3, [r7, #20]
   return(result);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e3      	bne.n	80067c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006806:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f851 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006812:	e023      	b.n	800685c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800681c:	2b00      	cmp	r3, #0
 800681e:	d009      	beq.n	8006834 <HAL_UART_IRQHandler+0x4f4>
 8006820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f991 	bl	8006b54 <UART_Transmit_IT>
    return;
 8006832:	e014      	b.n	800685e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <HAL_UART_IRQHandler+0x51e>
 8006840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f9d1 	bl	8006bf4 <UART_EndTransmit_IT>
    return;
 8006852:	e004      	b.n	800685e <HAL_UART_IRQHandler+0x51e>
    return;
 8006854:	bf00      	nop
 8006856:	e002      	b.n	800685e <HAL_UART_IRQHandler+0x51e>
      return;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <HAL_UART_IRQHandler+0x51e>
      return;
 800685c:	bf00      	nop
  }
}
 800685e:	37e8      	adds	r7, #232	@ 0xe8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800686c:	bf00      	nop
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b090      	sub	sp, #64	@ 0x40
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d137      	bne.n	8006958 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80068e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068ea:	2200      	movs	r2, #0
 80068ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3314      	adds	r3, #20
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	623b      	str	r3, [r7, #32]
   return(result);
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006904:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3314      	adds	r3, #20
 800690c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800690e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006910:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e5      	bne.n	80068ee <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	60fb      	str	r3, [r7, #12]
   return(result);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006938:	637b      	str	r3, [r7, #52]	@ 0x34
 800693a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006942:	61fa      	str	r2, [r7, #28]
 8006944:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	69b9      	ldr	r1, [r7, #24]
 8006948:	69fa      	ldr	r2, [r7, #28]
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	617b      	str	r3, [r7, #20]
   return(result);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006956:	e002      	b.n	800695e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006958:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800695a:	f7ff ff83 	bl	8006864 <HAL_UART_TxCpltCallback>
}
 800695e:	bf00      	nop
 8006960:	3740      	adds	r7, #64	@ 0x40
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006972:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f7ff ff7f 	bl	8006878 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b084      	sub	sp, #16
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800698a:	2300      	movs	r3, #0
 800698c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006992:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699e:	2b80      	cmp	r3, #128	@ 0x80
 80069a0:	bf0c      	ite	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	2300      	movne	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b21      	cmp	r3, #33	@ 0x21
 80069b4:	d108      	bne.n	80069c8 <UART_DMAError+0x46>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80069c2:	68b8      	ldr	r0, [r7, #8]
 80069c4:	f000 f827 	bl	8006a16 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d2:	2b40      	cmp	r3, #64	@ 0x40
 80069d4:	bf0c      	ite	eq
 80069d6:	2301      	moveq	r3, #1
 80069d8:	2300      	movne	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b22      	cmp	r3, #34	@ 0x22
 80069e8:	d108      	bne.n	80069fc <UART_DMAError+0x7a>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2200      	movs	r2, #0
 80069f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f000 f835 	bl	8006a66 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a00:	f043 0210 	orr.w	r2, r3, #16
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a08:	68b8      	ldr	r0, [r7, #8]
 8006a0a:	f7ff ff49 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b089      	sub	sp, #36	@ 0x24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	330c      	adds	r3, #12
 8006a24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	69fa      	ldr	r2, [r7, #28]
 8006a3e:	61ba      	str	r2, [r7, #24]
 8006a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6979      	ldr	r1, [r7, #20]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e5      	bne.n	8006a1e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2220      	movs	r2, #32
 8006a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006a5a:	bf00      	nop
 8006a5c:	3724      	adds	r7, #36	@ 0x24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b095      	sub	sp, #84	@ 0x54
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d119      	bne.n	8006b12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 0310 	bic.w	r3, r3, #16
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006afe:	61ba      	str	r2, [r7, #24]
 8006b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6979      	ldr	r1, [r7, #20]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b20:	bf00      	nop
 8006b22:	3754      	adds	r7, #84	@ 0x54
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff feaa 	bl	80068a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b4c:	bf00      	nop
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b21      	cmp	r3, #33	@ 0x21
 8006b66:	d13e      	bne.n	8006be6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b70:	d114      	bne.n	8006b9c <UART_Transmit_IT+0x48>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d110      	bne.n	8006b9c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b8e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	1c9a      	adds	r2, r3, #2
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	621a      	str	r2, [r3, #32]
 8006b9a:	e008      	b.n	8006bae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6211      	str	r1, [r2, #32]
 8006ba6:	781a      	ldrb	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10f      	bne.n	8006be2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006be0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	e000      	b.n	8006be8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006be6:	2302      	movs	r3, #2
  }
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fe25 	bl	8006864 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08c      	sub	sp, #48	@ 0x30
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b22      	cmp	r3, #34	@ 0x22
 8006c36:	f040 80ae 	bne.w	8006d96 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d117      	bne.n	8006c74 <UART_Receive_IT+0x50>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d113      	bne.n	8006c74 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c66:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c6c:	1c9a      	adds	r2, r3, #2
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c72:	e026      	b.n	8006cc2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c86:	d007      	beq.n	8006c98 <UART_Receive_IT+0x74>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <UART_Receive_IT+0x82>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d106      	bne.n	8006ca6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	b2da      	uxtb	r2, r3
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	e008      	b.n	8006cb8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cbc:	1c5a      	adds	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d15d      	bne.n	8006d92 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0220 	bic.w	r2, r2, #32
 8006ce4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2220      	movs	r2, #32
 8006d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d135      	bne.n	8006d88 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	e853 3f00 	ldrex	r3, [r3]
 8006d30:	613b      	str	r3, [r7, #16]
   return(result);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	f023 0310 	bic.w	r3, r3, #16
 8006d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	330c      	adds	r3, #12
 8006d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d42:	623a      	str	r2, [r7, #32]
 8006d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	69f9      	ldr	r1, [r7, #28]
 8006d48:	6a3a      	ldr	r2, [r7, #32]
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e5      	bne.n	8006d22 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d10a      	bne.n	8006d7a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff fd97 	bl	80068b4 <HAL_UARTEx_RxEventCallback>
 8006d86:	e002      	b.n	8006d8e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f7ff fd7f 	bl	800688c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e002      	b.n	8006d98 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e000      	b.n	8006d98 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d96:	2302      	movs	r3, #2
  }
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3730      	adds	r7, #48	@ 0x30
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b0c0      	sub	sp, #256	@ 0x100
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	68d9      	ldr	r1, [r3, #12]
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	ea40 0301 	orr.w	r3, r0, r1
 8006dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	431a      	orrs	r2, r3
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	695b      	ldr	r3, [r3, #20]
 8006dde:	431a      	orrs	r2, r3
 8006de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006df8:	f021 010c 	bic.w	r1, r1, #12
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e06:	430b      	orrs	r3, r1
 8006e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1a:	6999      	ldr	r1, [r3, #24]
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	ea40 0301 	orr.w	r3, r0, r1
 8006e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	4b8f      	ldr	r3, [pc, #572]	@ (800706c <UART_SetConfig+0x2cc>)
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d005      	beq.n	8006e40 <UART_SetConfig+0xa0>
 8006e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b8d      	ldr	r3, [pc, #564]	@ (8007070 <UART_SetConfig+0x2d0>)
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d104      	bne.n	8006e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e40:	f7fe fd70 	bl	8005924 <HAL_RCC_GetPCLK2Freq>
 8006e44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e48:	e003      	b.n	8006e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e4a:	f7fe fd57 	bl	80058fc <HAL_RCC_GetPCLK1Freq>
 8006e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e5c:	f040 810c 	bne.w	8007078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e72:	4622      	mov	r2, r4
 8006e74:	462b      	mov	r3, r5
 8006e76:	1891      	adds	r1, r2, r2
 8006e78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e7a:	415b      	adcs	r3, r3
 8006e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e82:	4621      	mov	r1, r4
 8006e84:	eb12 0801 	adds.w	r8, r2, r1
 8006e88:	4629      	mov	r1, r5
 8006e8a:	eb43 0901 	adc.w	r9, r3, r1
 8006e8e:	f04f 0200 	mov.w	r2, #0
 8006e92:	f04f 0300 	mov.w	r3, #0
 8006e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ea2:	4690      	mov	r8, r2
 8006ea4:	4699      	mov	r9, r3
 8006ea6:	4623      	mov	r3, r4
 8006ea8:	eb18 0303 	adds.w	r3, r8, r3
 8006eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	eb49 0303 	adc.w	r3, r9, r3
 8006eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ece:	460b      	mov	r3, r1
 8006ed0:	18db      	adds	r3, r3, r3
 8006ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	eb42 0303 	adc.w	r3, r2, r3
 8006eda:	657b      	str	r3, [r7, #84]	@ 0x54
 8006edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ee4:	f7f9 fed8 	bl	8000c98 <__aeabi_uldivmod>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	4b61      	ldr	r3, [pc, #388]	@ (8007074 <UART_SetConfig+0x2d4>)
 8006eee:	fba3 2302 	umull	r2, r3, r3, r2
 8006ef2:	095b      	lsrs	r3, r3, #5
 8006ef4:	011c      	lsls	r4, r3, #4
 8006ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006f08:	4642      	mov	r2, r8
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	1891      	adds	r1, r2, r2
 8006f0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006f10:	415b      	adcs	r3, r3
 8006f12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f18:	4641      	mov	r1, r8
 8006f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8006f1e:	4649      	mov	r1, r9
 8006f20:	eb43 0b01 	adc.w	fp, r3, r1
 8006f24:	f04f 0200 	mov.w	r2, #0
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f38:	4692      	mov	sl, r2
 8006f3a:	469b      	mov	fp, r3
 8006f3c:	4643      	mov	r3, r8
 8006f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8006f42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f46:	464b      	mov	r3, r9
 8006f48:	eb4b 0303 	adc.w	r3, fp, r3
 8006f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f64:	460b      	mov	r3, r1
 8006f66:	18db      	adds	r3, r3, r3
 8006f68:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	eb42 0303 	adc.w	r3, r2, r3
 8006f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f7a:	f7f9 fe8d 	bl	8000c98 <__aeabi_uldivmod>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4611      	mov	r1, r2
 8006f84:	4b3b      	ldr	r3, [pc, #236]	@ (8007074 <UART_SetConfig+0x2d4>)
 8006f86:	fba3 2301 	umull	r2, r3, r3, r1
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2264      	movs	r2, #100	@ 0x64
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	1acb      	subs	r3, r1, r3
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f9a:	4b36      	ldr	r3, [pc, #216]	@ (8007074 <UART_SetConfig+0x2d4>)
 8006f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8006fa0:	095b      	lsrs	r3, r3, #5
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006fa8:	441c      	add	r4, r3
 8006faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fbc:	4642      	mov	r2, r8
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	1891      	adds	r1, r2, r2
 8006fc2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fc4:	415b      	adcs	r3, r3
 8006fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fcc:	4641      	mov	r1, r8
 8006fce:	1851      	adds	r1, r2, r1
 8006fd0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	414b      	adcs	r3, r1
 8006fd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fe4:	4659      	mov	r1, fp
 8006fe6:	00cb      	lsls	r3, r1, #3
 8006fe8:	4651      	mov	r1, sl
 8006fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fee:	4651      	mov	r1, sl
 8006ff0:	00ca      	lsls	r2, r1, #3
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	4642      	mov	r2, r8
 8006ffa:	189b      	adds	r3, r3, r2
 8006ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007000:	464b      	mov	r3, r9
 8007002:	460a      	mov	r2, r1
 8007004:	eb42 0303 	adc.w	r3, r2, r3
 8007008:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007018:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800701c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007020:	460b      	mov	r3, r1
 8007022:	18db      	adds	r3, r3, r3
 8007024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007026:	4613      	mov	r3, r2
 8007028:	eb42 0303 	adc.w	r3, r2, r3
 800702c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800702e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007036:	f7f9 fe2f 	bl	8000c98 <__aeabi_uldivmod>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4b0d      	ldr	r3, [pc, #52]	@ (8007074 <UART_SetConfig+0x2d4>)
 8007040:	fba3 1302 	umull	r1, r3, r3, r2
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	2164      	movs	r1, #100	@ 0x64
 8007048:	fb01 f303 	mul.w	r3, r1, r3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	00db      	lsls	r3, r3, #3
 8007050:	3332      	adds	r3, #50	@ 0x32
 8007052:	4a08      	ldr	r2, [pc, #32]	@ (8007074 <UART_SetConfig+0x2d4>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	f003 0207 	and.w	r2, r3, #7
 800705e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4422      	add	r2, r4
 8007066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007068:	e106      	b.n	8007278 <UART_SetConfig+0x4d8>
 800706a:	bf00      	nop
 800706c:	40011000 	.word	0x40011000
 8007070:	40011400 	.word	0x40011400
 8007074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800707c:	2200      	movs	r2, #0
 800707e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007082:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800708a:	4642      	mov	r2, r8
 800708c:	464b      	mov	r3, r9
 800708e:	1891      	adds	r1, r2, r2
 8007090:	6239      	str	r1, [r7, #32]
 8007092:	415b      	adcs	r3, r3
 8007094:	627b      	str	r3, [r7, #36]	@ 0x24
 8007096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800709a:	4641      	mov	r1, r8
 800709c:	1854      	adds	r4, r2, r1
 800709e:	4649      	mov	r1, r9
 80070a0:	eb43 0501 	adc.w	r5, r3, r1
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	00eb      	lsls	r3, r5, #3
 80070ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80070b2:	00e2      	lsls	r2, r4, #3
 80070b4:	4614      	mov	r4, r2
 80070b6:	461d      	mov	r5, r3
 80070b8:	4643      	mov	r3, r8
 80070ba:	18e3      	adds	r3, r4, r3
 80070bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070c0:	464b      	mov	r3, r9
 80070c2:	eb45 0303 	adc.w	r3, r5, r3
 80070c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070e6:	4629      	mov	r1, r5
 80070e8:	008b      	lsls	r3, r1, #2
 80070ea:	4621      	mov	r1, r4
 80070ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f0:	4621      	mov	r1, r4
 80070f2:	008a      	lsls	r2, r1, #2
 80070f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070f8:	f7f9 fdce 	bl	8000c98 <__aeabi_uldivmod>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4b60      	ldr	r3, [pc, #384]	@ (8007284 <UART_SetConfig+0x4e4>)
 8007102:	fba3 2302 	umull	r2, r3, r3, r2
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	011c      	lsls	r4, r3, #4
 800710a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800710e:	2200      	movs	r2, #0
 8007110:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007114:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800711c:	4642      	mov	r2, r8
 800711e:	464b      	mov	r3, r9
 8007120:	1891      	adds	r1, r2, r2
 8007122:	61b9      	str	r1, [r7, #24]
 8007124:	415b      	adcs	r3, r3
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800712c:	4641      	mov	r1, r8
 800712e:	1851      	adds	r1, r2, r1
 8007130:	6139      	str	r1, [r7, #16]
 8007132:	4649      	mov	r1, r9
 8007134:	414b      	adcs	r3, r1
 8007136:	617b      	str	r3, [r7, #20]
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007144:	4659      	mov	r1, fp
 8007146:	00cb      	lsls	r3, r1, #3
 8007148:	4651      	mov	r1, sl
 800714a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800714e:	4651      	mov	r1, sl
 8007150:	00ca      	lsls	r2, r1, #3
 8007152:	4610      	mov	r0, r2
 8007154:	4619      	mov	r1, r3
 8007156:	4603      	mov	r3, r0
 8007158:	4642      	mov	r2, r8
 800715a:	189b      	adds	r3, r3, r2
 800715c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007160:	464b      	mov	r3, r9
 8007162:	460a      	mov	r2, r1
 8007164:	eb42 0303 	adc.w	r3, r2, r3
 8007168:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007176:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007184:	4649      	mov	r1, r9
 8007186:	008b      	lsls	r3, r1, #2
 8007188:	4641      	mov	r1, r8
 800718a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800718e:	4641      	mov	r1, r8
 8007190:	008a      	lsls	r2, r1, #2
 8007192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007196:	f7f9 fd7f 	bl	8000c98 <__aeabi_uldivmod>
 800719a:	4602      	mov	r2, r0
 800719c:	460b      	mov	r3, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	4b38      	ldr	r3, [pc, #224]	@ (8007284 <UART_SetConfig+0x4e4>)
 80071a2:	fba3 2301 	umull	r2, r3, r3, r1
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	2264      	movs	r2, #100	@ 0x64
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	1acb      	subs	r3, r1, r3
 80071b0:	011b      	lsls	r3, r3, #4
 80071b2:	3332      	adds	r3, #50	@ 0x32
 80071b4:	4a33      	ldr	r2, [pc, #204]	@ (8007284 <UART_SetConfig+0x4e4>)
 80071b6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071c0:	441c      	add	r4, r3
 80071c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071c6:	2200      	movs	r2, #0
 80071c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80071ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80071cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071d0:	4642      	mov	r2, r8
 80071d2:	464b      	mov	r3, r9
 80071d4:	1891      	adds	r1, r2, r2
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	415b      	adcs	r3, r3
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071e0:	4641      	mov	r1, r8
 80071e2:	1851      	adds	r1, r2, r1
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	4649      	mov	r1, r9
 80071e8:	414b      	adcs	r3, r1
 80071ea:	607b      	str	r3, [r7, #4]
 80071ec:	f04f 0200 	mov.w	r2, #0
 80071f0:	f04f 0300 	mov.w	r3, #0
 80071f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071f8:	4659      	mov	r1, fp
 80071fa:	00cb      	lsls	r3, r1, #3
 80071fc:	4651      	mov	r1, sl
 80071fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007202:	4651      	mov	r1, sl
 8007204:	00ca      	lsls	r2, r1, #3
 8007206:	4610      	mov	r0, r2
 8007208:	4619      	mov	r1, r3
 800720a:	4603      	mov	r3, r0
 800720c:	4642      	mov	r2, r8
 800720e:	189b      	adds	r3, r3, r2
 8007210:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007212:	464b      	mov	r3, r9
 8007214:	460a      	mov	r2, r1
 8007216:	eb42 0303 	adc.w	r3, r2, r3
 800721a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	663b      	str	r3, [r7, #96]	@ 0x60
 8007226:	667a      	str	r2, [r7, #100]	@ 0x64
 8007228:	f04f 0200 	mov.w	r2, #0
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007234:	4649      	mov	r1, r9
 8007236:	008b      	lsls	r3, r1, #2
 8007238:	4641      	mov	r1, r8
 800723a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800723e:	4641      	mov	r1, r8
 8007240:	008a      	lsls	r2, r1, #2
 8007242:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007246:	f7f9 fd27 	bl	8000c98 <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <UART_SetConfig+0x4e4>)
 8007250:	fba3 1302 	umull	r1, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	2164      	movs	r1, #100	@ 0x64
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	3332      	adds	r3, #50	@ 0x32
 8007262:	4a08      	ldr	r2, [pc, #32]	@ (8007284 <UART_SetConfig+0x4e4>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 020f 	and.w	r2, r3, #15
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4422      	add	r2, r4
 8007276:	609a      	str	r2, [r3, #8]
}
 8007278:	bf00      	nop
 800727a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800727e:	46bd      	mov	sp, r7
 8007280:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007284:	51eb851f 	.word	0x51eb851f

08007288 <__cvt>:
 8007288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800728c:	ec57 6b10 	vmov	r6, r7, d0
 8007290:	2f00      	cmp	r7, #0
 8007292:	460c      	mov	r4, r1
 8007294:	4619      	mov	r1, r3
 8007296:	463b      	mov	r3, r7
 8007298:	bfbb      	ittet	lt
 800729a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800729e:	461f      	movlt	r7, r3
 80072a0:	2300      	movge	r3, #0
 80072a2:	232d      	movlt	r3, #45	@ 0x2d
 80072a4:	700b      	strb	r3, [r1, #0]
 80072a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80072ac:	4691      	mov	r9, r2
 80072ae:	f023 0820 	bic.w	r8, r3, #32
 80072b2:	bfbc      	itt	lt
 80072b4:	4632      	movlt	r2, r6
 80072b6:	4616      	movlt	r6, r2
 80072b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072bc:	d005      	beq.n	80072ca <__cvt+0x42>
 80072be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80072c2:	d100      	bne.n	80072c6 <__cvt+0x3e>
 80072c4:	3401      	adds	r4, #1
 80072c6:	2102      	movs	r1, #2
 80072c8:	e000      	b.n	80072cc <__cvt+0x44>
 80072ca:	2103      	movs	r1, #3
 80072cc:	ab03      	add	r3, sp, #12
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	ab02      	add	r3, sp, #8
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	ec47 6b10 	vmov	d0, r6, r7
 80072d8:	4653      	mov	r3, sl
 80072da:	4622      	mov	r2, r4
 80072dc:	f001 f8a8 	bl	8008430 <_dtoa_r>
 80072e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80072e4:	4605      	mov	r5, r0
 80072e6:	d119      	bne.n	800731c <__cvt+0x94>
 80072e8:	f019 0f01 	tst.w	r9, #1
 80072ec:	d00e      	beq.n	800730c <__cvt+0x84>
 80072ee:	eb00 0904 	add.w	r9, r0, r4
 80072f2:	2200      	movs	r2, #0
 80072f4:	2300      	movs	r3, #0
 80072f6:	4630      	mov	r0, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	f7f9 fbed 	bl	8000ad8 <__aeabi_dcmpeq>
 80072fe:	b108      	cbz	r0, 8007304 <__cvt+0x7c>
 8007300:	f8cd 900c 	str.w	r9, [sp, #12]
 8007304:	2230      	movs	r2, #48	@ 0x30
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	454b      	cmp	r3, r9
 800730a:	d31e      	bcc.n	800734a <__cvt+0xc2>
 800730c:	9b03      	ldr	r3, [sp, #12]
 800730e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007310:	1b5b      	subs	r3, r3, r5
 8007312:	4628      	mov	r0, r5
 8007314:	6013      	str	r3, [r2, #0]
 8007316:	b004      	add	sp, #16
 8007318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800731c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007320:	eb00 0904 	add.w	r9, r0, r4
 8007324:	d1e5      	bne.n	80072f2 <__cvt+0x6a>
 8007326:	7803      	ldrb	r3, [r0, #0]
 8007328:	2b30      	cmp	r3, #48	@ 0x30
 800732a:	d10a      	bne.n	8007342 <__cvt+0xba>
 800732c:	2200      	movs	r2, #0
 800732e:	2300      	movs	r3, #0
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f9 fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007338:	b918      	cbnz	r0, 8007342 <__cvt+0xba>
 800733a:	f1c4 0401 	rsb	r4, r4, #1
 800733e:	f8ca 4000 	str.w	r4, [sl]
 8007342:	f8da 3000 	ldr.w	r3, [sl]
 8007346:	4499      	add	r9, r3
 8007348:	e7d3      	b.n	80072f2 <__cvt+0x6a>
 800734a:	1c59      	adds	r1, r3, #1
 800734c:	9103      	str	r1, [sp, #12]
 800734e:	701a      	strb	r2, [r3, #0]
 8007350:	e7d9      	b.n	8007306 <__cvt+0x7e>

08007352 <__exponent>:
 8007352:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007354:	2900      	cmp	r1, #0
 8007356:	bfba      	itte	lt
 8007358:	4249      	neglt	r1, r1
 800735a:	232d      	movlt	r3, #45	@ 0x2d
 800735c:	232b      	movge	r3, #43	@ 0x2b
 800735e:	2909      	cmp	r1, #9
 8007360:	7002      	strb	r2, [r0, #0]
 8007362:	7043      	strb	r3, [r0, #1]
 8007364:	dd29      	ble.n	80073ba <__exponent+0x68>
 8007366:	f10d 0307 	add.w	r3, sp, #7
 800736a:	461d      	mov	r5, r3
 800736c:	270a      	movs	r7, #10
 800736e:	461a      	mov	r2, r3
 8007370:	fbb1 f6f7 	udiv	r6, r1, r7
 8007374:	fb07 1416 	mls	r4, r7, r6, r1
 8007378:	3430      	adds	r4, #48	@ 0x30
 800737a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800737e:	460c      	mov	r4, r1
 8007380:	2c63      	cmp	r4, #99	@ 0x63
 8007382:	f103 33ff 	add.w	r3, r3, #4294967295
 8007386:	4631      	mov	r1, r6
 8007388:	dcf1      	bgt.n	800736e <__exponent+0x1c>
 800738a:	3130      	adds	r1, #48	@ 0x30
 800738c:	1e94      	subs	r4, r2, #2
 800738e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007392:	1c41      	adds	r1, r0, #1
 8007394:	4623      	mov	r3, r4
 8007396:	42ab      	cmp	r3, r5
 8007398:	d30a      	bcc.n	80073b0 <__exponent+0x5e>
 800739a:	f10d 0309 	add.w	r3, sp, #9
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	42ac      	cmp	r4, r5
 80073a2:	bf88      	it	hi
 80073a4:	2300      	movhi	r3, #0
 80073a6:	3302      	adds	r3, #2
 80073a8:	4403      	add	r3, r0
 80073aa:	1a18      	subs	r0, r3, r0
 80073ac:	b003      	add	sp, #12
 80073ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80073b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80073b8:	e7ed      	b.n	8007396 <__exponent+0x44>
 80073ba:	2330      	movs	r3, #48	@ 0x30
 80073bc:	3130      	adds	r1, #48	@ 0x30
 80073be:	7083      	strb	r3, [r0, #2]
 80073c0:	70c1      	strb	r1, [r0, #3]
 80073c2:	1d03      	adds	r3, r0, #4
 80073c4:	e7f1      	b.n	80073aa <__exponent+0x58>
	...

080073c8 <_printf_float>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	b08d      	sub	sp, #52	@ 0x34
 80073ce:	460c      	mov	r4, r1
 80073d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80073d4:	4616      	mov	r6, r2
 80073d6:	461f      	mov	r7, r3
 80073d8:	4605      	mov	r5, r0
 80073da:	f000 ff23 	bl	8008224 <_localeconv_r>
 80073de:	6803      	ldr	r3, [r0, #0]
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f8 ff4c 	bl	8000280 <strlen>
 80073e8:	2300      	movs	r3, #0
 80073ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80073ec:	f8d8 3000 	ldr.w	r3, [r8]
 80073f0:	9005      	str	r0, [sp, #20]
 80073f2:	3307      	adds	r3, #7
 80073f4:	f023 0307 	bic.w	r3, r3, #7
 80073f8:	f103 0208 	add.w	r2, r3, #8
 80073fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007400:	f8d4 b000 	ldr.w	fp, [r4]
 8007404:	f8c8 2000 	str.w	r2, [r8]
 8007408:	e9d3 8900 	ldrd	r8, r9, [r3]
 800740c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007410:	9307      	str	r3, [sp, #28]
 8007412:	f8cd 8018 	str.w	r8, [sp, #24]
 8007416:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800741a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800741e:	4b9c      	ldr	r3, [pc, #624]	@ (8007690 <_printf_float+0x2c8>)
 8007420:	f04f 32ff 	mov.w	r2, #4294967295
 8007424:	f7f9 fb8a 	bl	8000b3c <__aeabi_dcmpun>
 8007428:	bb70      	cbnz	r0, 8007488 <_printf_float+0xc0>
 800742a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800742e:	4b98      	ldr	r3, [pc, #608]	@ (8007690 <_printf_float+0x2c8>)
 8007430:	f04f 32ff 	mov.w	r2, #4294967295
 8007434:	f7f9 fb64 	bl	8000b00 <__aeabi_dcmple>
 8007438:	bb30      	cbnz	r0, 8007488 <_printf_float+0xc0>
 800743a:	2200      	movs	r2, #0
 800743c:	2300      	movs	r3, #0
 800743e:	4640      	mov	r0, r8
 8007440:	4649      	mov	r1, r9
 8007442:	f7f9 fb53 	bl	8000aec <__aeabi_dcmplt>
 8007446:	b110      	cbz	r0, 800744e <_printf_float+0x86>
 8007448:	232d      	movs	r3, #45	@ 0x2d
 800744a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800744e:	4a91      	ldr	r2, [pc, #580]	@ (8007694 <_printf_float+0x2cc>)
 8007450:	4b91      	ldr	r3, [pc, #580]	@ (8007698 <_printf_float+0x2d0>)
 8007452:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007456:	bf94      	ite	ls
 8007458:	4690      	movls	r8, r2
 800745a:	4698      	movhi	r8, r3
 800745c:	2303      	movs	r3, #3
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f02b 0304 	bic.w	r3, fp, #4
 8007464:	6023      	str	r3, [r4, #0]
 8007466:	f04f 0900 	mov.w	r9, #0
 800746a:	9700      	str	r7, [sp, #0]
 800746c:	4633      	mov	r3, r6
 800746e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f9d2 	bl	800781c <_printf_common>
 8007478:	3001      	adds	r0, #1
 800747a:	f040 808d 	bne.w	8007598 <_printf_float+0x1d0>
 800747e:	f04f 30ff 	mov.w	r0, #4294967295
 8007482:	b00d      	add	sp, #52	@ 0x34
 8007484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007488:	4642      	mov	r2, r8
 800748a:	464b      	mov	r3, r9
 800748c:	4640      	mov	r0, r8
 800748e:	4649      	mov	r1, r9
 8007490:	f7f9 fb54 	bl	8000b3c <__aeabi_dcmpun>
 8007494:	b140      	cbz	r0, 80074a8 <_printf_float+0xe0>
 8007496:	464b      	mov	r3, r9
 8007498:	2b00      	cmp	r3, #0
 800749a:	bfbc      	itt	lt
 800749c:	232d      	movlt	r3, #45	@ 0x2d
 800749e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80074a2:	4a7e      	ldr	r2, [pc, #504]	@ (800769c <_printf_float+0x2d4>)
 80074a4:	4b7e      	ldr	r3, [pc, #504]	@ (80076a0 <_printf_float+0x2d8>)
 80074a6:	e7d4      	b.n	8007452 <_printf_float+0x8a>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80074ae:	9206      	str	r2, [sp, #24]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	d13b      	bne.n	800752c <_printf_float+0x164>
 80074b4:	2306      	movs	r3, #6
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80074bc:	2300      	movs	r3, #0
 80074be:	6022      	str	r2, [r4, #0]
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80074c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80074c8:	ab09      	add	r3, sp, #36	@ 0x24
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	ec49 8b10 	vmov	d0, r8, r9
 80074d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80074d6:	4628      	mov	r0, r5
 80074d8:	f7ff fed6 	bl	8007288 <__cvt>
 80074dc:	9b06      	ldr	r3, [sp, #24]
 80074de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80074e0:	2b47      	cmp	r3, #71	@ 0x47
 80074e2:	4680      	mov	r8, r0
 80074e4:	d129      	bne.n	800753a <_printf_float+0x172>
 80074e6:	1cc8      	adds	r0, r1, #3
 80074e8:	db02      	blt.n	80074f0 <_printf_float+0x128>
 80074ea:	6863      	ldr	r3, [r4, #4]
 80074ec:	4299      	cmp	r1, r3
 80074ee:	dd41      	ble.n	8007574 <_printf_float+0x1ac>
 80074f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80074f4:	fa5f fa8a 	uxtb.w	sl, sl
 80074f8:	3901      	subs	r1, #1
 80074fa:	4652      	mov	r2, sl
 80074fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007500:	9109      	str	r1, [sp, #36]	@ 0x24
 8007502:	f7ff ff26 	bl	8007352 <__exponent>
 8007506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007508:	1813      	adds	r3, r2, r0
 800750a:	2a01      	cmp	r2, #1
 800750c:	4681      	mov	r9, r0
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	dc02      	bgt.n	8007518 <_printf_float+0x150>
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	07d2      	lsls	r2, r2, #31
 8007516:	d501      	bpl.n	800751c <_printf_float+0x154>
 8007518:	3301      	adds	r3, #1
 800751a:	6123      	str	r3, [r4, #16]
 800751c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0a2      	beq.n	800746a <_printf_float+0xa2>
 8007524:	232d      	movs	r3, #45	@ 0x2d
 8007526:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800752a:	e79e      	b.n	800746a <_printf_float+0xa2>
 800752c:	9a06      	ldr	r2, [sp, #24]
 800752e:	2a47      	cmp	r2, #71	@ 0x47
 8007530:	d1c2      	bne.n	80074b8 <_printf_float+0xf0>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1c0      	bne.n	80074b8 <_printf_float+0xf0>
 8007536:	2301      	movs	r3, #1
 8007538:	e7bd      	b.n	80074b6 <_printf_float+0xee>
 800753a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800753e:	d9db      	bls.n	80074f8 <_printf_float+0x130>
 8007540:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007544:	d118      	bne.n	8007578 <_printf_float+0x1b0>
 8007546:	2900      	cmp	r1, #0
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	dd0b      	ble.n	8007564 <_printf_float+0x19c>
 800754c:	6121      	str	r1, [r4, #16]
 800754e:	b913      	cbnz	r3, 8007556 <_printf_float+0x18e>
 8007550:	6822      	ldr	r2, [r4, #0]
 8007552:	07d0      	lsls	r0, r2, #31
 8007554:	d502      	bpl.n	800755c <_printf_float+0x194>
 8007556:	3301      	adds	r3, #1
 8007558:	440b      	add	r3, r1
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800755e:	f04f 0900 	mov.w	r9, #0
 8007562:	e7db      	b.n	800751c <_printf_float+0x154>
 8007564:	b913      	cbnz	r3, 800756c <_printf_float+0x1a4>
 8007566:	6822      	ldr	r2, [r4, #0]
 8007568:	07d2      	lsls	r2, r2, #31
 800756a:	d501      	bpl.n	8007570 <_printf_float+0x1a8>
 800756c:	3302      	adds	r3, #2
 800756e:	e7f4      	b.n	800755a <_printf_float+0x192>
 8007570:	2301      	movs	r3, #1
 8007572:	e7f2      	b.n	800755a <_printf_float+0x192>
 8007574:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007578:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757a:	4299      	cmp	r1, r3
 800757c:	db05      	blt.n	800758a <_printf_float+0x1c2>
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	6121      	str	r1, [r4, #16]
 8007582:	07d8      	lsls	r0, r3, #31
 8007584:	d5ea      	bpl.n	800755c <_printf_float+0x194>
 8007586:	1c4b      	adds	r3, r1, #1
 8007588:	e7e7      	b.n	800755a <_printf_float+0x192>
 800758a:	2900      	cmp	r1, #0
 800758c:	bfd4      	ite	le
 800758e:	f1c1 0202 	rsble	r2, r1, #2
 8007592:	2201      	movgt	r2, #1
 8007594:	4413      	add	r3, r2
 8007596:	e7e0      	b.n	800755a <_printf_float+0x192>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	055a      	lsls	r2, r3, #21
 800759c:	d407      	bmi.n	80075ae <_printf_float+0x1e6>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	4642      	mov	r2, r8
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	d12b      	bne.n	8007604 <_printf_float+0x23c>
 80075ac:	e767      	b.n	800747e <_printf_float+0xb6>
 80075ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075b2:	f240 80dd 	bls.w	8007770 <_printf_float+0x3a8>
 80075b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	f7f9 fa8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d033      	beq.n	800762e <_printf_float+0x266>
 80075c6:	4a37      	ldr	r2, [pc, #220]	@ (80076a4 <_printf_float+0x2dc>)
 80075c8:	2301      	movs	r3, #1
 80075ca:	4631      	mov	r1, r6
 80075cc:	4628      	mov	r0, r5
 80075ce:	47b8      	blx	r7
 80075d0:	3001      	adds	r0, #1
 80075d2:	f43f af54 	beq.w	800747e <_printf_float+0xb6>
 80075d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80075da:	4543      	cmp	r3, r8
 80075dc:	db02      	blt.n	80075e4 <_printf_float+0x21c>
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	07d8      	lsls	r0, r3, #31
 80075e2:	d50f      	bpl.n	8007604 <_printf_float+0x23c>
 80075e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	47b8      	blx	r7
 80075ee:	3001      	adds	r0, #1
 80075f0:	f43f af45 	beq.w	800747e <_printf_float+0xb6>
 80075f4:	f04f 0900 	mov.w	r9, #0
 80075f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80075fc:	f104 0a1a 	add.w	sl, r4, #26
 8007600:	45c8      	cmp	r8, r9
 8007602:	dc09      	bgt.n	8007618 <_printf_float+0x250>
 8007604:	6823      	ldr	r3, [r4, #0]
 8007606:	079b      	lsls	r3, r3, #30
 8007608:	f100 8103 	bmi.w	8007812 <_printf_float+0x44a>
 800760c:	68e0      	ldr	r0, [r4, #12]
 800760e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007610:	4298      	cmp	r0, r3
 8007612:	bfb8      	it	lt
 8007614:	4618      	movlt	r0, r3
 8007616:	e734      	b.n	8007482 <_printf_float+0xba>
 8007618:	2301      	movs	r3, #1
 800761a:	4652      	mov	r2, sl
 800761c:	4631      	mov	r1, r6
 800761e:	4628      	mov	r0, r5
 8007620:	47b8      	blx	r7
 8007622:	3001      	adds	r0, #1
 8007624:	f43f af2b 	beq.w	800747e <_printf_float+0xb6>
 8007628:	f109 0901 	add.w	r9, r9, #1
 800762c:	e7e8      	b.n	8007600 <_printf_float+0x238>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc39      	bgt.n	80076a8 <_printf_float+0x2e0>
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <_printf_float+0x2dc>)
 8007636:	2301      	movs	r3, #1
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f af1d 	beq.w	800747e <_printf_float+0xb6>
 8007644:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007648:	ea59 0303 	orrs.w	r3, r9, r3
 800764c:	d102      	bne.n	8007654 <_printf_float+0x28c>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	07d9      	lsls	r1, r3, #31
 8007652:	d5d7      	bpl.n	8007604 <_printf_float+0x23c>
 8007654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	47b8      	blx	r7
 800765e:	3001      	adds	r0, #1
 8007660:	f43f af0d 	beq.w	800747e <_printf_float+0xb6>
 8007664:	f04f 0a00 	mov.w	sl, #0
 8007668:	f104 0b1a 	add.w	fp, r4, #26
 800766c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766e:	425b      	negs	r3, r3
 8007670:	4553      	cmp	r3, sl
 8007672:	dc01      	bgt.n	8007678 <_printf_float+0x2b0>
 8007674:	464b      	mov	r3, r9
 8007676:	e793      	b.n	80075a0 <_printf_float+0x1d8>
 8007678:	2301      	movs	r3, #1
 800767a:	465a      	mov	r2, fp
 800767c:	4631      	mov	r1, r6
 800767e:	4628      	mov	r0, r5
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f aefb 	beq.w	800747e <_printf_float+0xb6>
 8007688:	f10a 0a01 	add.w	sl, sl, #1
 800768c:	e7ee      	b.n	800766c <_printf_float+0x2a4>
 800768e:	bf00      	nop
 8007690:	7fefffff 	.word	0x7fefffff
 8007694:	0800ba10 	.word	0x0800ba10
 8007698:	0800ba14 	.word	0x0800ba14
 800769c:	0800ba18 	.word	0x0800ba18
 80076a0:	0800ba1c 	.word	0x0800ba1c
 80076a4:	0800ba20 	.word	0x0800ba20
 80076a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80076ae:	4553      	cmp	r3, sl
 80076b0:	bfa8      	it	ge
 80076b2:	4653      	movge	r3, sl
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	4699      	mov	r9, r3
 80076b8:	dc36      	bgt.n	8007728 <_printf_float+0x360>
 80076ba:	f04f 0b00 	mov.w	fp, #0
 80076be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076c2:	f104 021a 	add.w	r2, r4, #26
 80076c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80076c8:	9306      	str	r3, [sp, #24]
 80076ca:	eba3 0309 	sub.w	r3, r3, r9
 80076ce:	455b      	cmp	r3, fp
 80076d0:	dc31      	bgt.n	8007736 <_printf_float+0x36e>
 80076d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076d4:	459a      	cmp	sl, r3
 80076d6:	dc3a      	bgt.n	800774e <_printf_float+0x386>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	07da      	lsls	r2, r3, #31
 80076dc:	d437      	bmi.n	800774e <_printf_float+0x386>
 80076de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e0:	ebaa 0903 	sub.w	r9, sl, r3
 80076e4:	9b06      	ldr	r3, [sp, #24]
 80076e6:	ebaa 0303 	sub.w	r3, sl, r3
 80076ea:	4599      	cmp	r9, r3
 80076ec:	bfa8      	it	ge
 80076ee:	4699      	movge	r9, r3
 80076f0:	f1b9 0f00 	cmp.w	r9, #0
 80076f4:	dc33      	bgt.n	800775e <_printf_float+0x396>
 80076f6:	f04f 0800 	mov.w	r8, #0
 80076fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076fe:	f104 0b1a 	add.w	fp, r4, #26
 8007702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007704:	ebaa 0303 	sub.w	r3, sl, r3
 8007708:	eba3 0309 	sub.w	r3, r3, r9
 800770c:	4543      	cmp	r3, r8
 800770e:	f77f af79 	ble.w	8007604 <_printf_float+0x23c>
 8007712:	2301      	movs	r3, #1
 8007714:	465a      	mov	r2, fp
 8007716:	4631      	mov	r1, r6
 8007718:	4628      	mov	r0, r5
 800771a:	47b8      	blx	r7
 800771c:	3001      	adds	r0, #1
 800771e:	f43f aeae 	beq.w	800747e <_printf_float+0xb6>
 8007722:	f108 0801 	add.w	r8, r8, #1
 8007726:	e7ec      	b.n	8007702 <_printf_float+0x33a>
 8007728:	4642      	mov	r2, r8
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	d1c2      	bne.n	80076ba <_printf_float+0x2f2>
 8007734:	e6a3      	b.n	800747e <_printf_float+0xb6>
 8007736:	2301      	movs	r3, #1
 8007738:	4631      	mov	r1, r6
 800773a:	4628      	mov	r0, r5
 800773c:	9206      	str	r2, [sp, #24]
 800773e:	47b8      	blx	r7
 8007740:	3001      	adds	r0, #1
 8007742:	f43f ae9c 	beq.w	800747e <_printf_float+0xb6>
 8007746:	9a06      	ldr	r2, [sp, #24]
 8007748:	f10b 0b01 	add.w	fp, fp, #1
 800774c:	e7bb      	b.n	80076c6 <_printf_float+0x2fe>
 800774e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d1c0      	bne.n	80076de <_printf_float+0x316>
 800775c:	e68f      	b.n	800747e <_printf_float+0xb6>
 800775e:	9a06      	ldr	r2, [sp, #24]
 8007760:	464b      	mov	r3, r9
 8007762:	4442      	add	r2, r8
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	d1c3      	bne.n	80076f6 <_printf_float+0x32e>
 800776e:	e686      	b.n	800747e <_printf_float+0xb6>
 8007770:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007774:	f1ba 0f01 	cmp.w	sl, #1
 8007778:	dc01      	bgt.n	800777e <_printf_float+0x3b6>
 800777a:	07db      	lsls	r3, r3, #31
 800777c:	d536      	bpl.n	80077ec <_printf_float+0x424>
 800777e:	2301      	movs	r3, #1
 8007780:	4642      	mov	r2, r8
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae78 	beq.w	800747e <_printf_float+0xb6>
 800778e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	f43f ae70 	beq.w	800747e <_printf_float+0xb6>
 800779e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077a2:	2200      	movs	r2, #0
 80077a4:	2300      	movs	r3, #0
 80077a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077aa:	f7f9 f995 	bl	8000ad8 <__aeabi_dcmpeq>
 80077ae:	b9c0      	cbnz	r0, 80077e2 <_printf_float+0x41a>
 80077b0:	4653      	mov	r3, sl
 80077b2:	f108 0201 	add.w	r2, r8, #1
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	d10c      	bne.n	80077da <_printf_float+0x412>
 80077c0:	e65d      	b.n	800747e <_printf_float+0xb6>
 80077c2:	2301      	movs	r3, #1
 80077c4:	465a      	mov	r2, fp
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	f43f ae56 	beq.w	800747e <_printf_float+0xb6>
 80077d2:	f108 0801 	add.w	r8, r8, #1
 80077d6:	45d0      	cmp	r8, sl
 80077d8:	dbf3      	blt.n	80077c2 <_printf_float+0x3fa>
 80077da:	464b      	mov	r3, r9
 80077dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80077e0:	e6df      	b.n	80075a2 <_printf_float+0x1da>
 80077e2:	f04f 0800 	mov.w	r8, #0
 80077e6:	f104 0b1a 	add.w	fp, r4, #26
 80077ea:	e7f4      	b.n	80077d6 <_printf_float+0x40e>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4642      	mov	r2, r8
 80077f0:	e7e1      	b.n	80077b6 <_printf_float+0x3ee>
 80077f2:	2301      	movs	r3, #1
 80077f4:	464a      	mov	r2, r9
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	f43f ae3e 	beq.w	800747e <_printf_float+0xb6>
 8007802:	f108 0801 	add.w	r8, r8, #1
 8007806:	68e3      	ldr	r3, [r4, #12]
 8007808:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800780a:	1a5b      	subs	r3, r3, r1
 800780c:	4543      	cmp	r3, r8
 800780e:	dcf0      	bgt.n	80077f2 <_printf_float+0x42a>
 8007810:	e6fc      	b.n	800760c <_printf_float+0x244>
 8007812:	f04f 0800 	mov.w	r8, #0
 8007816:	f104 0919 	add.w	r9, r4, #25
 800781a:	e7f4      	b.n	8007806 <_printf_float+0x43e>

0800781c <_printf_common>:
 800781c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	4616      	mov	r6, r2
 8007822:	4698      	mov	r8, r3
 8007824:	688a      	ldr	r2, [r1, #8]
 8007826:	690b      	ldr	r3, [r1, #16]
 8007828:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800782c:	4293      	cmp	r3, r2
 800782e:	bfb8      	it	lt
 8007830:	4613      	movlt	r3, r2
 8007832:	6033      	str	r3, [r6, #0]
 8007834:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007838:	4607      	mov	r7, r0
 800783a:	460c      	mov	r4, r1
 800783c:	b10a      	cbz	r2, 8007842 <_printf_common+0x26>
 800783e:	3301      	adds	r3, #1
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	0699      	lsls	r1, r3, #26
 8007846:	bf42      	ittt	mi
 8007848:	6833      	ldrmi	r3, [r6, #0]
 800784a:	3302      	addmi	r3, #2
 800784c:	6033      	strmi	r3, [r6, #0]
 800784e:	6825      	ldr	r5, [r4, #0]
 8007850:	f015 0506 	ands.w	r5, r5, #6
 8007854:	d106      	bne.n	8007864 <_printf_common+0x48>
 8007856:	f104 0a19 	add.w	sl, r4, #25
 800785a:	68e3      	ldr	r3, [r4, #12]
 800785c:	6832      	ldr	r2, [r6, #0]
 800785e:	1a9b      	subs	r3, r3, r2
 8007860:	42ab      	cmp	r3, r5
 8007862:	dc26      	bgt.n	80078b2 <_printf_common+0x96>
 8007864:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007868:	6822      	ldr	r2, [r4, #0]
 800786a:	3b00      	subs	r3, #0
 800786c:	bf18      	it	ne
 800786e:	2301      	movne	r3, #1
 8007870:	0692      	lsls	r2, r2, #26
 8007872:	d42b      	bmi.n	80078cc <_printf_common+0xb0>
 8007874:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007878:	4641      	mov	r1, r8
 800787a:	4638      	mov	r0, r7
 800787c:	47c8      	blx	r9
 800787e:	3001      	adds	r0, #1
 8007880:	d01e      	beq.n	80078c0 <_printf_common+0xa4>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	6922      	ldr	r2, [r4, #16]
 8007886:	f003 0306 	and.w	r3, r3, #6
 800788a:	2b04      	cmp	r3, #4
 800788c:	bf02      	ittt	eq
 800788e:	68e5      	ldreq	r5, [r4, #12]
 8007890:	6833      	ldreq	r3, [r6, #0]
 8007892:	1aed      	subeq	r5, r5, r3
 8007894:	68a3      	ldr	r3, [r4, #8]
 8007896:	bf0c      	ite	eq
 8007898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800789c:	2500      	movne	r5, #0
 800789e:	4293      	cmp	r3, r2
 80078a0:	bfc4      	itt	gt
 80078a2:	1a9b      	subgt	r3, r3, r2
 80078a4:	18ed      	addgt	r5, r5, r3
 80078a6:	2600      	movs	r6, #0
 80078a8:	341a      	adds	r4, #26
 80078aa:	42b5      	cmp	r5, r6
 80078ac:	d11a      	bne.n	80078e4 <_printf_common+0xc8>
 80078ae:	2000      	movs	r0, #0
 80078b0:	e008      	b.n	80078c4 <_printf_common+0xa8>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4652      	mov	r2, sl
 80078b6:	4641      	mov	r1, r8
 80078b8:	4638      	mov	r0, r7
 80078ba:	47c8      	blx	r9
 80078bc:	3001      	adds	r0, #1
 80078be:	d103      	bne.n	80078c8 <_printf_common+0xac>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295
 80078c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c8:	3501      	adds	r5, #1
 80078ca:	e7c6      	b.n	800785a <_printf_common+0x3e>
 80078cc:	18e1      	adds	r1, r4, r3
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	2030      	movs	r0, #48	@ 0x30
 80078d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078d6:	4422      	add	r2, r4
 80078d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078e0:	3302      	adds	r3, #2
 80078e2:	e7c7      	b.n	8007874 <_printf_common+0x58>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4622      	mov	r2, r4
 80078e8:	4641      	mov	r1, r8
 80078ea:	4638      	mov	r0, r7
 80078ec:	47c8      	blx	r9
 80078ee:	3001      	adds	r0, #1
 80078f0:	d0e6      	beq.n	80078c0 <_printf_common+0xa4>
 80078f2:	3601      	adds	r6, #1
 80078f4:	e7d9      	b.n	80078aa <_printf_common+0x8e>
	...

080078f8 <_printf_i>:
 80078f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078fc:	7e0f      	ldrb	r7, [r1, #24]
 80078fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007900:	2f78      	cmp	r7, #120	@ 0x78
 8007902:	4691      	mov	r9, r2
 8007904:	4680      	mov	r8, r0
 8007906:	460c      	mov	r4, r1
 8007908:	469a      	mov	sl, r3
 800790a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800790e:	d807      	bhi.n	8007920 <_printf_i+0x28>
 8007910:	2f62      	cmp	r7, #98	@ 0x62
 8007912:	d80a      	bhi.n	800792a <_printf_i+0x32>
 8007914:	2f00      	cmp	r7, #0
 8007916:	f000 80d2 	beq.w	8007abe <_printf_i+0x1c6>
 800791a:	2f58      	cmp	r7, #88	@ 0x58
 800791c:	f000 80b9 	beq.w	8007a92 <_printf_i+0x19a>
 8007920:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007924:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007928:	e03a      	b.n	80079a0 <_printf_i+0xa8>
 800792a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800792e:	2b15      	cmp	r3, #21
 8007930:	d8f6      	bhi.n	8007920 <_printf_i+0x28>
 8007932:	a101      	add	r1, pc, #4	@ (adr r1, 8007938 <_printf_i+0x40>)
 8007934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007938:	08007991 	.word	0x08007991
 800793c:	080079a5 	.word	0x080079a5
 8007940:	08007921 	.word	0x08007921
 8007944:	08007921 	.word	0x08007921
 8007948:	08007921 	.word	0x08007921
 800794c:	08007921 	.word	0x08007921
 8007950:	080079a5 	.word	0x080079a5
 8007954:	08007921 	.word	0x08007921
 8007958:	08007921 	.word	0x08007921
 800795c:	08007921 	.word	0x08007921
 8007960:	08007921 	.word	0x08007921
 8007964:	08007aa5 	.word	0x08007aa5
 8007968:	080079cf 	.word	0x080079cf
 800796c:	08007a5f 	.word	0x08007a5f
 8007970:	08007921 	.word	0x08007921
 8007974:	08007921 	.word	0x08007921
 8007978:	08007ac7 	.word	0x08007ac7
 800797c:	08007921 	.word	0x08007921
 8007980:	080079cf 	.word	0x080079cf
 8007984:	08007921 	.word	0x08007921
 8007988:	08007921 	.word	0x08007921
 800798c:	08007a67 	.word	0x08007a67
 8007990:	6833      	ldr	r3, [r6, #0]
 8007992:	1d1a      	adds	r2, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6032      	str	r2, [r6, #0]
 8007998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800799c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079a0:	2301      	movs	r3, #1
 80079a2:	e09d      	b.n	8007ae0 <_printf_i+0x1e8>
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	6820      	ldr	r0, [r4, #0]
 80079a8:	1d19      	adds	r1, r3, #4
 80079aa:	6031      	str	r1, [r6, #0]
 80079ac:	0606      	lsls	r6, r0, #24
 80079ae:	d501      	bpl.n	80079b4 <_printf_i+0xbc>
 80079b0:	681d      	ldr	r5, [r3, #0]
 80079b2:	e003      	b.n	80079bc <_printf_i+0xc4>
 80079b4:	0645      	lsls	r5, r0, #25
 80079b6:	d5fb      	bpl.n	80079b0 <_printf_i+0xb8>
 80079b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079bc:	2d00      	cmp	r5, #0
 80079be:	da03      	bge.n	80079c8 <_printf_i+0xd0>
 80079c0:	232d      	movs	r3, #45	@ 0x2d
 80079c2:	426d      	negs	r5, r5
 80079c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079c8:	4859      	ldr	r0, [pc, #356]	@ (8007b30 <_printf_i+0x238>)
 80079ca:	230a      	movs	r3, #10
 80079cc:	e011      	b.n	80079f2 <_printf_i+0xfa>
 80079ce:	6821      	ldr	r1, [r4, #0]
 80079d0:	6833      	ldr	r3, [r6, #0]
 80079d2:	0608      	lsls	r0, r1, #24
 80079d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80079d8:	d402      	bmi.n	80079e0 <_printf_i+0xe8>
 80079da:	0649      	lsls	r1, r1, #25
 80079dc:	bf48      	it	mi
 80079de:	b2ad      	uxthmi	r5, r5
 80079e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80079e2:	4853      	ldr	r0, [pc, #332]	@ (8007b30 <_printf_i+0x238>)
 80079e4:	6033      	str	r3, [r6, #0]
 80079e6:	bf14      	ite	ne
 80079e8:	230a      	movne	r3, #10
 80079ea:	2308      	moveq	r3, #8
 80079ec:	2100      	movs	r1, #0
 80079ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079f2:	6866      	ldr	r6, [r4, #4]
 80079f4:	60a6      	str	r6, [r4, #8]
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	bfa2      	ittt	ge
 80079fa:	6821      	ldrge	r1, [r4, #0]
 80079fc:	f021 0104 	bicge.w	r1, r1, #4
 8007a00:	6021      	strge	r1, [r4, #0]
 8007a02:	b90d      	cbnz	r5, 8007a08 <_printf_i+0x110>
 8007a04:	2e00      	cmp	r6, #0
 8007a06:	d04b      	beq.n	8007aa0 <_printf_i+0x1a8>
 8007a08:	4616      	mov	r6, r2
 8007a0a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a0e:	fb03 5711 	mls	r7, r3, r1, r5
 8007a12:	5dc7      	ldrb	r7, [r0, r7]
 8007a14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a18:	462f      	mov	r7, r5
 8007a1a:	42bb      	cmp	r3, r7
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	d9f4      	bls.n	8007a0a <_printf_i+0x112>
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d10b      	bne.n	8007a3c <_printf_i+0x144>
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	07df      	lsls	r7, r3, #31
 8007a28:	d508      	bpl.n	8007a3c <_printf_i+0x144>
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	6861      	ldr	r1, [r4, #4]
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	bfde      	ittt	le
 8007a32:	2330      	movle	r3, #48	@ 0x30
 8007a34:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a38:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a3c:	1b92      	subs	r2, r2, r6
 8007a3e:	6122      	str	r2, [r4, #16]
 8007a40:	f8cd a000 	str.w	sl, [sp]
 8007a44:	464b      	mov	r3, r9
 8007a46:	aa03      	add	r2, sp, #12
 8007a48:	4621      	mov	r1, r4
 8007a4a:	4640      	mov	r0, r8
 8007a4c:	f7ff fee6 	bl	800781c <_printf_common>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d14a      	bne.n	8007aea <_printf_i+0x1f2>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	b004      	add	sp, #16
 8007a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	f043 0320 	orr.w	r3, r3, #32
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	4833      	ldr	r0, [pc, #204]	@ (8007b34 <_printf_i+0x23c>)
 8007a68:	2778      	movs	r7, #120	@ 0x78
 8007a6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	6831      	ldr	r1, [r6, #0]
 8007a72:	061f      	lsls	r7, r3, #24
 8007a74:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a78:	d402      	bmi.n	8007a80 <_printf_i+0x188>
 8007a7a:	065f      	lsls	r7, r3, #25
 8007a7c:	bf48      	it	mi
 8007a7e:	b2ad      	uxthmi	r5, r5
 8007a80:	6031      	str	r1, [r6, #0]
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	bf44      	itt	mi
 8007a86:	f043 0320 	orrmi.w	r3, r3, #32
 8007a8a:	6023      	strmi	r3, [r4, #0]
 8007a8c:	b11d      	cbz	r5, 8007a96 <_printf_i+0x19e>
 8007a8e:	2310      	movs	r3, #16
 8007a90:	e7ac      	b.n	80079ec <_printf_i+0xf4>
 8007a92:	4827      	ldr	r0, [pc, #156]	@ (8007b30 <_printf_i+0x238>)
 8007a94:	e7e9      	b.n	8007a6a <_printf_i+0x172>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	f023 0320 	bic.w	r3, r3, #32
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	e7f6      	b.n	8007a8e <_printf_i+0x196>
 8007aa0:	4616      	mov	r6, r2
 8007aa2:	e7bd      	b.n	8007a20 <_printf_i+0x128>
 8007aa4:	6833      	ldr	r3, [r6, #0]
 8007aa6:	6825      	ldr	r5, [r4, #0]
 8007aa8:	6961      	ldr	r1, [r4, #20]
 8007aaa:	1d18      	adds	r0, r3, #4
 8007aac:	6030      	str	r0, [r6, #0]
 8007aae:	062e      	lsls	r6, r5, #24
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	d501      	bpl.n	8007ab8 <_printf_i+0x1c0>
 8007ab4:	6019      	str	r1, [r3, #0]
 8007ab6:	e002      	b.n	8007abe <_printf_i+0x1c6>
 8007ab8:	0668      	lsls	r0, r5, #25
 8007aba:	d5fb      	bpl.n	8007ab4 <_printf_i+0x1bc>
 8007abc:	8019      	strh	r1, [r3, #0]
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6123      	str	r3, [r4, #16]
 8007ac2:	4616      	mov	r6, r2
 8007ac4:	e7bc      	b.n	8007a40 <_printf_i+0x148>
 8007ac6:	6833      	ldr	r3, [r6, #0]
 8007ac8:	1d1a      	adds	r2, r3, #4
 8007aca:	6032      	str	r2, [r6, #0]
 8007acc:	681e      	ldr	r6, [r3, #0]
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f7f8 fb84 	bl	80001e0 <memchr>
 8007ad8:	b108      	cbz	r0, 8007ade <_printf_i+0x1e6>
 8007ada:	1b80      	subs	r0, r0, r6
 8007adc:	6060      	str	r0, [r4, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	6123      	str	r3, [r4, #16]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ae8:	e7aa      	b.n	8007a40 <_printf_i+0x148>
 8007aea:	6923      	ldr	r3, [r4, #16]
 8007aec:	4632      	mov	r2, r6
 8007aee:	4649      	mov	r1, r9
 8007af0:	4640      	mov	r0, r8
 8007af2:	47d0      	blx	sl
 8007af4:	3001      	adds	r0, #1
 8007af6:	d0ad      	beq.n	8007a54 <_printf_i+0x15c>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	079b      	lsls	r3, r3, #30
 8007afc:	d413      	bmi.n	8007b26 <_printf_i+0x22e>
 8007afe:	68e0      	ldr	r0, [r4, #12]
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	4298      	cmp	r0, r3
 8007b04:	bfb8      	it	lt
 8007b06:	4618      	movlt	r0, r3
 8007b08:	e7a6      	b.n	8007a58 <_printf_i+0x160>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	47d0      	blx	sl
 8007b14:	3001      	adds	r0, #1
 8007b16:	d09d      	beq.n	8007a54 <_printf_i+0x15c>
 8007b18:	3501      	adds	r5, #1
 8007b1a:	68e3      	ldr	r3, [r4, #12]
 8007b1c:	9903      	ldr	r1, [sp, #12]
 8007b1e:	1a5b      	subs	r3, r3, r1
 8007b20:	42ab      	cmp	r3, r5
 8007b22:	dcf2      	bgt.n	8007b0a <_printf_i+0x212>
 8007b24:	e7eb      	b.n	8007afe <_printf_i+0x206>
 8007b26:	2500      	movs	r5, #0
 8007b28:	f104 0619 	add.w	r6, r4, #25
 8007b2c:	e7f5      	b.n	8007b1a <_printf_i+0x222>
 8007b2e:	bf00      	nop
 8007b30:	0800ba22 	.word	0x0800ba22
 8007b34:	0800ba33 	.word	0x0800ba33

08007b38 <_scanf_float>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	b087      	sub	sp, #28
 8007b3e:	4617      	mov	r7, r2
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	688b      	ldr	r3, [r1, #8]
 8007b44:	1e5a      	subs	r2, r3, #1
 8007b46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007b4a:	bf81      	itttt	hi
 8007b4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007b50:	eb03 0b05 	addhi.w	fp, r3, r5
 8007b54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007b58:	608b      	strhi	r3, [r1, #8]
 8007b5a:	680b      	ldr	r3, [r1, #0]
 8007b5c:	460a      	mov	r2, r1
 8007b5e:	f04f 0500 	mov.w	r5, #0
 8007b62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007b66:	f842 3b1c 	str.w	r3, [r2], #28
 8007b6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b6e:	4680      	mov	r8, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	bf98      	it	ls
 8007b74:	f04f 0b00 	movls.w	fp, #0
 8007b78:	9201      	str	r2, [sp, #4]
 8007b7a:	4616      	mov	r6, r2
 8007b7c:	46aa      	mov	sl, r5
 8007b7e:	46a9      	mov	r9, r5
 8007b80:	9502      	str	r5, [sp, #8]
 8007b82:	68a2      	ldr	r2, [r4, #8]
 8007b84:	b152      	cbz	r2, 8007b9c <_scanf_float+0x64>
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8007b8c:	d864      	bhi.n	8007c58 <_scanf_float+0x120>
 8007b8e:	2b40      	cmp	r3, #64	@ 0x40
 8007b90:	d83c      	bhi.n	8007c0c <_scanf_float+0xd4>
 8007b92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007b96:	b2c8      	uxtb	r0, r1
 8007b98:	280e      	cmp	r0, #14
 8007b9a:	d93a      	bls.n	8007c12 <_scanf_float+0xda>
 8007b9c:	f1b9 0f00 	cmp.w	r9, #0
 8007ba0:	d003      	beq.n	8007baa <_scanf_float+0x72>
 8007ba2:	6823      	ldr	r3, [r4, #0]
 8007ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bae:	f1ba 0f01 	cmp.w	sl, #1
 8007bb2:	f200 8117 	bhi.w	8007de4 <_scanf_float+0x2ac>
 8007bb6:	9b01      	ldr	r3, [sp, #4]
 8007bb8:	429e      	cmp	r6, r3
 8007bba:	f200 8108 	bhi.w	8007dce <_scanf_float+0x296>
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	b007      	add	sp, #28
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007bca:	2a0d      	cmp	r2, #13
 8007bcc:	d8e6      	bhi.n	8007b9c <_scanf_float+0x64>
 8007bce:	a101      	add	r1, pc, #4	@ (adr r1, 8007bd4 <_scanf_float+0x9c>)
 8007bd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007bd4:	08007d1b 	.word	0x08007d1b
 8007bd8:	08007b9d 	.word	0x08007b9d
 8007bdc:	08007b9d 	.word	0x08007b9d
 8007be0:	08007b9d 	.word	0x08007b9d
 8007be4:	08007d7b 	.word	0x08007d7b
 8007be8:	08007d53 	.word	0x08007d53
 8007bec:	08007b9d 	.word	0x08007b9d
 8007bf0:	08007b9d 	.word	0x08007b9d
 8007bf4:	08007d29 	.word	0x08007d29
 8007bf8:	08007b9d 	.word	0x08007b9d
 8007bfc:	08007b9d 	.word	0x08007b9d
 8007c00:	08007b9d 	.word	0x08007b9d
 8007c04:	08007b9d 	.word	0x08007b9d
 8007c08:	08007ce1 	.word	0x08007ce1
 8007c0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007c10:	e7db      	b.n	8007bca <_scanf_float+0x92>
 8007c12:	290e      	cmp	r1, #14
 8007c14:	d8c2      	bhi.n	8007b9c <_scanf_float+0x64>
 8007c16:	a001      	add	r0, pc, #4	@ (adr r0, 8007c1c <_scanf_float+0xe4>)
 8007c18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c1c:	08007cd1 	.word	0x08007cd1
 8007c20:	08007b9d 	.word	0x08007b9d
 8007c24:	08007cd1 	.word	0x08007cd1
 8007c28:	08007d67 	.word	0x08007d67
 8007c2c:	08007b9d 	.word	0x08007b9d
 8007c30:	08007c79 	.word	0x08007c79
 8007c34:	08007cb7 	.word	0x08007cb7
 8007c38:	08007cb7 	.word	0x08007cb7
 8007c3c:	08007cb7 	.word	0x08007cb7
 8007c40:	08007cb7 	.word	0x08007cb7
 8007c44:	08007cb7 	.word	0x08007cb7
 8007c48:	08007cb7 	.word	0x08007cb7
 8007c4c:	08007cb7 	.word	0x08007cb7
 8007c50:	08007cb7 	.word	0x08007cb7
 8007c54:	08007cb7 	.word	0x08007cb7
 8007c58:	2b6e      	cmp	r3, #110	@ 0x6e
 8007c5a:	d809      	bhi.n	8007c70 <_scanf_float+0x138>
 8007c5c:	2b60      	cmp	r3, #96	@ 0x60
 8007c5e:	d8b2      	bhi.n	8007bc6 <_scanf_float+0x8e>
 8007c60:	2b54      	cmp	r3, #84	@ 0x54
 8007c62:	d07b      	beq.n	8007d5c <_scanf_float+0x224>
 8007c64:	2b59      	cmp	r3, #89	@ 0x59
 8007c66:	d199      	bne.n	8007b9c <_scanf_float+0x64>
 8007c68:	2d07      	cmp	r5, #7
 8007c6a:	d197      	bne.n	8007b9c <_scanf_float+0x64>
 8007c6c:	2508      	movs	r5, #8
 8007c6e:	e02c      	b.n	8007cca <_scanf_float+0x192>
 8007c70:	2b74      	cmp	r3, #116	@ 0x74
 8007c72:	d073      	beq.n	8007d5c <_scanf_float+0x224>
 8007c74:	2b79      	cmp	r3, #121	@ 0x79
 8007c76:	e7f6      	b.n	8007c66 <_scanf_float+0x12e>
 8007c78:	6821      	ldr	r1, [r4, #0]
 8007c7a:	05c8      	lsls	r0, r1, #23
 8007c7c:	d51b      	bpl.n	8007cb6 <_scanf_float+0x17e>
 8007c7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007c82:	6021      	str	r1, [r4, #0]
 8007c84:	f109 0901 	add.w	r9, r9, #1
 8007c88:	f1bb 0f00 	cmp.w	fp, #0
 8007c8c:	d003      	beq.n	8007c96 <_scanf_float+0x15e>
 8007c8e:	3201      	adds	r2, #1
 8007c90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c94:	60a2      	str	r2, [r4, #8]
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	60a3      	str	r3, [r4, #8]
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6123      	str	r3, [r4, #16]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	607b      	str	r3, [r7, #4]
 8007caa:	f340 8087 	ble.w	8007dbc <_scanf_float+0x284>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	e765      	b.n	8007b82 <_scanf_float+0x4a>
 8007cb6:	eb1a 0105 	adds.w	r1, sl, r5
 8007cba:	f47f af6f 	bne.w	8007b9c <_scanf_float+0x64>
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007cc4:	6022      	str	r2, [r4, #0]
 8007cc6:	460d      	mov	r5, r1
 8007cc8:	468a      	mov	sl, r1
 8007cca:	f806 3b01 	strb.w	r3, [r6], #1
 8007cce:	e7e2      	b.n	8007c96 <_scanf_float+0x15e>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	0610      	lsls	r0, r2, #24
 8007cd4:	f57f af62 	bpl.w	8007b9c <_scanf_float+0x64>
 8007cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007cdc:	6022      	str	r2, [r4, #0]
 8007cde:	e7f4      	b.n	8007cca <_scanf_float+0x192>
 8007ce0:	f1ba 0f00 	cmp.w	sl, #0
 8007ce4:	d10e      	bne.n	8007d04 <_scanf_float+0x1cc>
 8007ce6:	f1b9 0f00 	cmp.w	r9, #0
 8007cea:	d10e      	bne.n	8007d0a <_scanf_float+0x1d2>
 8007cec:	6822      	ldr	r2, [r4, #0]
 8007cee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cf2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007cf6:	d108      	bne.n	8007d0a <_scanf_float+0x1d2>
 8007cf8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007cfc:	6022      	str	r2, [r4, #0]
 8007cfe:	f04f 0a01 	mov.w	sl, #1
 8007d02:	e7e2      	b.n	8007cca <_scanf_float+0x192>
 8007d04:	f1ba 0f02 	cmp.w	sl, #2
 8007d08:	d055      	beq.n	8007db6 <_scanf_float+0x27e>
 8007d0a:	2d01      	cmp	r5, #1
 8007d0c:	d002      	beq.n	8007d14 <_scanf_float+0x1dc>
 8007d0e:	2d04      	cmp	r5, #4
 8007d10:	f47f af44 	bne.w	8007b9c <_scanf_float+0x64>
 8007d14:	3501      	adds	r5, #1
 8007d16:	b2ed      	uxtb	r5, r5
 8007d18:	e7d7      	b.n	8007cca <_scanf_float+0x192>
 8007d1a:	f1ba 0f01 	cmp.w	sl, #1
 8007d1e:	f47f af3d 	bne.w	8007b9c <_scanf_float+0x64>
 8007d22:	f04f 0a02 	mov.w	sl, #2
 8007d26:	e7d0      	b.n	8007cca <_scanf_float+0x192>
 8007d28:	b97d      	cbnz	r5, 8007d4a <_scanf_float+0x212>
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	f47f af38 	bne.w	8007ba2 <_scanf_float+0x6a>
 8007d32:	6822      	ldr	r2, [r4, #0]
 8007d34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d3c:	f040 8108 	bne.w	8007f50 <_scanf_float+0x418>
 8007d40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d44:	6022      	str	r2, [r4, #0]
 8007d46:	2501      	movs	r5, #1
 8007d48:	e7bf      	b.n	8007cca <_scanf_float+0x192>
 8007d4a:	2d03      	cmp	r5, #3
 8007d4c:	d0e2      	beq.n	8007d14 <_scanf_float+0x1dc>
 8007d4e:	2d05      	cmp	r5, #5
 8007d50:	e7de      	b.n	8007d10 <_scanf_float+0x1d8>
 8007d52:	2d02      	cmp	r5, #2
 8007d54:	f47f af22 	bne.w	8007b9c <_scanf_float+0x64>
 8007d58:	2503      	movs	r5, #3
 8007d5a:	e7b6      	b.n	8007cca <_scanf_float+0x192>
 8007d5c:	2d06      	cmp	r5, #6
 8007d5e:	f47f af1d 	bne.w	8007b9c <_scanf_float+0x64>
 8007d62:	2507      	movs	r5, #7
 8007d64:	e7b1      	b.n	8007cca <_scanf_float+0x192>
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	0591      	lsls	r1, r2, #22
 8007d6a:	f57f af17 	bpl.w	8007b9c <_scanf_float+0x64>
 8007d6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007d72:	6022      	str	r2, [r4, #0]
 8007d74:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d78:	e7a7      	b.n	8007cca <_scanf_float+0x192>
 8007d7a:	6822      	ldr	r2, [r4, #0]
 8007d7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007d80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d84:	d006      	beq.n	8007d94 <_scanf_float+0x25c>
 8007d86:	0550      	lsls	r0, r2, #21
 8007d88:	f57f af08 	bpl.w	8007b9c <_scanf_float+0x64>
 8007d8c:	f1b9 0f00 	cmp.w	r9, #0
 8007d90:	f000 80de 	beq.w	8007f50 <_scanf_float+0x418>
 8007d94:	0591      	lsls	r1, r2, #22
 8007d96:	bf58      	it	pl
 8007d98:	9902      	ldrpl	r1, [sp, #8]
 8007d9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d9e:	bf58      	it	pl
 8007da0:	eba9 0101 	subpl.w	r1, r9, r1
 8007da4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007da8:	bf58      	it	pl
 8007daa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007dae:	6022      	str	r2, [r4, #0]
 8007db0:	f04f 0900 	mov.w	r9, #0
 8007db4:	e789      	b.n	8007cca <_scanf_float+0x192>
 8007db6:	f04f 0a03 	mov.w	sl, #3
 8007dba:	e786      	b.n	8007cca <_scanf_float+0x192>
 8007dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	4640      	mov	r0, r8
 8007dc4:	4798      	blx	r3
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	f43f aedb 	beq.w	8007b82 <_scanf_float+0x4a>
 8007dcc:	e6e6      	b.n	8007b9c <_scanf_float+0x64>
 8007dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dd6:	463a      	mov	r2, r7
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4798      	blx	r3
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	e6e8      	b.n	8007bb6 <_scanf_float+0x7e>
 8007de4:	1e6b      	subs	r3, r5, #1
 8007de6:	2b06      	cmp	r3, #6
 8007de8:	d824      	bhi.n	8007e34 <_scanf_float+0x2fc>
 8007dea:	2d02      	cmp	r5, #2
 8007dec:	d836      	bhi.n	8007e5c <_scanf_float+0x324>
 8007dee:	9b01      	ldr	r3, [sp, #4]
 8007df0:	429e      	cmp	r6, r3
 8007df2:	f67f aee4 	bls.w	8007bbe <_scanf_float+0x86>
 8007df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dfe:	463a      	mov	r2, r7
 8007e00:	4640      	mov	r0, r8
 8007e02:	4798      	blx	r3
 8007e04:	6923      	ldr	r3, [r4, #16]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	e7f0      	b.n	8007dee <_scanf_float+0x2b6>
 8007e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007e14:	463a      	mov	r2, r7
 8007e16:	4640      	mov	r0, r8
 8007e18:	4798      	blx	r3
 8007e1a:	6923      	ldr	r3, [r4, #16]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	6123      	str	r3, [r4, #16]
 8007e20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e24:	fa5f fa8a 	uxtb.w	sl, sl
 8007e28:	f1ba 0f02 	cmp.w	sl, #2
 8007e2c:	d1ee      	bne.n	8007e0c <_scanf_float+0x2d4>
 8007e2e:	3d03      	subs	r5, #3
 8007e30:	b2ed      	uxtb	r5, r5
 8007e32:	1b76      	subs	r6, r6, r5
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	05da      	lsls	r2, r3, #23
 8007e38:	d530      	bpl.n	8007e9c <_scanf_float+0x364>
 8007e3a:	055b      	lsls	r3, r3, #21
 8007e3c:	d511      	bpl.n	8007e62 <_scanf_float+0x32a>
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	429e      	cmp	r6, r3
 8007e42:	f67f aebc 	bls.w	8007bbe <_scanf_float+0x86>
 8007e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e4e:	463a      	mov	r2, r7
 8007e50:	4640      	mov	r0, r8
 8007e52:	4798      	blx	r3
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	6123      	str	r3, [r4, #16]
 8007e5a:	e7f0      	b.n	8007e3e <_scanf_float+0x306>
 8007e5c:	46aa      	mov	sl, r5
 8007e5e:	46b3      	mov	fp, r6
 8007e60:	e7de      	b.n	8007e20 <_scanf_float+0x2e8>
 8007e62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	2965      	cmp	r1, #101	@ 0x65
 8007e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e72:	6123      	str	r3, [r4, #16]
 8007e74:	d00c      	beq.n	8007e90 <_scanf_float+0x358>
 8007e76:	2945      	cmp	r1, #69	@ 0x45
 8007e78:	d00a      	beq.n	8007e90 <_scanf_float+0x358>
 8007e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e7e:	463a      	mov	r2, r7
 8007e80:	4640      	mov	r0, r8
 8007e82:	4798      	blx	r3
 8007e84:	6923      	ldr	r3, [r4, #16]
 8007e86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	1eb5      	subs	r5, r6, #2
 8007e8e:	6123      	str	r3, [r4, #16]
 8007e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e94:	463a      	mov	r2, r7
 8007e96:	4640      	mov	r0, r8
 8007e98:	4798      	blx	r3
 8007e9a:	462e      	mov	r6, r5
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	f012 0210 	ands.w	r2, r2, #16
 8007ea2:	d001      	beq.n	8007ea8 <_scanf_float+0x370>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	e68b      	b.n	8007bc0 <_scanf_float+0x88>
 8007ea8:	7032      	strb	r2, [r6, #0]
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007eb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eb4:	d11c      	bne.n	8007ef0 <_scanf_float+0x3b8>
 8007eb6:	9b02      	ldr	r3, [sp, #8]
 8007eb8:	454b      	cmp	r3, r9
 8007eba:	eba3 0209 	sub.w	r2, r3, r9
 8007ebe:	d123      	bne.n	8007f08 <_scanf_float+0x3d0>
 8007ec0:	9901      	ldr	r1, [sp, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	f002 fc2b 	bl	800a720 <_strtod_r>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	6821      	ldr	r1, [r4, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f011 0f02 	tst.w	r1, #2
 8007ed4:	ec57 6b10 	vmov	r6, r7, d0
 8007ed8:	f103 0204 	add.w	r2, r3, #4
 8007edc:	d01f      	beq.n	8007f1e <_scanf_float+0x3e6>
 8007ede:	9903      	ldr	r1, [sp, #12]
 8007ee0:	600a      	str	r2, [r1, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	e9c3 6700 	strd	r6, r7, [r3]
 8007ee8:	68e3      	ldr	r3, [r4, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60e3      	str	r3, [r4, #12]
 8007eee:	e7d9      	b.n	8007ea4 <_scanf_float+0x36c>
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d0e4      	beq.n	8007ec0 <_scanf_float+0x388>
 8007ef6:	9905      	ldr	r1, [sp, #20]
 8007ef8:	230a      	movs	r3, #10
 8007efa:	3101      	adds	r1, #1
 8007efc:	4640      	mov	r0, r8
 8007efe:	f002 fc8f 	bl	800a820 <_strtol_r>
 8007f02:	9b04      	ldr	r3, [sp, #16]
 8007f04:	9e05      	ldr	r6, [sp, #20]
 8007f06:	1ac2      	subs	r2, r0, r3
 8007f08:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007f0c:	429e      	cmp	r6, r3
 8007f0e:	bf28      	it	cs
 8007f10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007f14:	4910      	ldr	r1, [pc, #64]	@ (8007f58 <_scanf_float+0x420>)
 8007f16:	4630      	mov	r0, r6
 8007f18:	f000 f918 	bl	800814c <siprintf>
 8007f1c:	e7d0      	b.n	8007ec0 <_scanf_float+0x388>
 8007f1e:	f011 0f04 	tst.w	r1, #4
 8007f22:	9903      	ldr	r1, [sp, #12]
 8007f24:	600a      	str	r2, [r1, #0]
 8007f26:	d1dc      	bne.n	8007ee2 <_scanf_float+0x3aa>
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	4632      	mov	r2, r6
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	4630      	mov	r0, r6
 8007f30:	4639      	mov	r1, r7
 8007f32:	f7f8 fe03 	bl	8000b3c <__aeabi_dcmpun>
 8007f36:	b128      	cbz	r0, 8007f44 <_scanf_float+0x40c>
 8007f38:	4808      	ldr	r0, [pc, #32]	@ (8007f5c <_scanf_float+0x424>)
 8007f3a:	f000 f9eb 	bl	8008314 <nanf>
 8007f3e:	ed85 0a00 	vstr	s0, [r5]
 8007f42:	e7d1      	b.n	8007ee8 <_scanf_float+0x3b0>
 8007f44:	4630      	mov	r0, r6
 8007f46:	4639      	mov	r1, r7
 8007f48:	f7f8 fe56 	bl	8000bf8 <__aeabi_d2f>
 8007f4c:	6028      	str	r0, [r5, #0]
 8007f4e:	e7cb      	b.n	8007ee8 <_scanf_float+0x3b0>
 8007f50:	f04f 0900 	mov.w	r9, #0
 8007f54:	e629      	b.n	8007baa <_scanf_float+0x72>
 8007f56:	bf00      	nop
 8007f58:	0800ba44 	.word	0x0800ba44
 8007f5c:	0800bddd 	.word	0x0800bddd

08007f60 <std>:
 8007f60:	2300      	movs	r3, #0
 8007f62:	b510      	push	{r4, lr}
 8007f64:	4604      	mov	r4, r0
 8007f66:	e9c0 3300 	strd	r3, r3, [r0]
 8007f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f6e:	6083      	str	r3, [r0, #8]
 8007f70:	8181      	strh	r1, [r0, #12]
 8007f72:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f74:	81c2      	strh	r2, [r0, #14]
 8007f76:	6183      	str	r3, [r0, #24]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	305c      	adds	r0, #92	@ 0x5c
 8007f7e:	f000 f948 	bl	8008212 <memset>
 8007f82:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <std+0x58>)
 8007f84:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f86:	4b0d      	ldr	r3, [pc, #52]	@ (8007fbc <std+0x5c>)
 8007f88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <std+0x60>)
 8007f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc4 <std+0x64>)
 8007f90:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f92:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc8 <std+0x68>)
 8007f94:	6224      	str	r4, [r4, #32]
 8007f96:	429c      	cmp	r4, r3
 8007f98:	d006      	beq.n	8007fa8 <std+0x48>
 8007f9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f9e:	4294      	cmp	r4, r2
 8007fa0:	d002      	beq.n	8007fa8 <std+0x48>
 8007fa2:	33d0      	adds	r3, #208	@ 0xd0
 8007fa4:	429c      	cmp	r4, r3
 8007fa6:	d105      	bne.n	8007fb4 <std+0x54>
 8007fa8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	f000 b9ac 	b.w	800830c <__retarget_lock_init_recursive>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop
 8007fb8:	0800818d 	.word	0x0800818d
 8007fbc:	080081af 	.word	0x080081af
 8007fc0:	080081e7 	.word	0x080081e7
 8007fc4:	0800820b 	.word	0x0800820b
 8007fc8:	200003d8 	.word	0x200003d8

08007fcc <stdio_exit_handler>:
 8007fcc:	4a02      	ldr	r2, [pc, #8]	@ (8007fd8 <stdio_exit_handler+0xc>)
 8007fce:	4903      	ldr	r1, [pc, #12]	@ (8007fdc <stdio_exit_handler+0x10>)
 8007fd0:	4803      	ldr	r0, [pc, #12]	@ (8007fe0 <stdio_exit_handler+0x14>)
 8007fd2:	f000 b869 	b.w	80080a8 <_fwalk_sglue>
 8007fd6:	bf00      	nop
 8007fd8:	20000010 	.word	0x20000010
 8007fdc:	0800abdd 	.word	0x0800abdd
 8007fe0:	20000020 	.word	0x20000020

08007fe4 <cleanup_stdio>:
 8007fe4:	6841      	ldr	r1, [r0, #4]
 8007fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <cleanup_stdio+0x34>)
 8007fe8:	4299      	cmp	r1, r3
 8007fea:	b510      	push	{r4, lr}
 8007fec:	4604      	mov	r4, r0
 8007fee:	d001      	beq.n	8007ff4 <cleanup_stdio+0x10>
 8007ff0:	f002 fdf4 	bl	800abdc <_fflush_r>
 8007ff4:	68a1      	ldr	r1, [r4, #8]
 8007ff6:	4b09      	ldr	r3, [pc, #36]	@ (800801c <cleanup_stdio+0x38>)
 8007ff8:	4299      	cmp	r1, r3
 8007ffa:	d002      	beq.n	8008002 <cleanup_stdio+0x1e>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f002 fded 	bl	800abdc <_fflush_r>
 8008002:	68e1      	ldr	r1, [r4, #12]
 8008004:	4b06      	ldr	r3, [pc, #24]	@ (8008020 <cleanup_stdio+0x3c>)
 8008006:	4299      	cmp	r1, r3
 8008008:	d004      	beq.n	8008014 <cleanup_stdio+0x30>
 800800a:	4620      	mov	r0, r4
 800800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008010:	f002 bde4 	b.w	800abdc <_fflush_r>
 8008014:	bd10      	pop	{r4, pc}
 8008016:	bf00      	nop
 8008018:	200003d8 	.word	0x200003d8
 800801c:	20000440 	.word	0x20000440
 8008020:	200004a8 	.word	0x200004a8

08008024 <global_stdio_init.part.0>:
 8008024:	b510      	push	{r4, lr}
 8008026:	4b0b      	ldr	r3, [pc, #44]	@ (8008054 <global_stdio_init.part.0+0x30>)
 8008028:	4c0b      	ldr	r4, [pc, #44]	@ (8008058 <global_stdio_init.part.0+0x34>)
 800802a:	4a0c      	ldr	r2, [pc, #48]	@ (800805c <global_stdio_init.part.0+0x38>)
 800802c:	601a      	str	r2, [r3, #0]
 800802e:	4620      	mov	r0, r4
 8008030:	2200      	movs	r2, #0
 8008032:	2104      	movs	r1, #4
 8008034:	f7ff ff94 	bl	8007f60 <std>
 8008038:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800803c:	2201      	movs	r2, #1
 800803e:	2109      	movs	r1, #9
 8008040:	f7ff ff8e 	bl	8007f60 <std>
 8008044:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008048:	2202      	movs	r2, #2
 800804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804e:	2112      	movs	r1, #18
 8008050:	f7ff bf86 	b.w	8007f60 <std>
 8008054:	20000510 	.word	0x20000510
 8008058:	200003d8 	.word	0x200003d8
 800805c:	08007fcd 	.word	0x08007fcd

08008060 <__sfp_lock_acquire>:
 8008060:	4801      	ldr	r0, [pc, #4]	@ (8008068 <__sfp_lock_acquire+0x8>)
 8008062:	f000 b954 	b.w	800830e <__retarget_lock_acquire_recursive>
 8008066:	bf00      	nop
 8008068:	20000519 	.word	0x20000519

0800806c <__sfp_lock_release>:
 800806c:	4801      	ldr	r0, [pc, #4]	@ (8008074 <__sfp_lock_release+0x8>)
 800806e:	f000 b94f 	b.w	8008310 <__retarget_lock_release_recursive>
 8008072:	bf00      	nop
 8008074:	20000519 	.word	0x20000519

08008078 <__sinit>:
 8008078:	b510      	push	{r4, lr}
 800807a:	4604      	mov	r4, r0
 800807c:	f7ff fff0 	bl	8008060 <__sfp_lock_acquire>
 8008080:	6a23      	ldr	r3, [r4, #32]
 8008082:	b11b      	cbz	r3, 800808c <__sinit+0x14>
 8008084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008088:	f7ff bff0 	b.w	800806c <__sfp_lock_release>
 800808c:	4b04      	ldr	r3, [pc, #16]	@ (80080a0 <__sinit+0x28>)
 800808e:	6223      	str	r3, [r4, #32]
 8008090:	4b04      	ldr	r3, [pc, #16]	@ (80080a4 <__sinit+0x2c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1f5      	bne.n	8008084 <__sinit+0xc>
 8008098:	f7ff ffc4 	bl	8008024 <global_stdio_init.part.0>
 800809c:	e7f2      	b.n	8008084 <__sinit+0xc>
 800809e:	bf00      	nop
 80080a0:	08007fe5 	.word	0x08007fe5
 80080a4:	20000510 	.word	0x20000510

080080a8 <_fwalk_sglue>:
 80080a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ac:	4607      	mov	r7, r0
 80080ae:	4688      	mov	r8, r1
 80080b0:	4614      	mov	r4, r2
 80080b2:	2600      	movs	r6, #0
 80080b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080b8:	f1b9 0901 	subs.w	r9, r9, #1
 80080bc:	d505      	bpl.n	80080ca <_fwalk_sglue+0x22>
 80080be:	6824      	ldr	r4, [r4, #0]
 80080c0:	2c00      	cmp	r4, #0
 80080c2:	d1f7      	bne.n	80080b4 <_fwalk_sglue+0xc>
 80080c4:	4630      	mov	r0, r6
 80080c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ca:	89ab      	ldrh	r3, [r5, #12]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d907      	bls.n	80080e0 <_fwalk_sglue+0x38>
 80080d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080d4:	3301      	adds	r3, #1
 80080d6:	d003      	beq.n	80080e0 <_fwalk_sglue+0x38>
 80080d8:	4629      	mov	r1, r5
 80080da:	4638      	mov	r0, r7
 80080dc:	47c0      	blx	r8
 80080de:	4306      	orrs	r6, r0
 80080e0:	3568      	adds	r5, #104	@ 0x68
 80080e2:	e7e9      	b.n	80080b8 <_fwalk_sglue+0x10>

080080e4 <sniprintf>:
 80080e4:	b40c      	push	{r2, r3}
 80080e6:	b530      	push	{r4, r5, lr}
 80080e8:	4b17      	ldr	r3, [pc, #92]	@ (8008148 <sniprintf+0x64>)
 80080ea:	1e0c      	subs	r4, r1, #0
 80080ec:	681d      	ldr	r5, [r3, #0]
 80080ee:	b09d      	sub	sp, #116	@ 0x74
 80080f0:	da08      	bge.n	8008104 <sniprintf+0x20>
 80080f2:	238b      	movs	r3, #139	@ 0x8b
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f04f 30ff 	mov.w	r0, #4294967295
 80080fa:	b01d      	add	sp, #116	@ 0x74
 80080fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008100:	b002      	add	sp, #8
 8008102:	4770      	bx	lr
 8008104:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800810c:	bf14      	ite	ne
 800810e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008112:	4623      	moveq	r3, r4
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800811c:	9002      	str	r0, [sp, #8]
 800811e:	9006      	str	r0, [sp, #24]
 8008120:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008124:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008126:	ab21      	add	r3, sp, #132	@ 0x84
 8008128:	a902      	add	r1, sp, #8
 800812a:	4628      	mov	r0, r5
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	f002 fbd5 	bl	800a8dc <_svfiprintf_r>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	bfbc      	itt	lt
 8008136:	238b      	movlt	r3, #139	@ 0x8b
 8008138:	602b      	strlt	r3, [r5, #0]
 800813a:	2c00      	cmp	r4, #0
 800813c:	d0dd      	beq.n	80080fa <sniprintf+0x16>
 800813e:	9b02      	ldr	r3, [sp, #8]
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
 8008144:	e7d9      	b.n	80080fa <sniprintf+0x16>
 8008146:	bf00      	nop
 8008148:	2000001c 	.word	0x2000001c

0800814c <siprintf>:
 800814c:	b40e      	push	{r1, r2, r3}
 800814e:	b500      	push	{lr}
 8008150:	b09c      	sub	sp, #112	@ 0x70
 8008152:	ab1d      	add	r3, sp, #116	@ 0x74
 8008154:	9002      	str	r0, [sp, #8]
 8008156:	9006      	str	r0, [sp, #24]
 8008158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800815c:	4809      	ldr	r0, [pc, #36]	@ (8008184 <siprintf+0x38>)
 800815e:	9107      	str	r1, [sp, #28]
 8008160:	9104      	str	r1, [sp, #16]
 8008162:	4909      	ldr	r1, [pc, #36]	@ (8008188 <siprintf+0x3c>)
 8008164:	f853 2b04 	ldr.w	r2, [r3], #4
 8008168:	9105      	str	r1, [sp, #20]
 800816a:	6800      	ldr	r0, [r0, #0]
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	a902      	add	r1, sp, #8
 8008170:	f002 fbb4 	bl	800a8dc <_svfiprintf_r>
 8008174:	9b02      	ldr	r3, [sp, #8]
 8008176:	2200      	movs	r2, #0
 8008178:	701a      	strb	r2, [r3, #0]
 800817a:	b01c      	add	sp, #112	@ 0x70
 800817c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008180:	b003      	add	sp, #12
 8008182:	4770      	bx	lr
 8008184:	2000001c 	.word	0x2000001c
 8008188:	ffff0208 	.word	0xffff0208

0800818c <__sread>:
 800818c:	b510      	push	{r4, lr}
 800818e:	460c      	mov	r4, r1
 8008190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008194:	f000 f86c 	bl	8008270 <_read_r>
 8008198:	2800      	cmp	r0, #0
 800819a:	bfab      	itete	ge
 800819c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800819e:	89a3      	ldrhlt	r3, [r4, #12]
 80081a0:	181b      	addge	r3, r3, r0
 80081a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081a6:	bfac      	ite	ge
 80081a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081aa:	81a3      	strhlt	r3, [r4, #12]
 80081ac:	bd10      	pop	{r4, pc}

080081ae <__swrite>:
 80081ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081b2:	461f      	mov	r7, r3
 80081b4:	898b      	ldrh	r3, [r1, #12]
 80081b6:	05db      	lsls	r3, r3, #23
 80081b8:	4605      	mov	r5, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	4616      	mov	r6, r2
 80081be:	d505      	bpl.n	80081cc <__swrite+0x1e>
 80081c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c4:	2302      	movs	r3, #2
 80081c6:	2200      	movs	r2, #0
 80081c8:	f000 f840 	bl	800824c <_lseek_r>
 80081cc:	89a3      	ldrh	r3, [r4, #12]
 80081ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80081d6:	81a3      	strh	r3, [r4, #12]
 80081d8:	4632      	mov	r2, r6
 80081da:	463b      	mov	r3, r7
 80081dc:	4628      	mov	r0, r5
 80081de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e2:	f000 b857 	b.w	8008294 <_write_r>

080081e6 <__sseek>:
 80081e6:	b510      	push	{r4, lr}
 80081e8:	460c      	mov	r4, r1
 80081ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081ee:	f000 f82d 	bl	800824c <_lseek_r>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	89a3      	ldrh	r3, [r4, #12]
 80081f6:	bf15      	itete	ne
 80081f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80081fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80081fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008202:	81a3      	strheq	r3, [r4, #12]
 8008204:	bf18      	it	ne
 8008206:	81a3      	strhne	r3, [r4, #12]
 8008208:	bd10      	pop	{r4, pc}

0800820a <__sclose>:
 800820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820e:	f000 b80d 	b.w	800822c <_close_r>

08008212 <memset>:
 8008212:	4402      	add	r2, r0
 8008214:	4603      	mov	r3, r0
 8008216:	4293      	cmp	r3, r2
 8008218:	d100      	bne.n	800821c <memset+0xa>
 800821a:	4770      	bx	lr
 800821c:	f803 1b01 	strb.w	r1, [r3], #1
 8008220:	e7f9      	b.n	8008216 <memset+0x4>
	...

08008224 <_localeconv_r>:
 8008224:	4800      	ldr	r0, [pc, #0]	@ (8008228 <_localeconv_r+0x4>)
 8008226:	4770      	bx	lr
 8008228:	2000015c 	.word	0x2000015c

0800822c <_close_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	4d06      	ldr	r5, [pc, #24]	@ (8008248 <_close_r+0x1c>)
 8008230:	2300      	movs	r3, #0
 8008232:	4604      	mov	r4, r0
 8008234:	4608      	mov	r0, r1
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	f7f9 fb48 	bl	80018cc <_close>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_close_r+0x1a>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_close_r+0x1a>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	20000514 	.word	0x20000514

0800824c <_lseek_r>:
 800824c:	b538      	push	{r3, r4, r5, lr}
 800824e:	4d07      	ldr	r5, [pc, #28]	@ (800826c <_lseek_r+0x20>)
 8008250:	4604      	mov	r4, r0
 8008252:	4608      	mov	r0, r1
 8008254:	4611      	mov	r1, r2
 8008256:	2200      	movs	r2, #0
 8008258:	602a      	str	r2, [r5, #0]
 800825a:	461a      	mov	r2, r3
 800825c:	f7f9 fb5d 	bl	800191a <_lseek>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_lseek_r+0x1e>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_lseek_r+0x1e>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	20000514 	.word	0x20000514

08008270 <_read_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	@ (8008290 <_read_r+0x20>)
 8008274:	4604      	mov	r4, r0
 8008276:	4608      	mov	r0, r1
 8008278:	4611      	mov	r1, r2
 800827a:	2200      	movs	r2, #0
 800827c:	602a      	str	r2, [r5, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	f7f9 faeb 	bl	800185a <_read>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_read_r+0x1e>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_read_r+0x1e>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	20000514 	.word	0x20000514

08008294 <_write_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d07      	ldr	r5, [pc, #28]	@ (80082b4 <_write_r+0x20>)
 8008298:	4604      	mov	r4, r0
 800829a:	4608      	mov	r0, r1
 800829c:	4611      	mov	r1, r2
 800829e:	2200      	movs	r2, #0
 80082a0:	602a      	str	r2, [r5, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f7f9 faf6 	bl	8001894 <_write>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d102      	bne.n	80082b2 <_write_r+0x1e>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	b103      	cbz	r3, 80082b2 <_write_r+0x1e>
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	20000514 	.word	0x20000514

080082b8 <__errno>:
 80082b8:	4b01      	ldr	r3, [pc, #4]	@ (80082c0 <__errno+0x8>)
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	2000001c 	.word	0x2000001c

080082c4 <__libc_init_array>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	4d0d      	ldr	r5, [pc, #52]	@ (80082fc <__libc_init_array+0x38>)
 80082c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008300 <__libc_init_array+0x3c>)
 80082ca:	1b64      	subs	r4, r4, r5
 80082cc:	10a4      	asrs	r4, r4, #2
 80082ce:	2600      	movs	r6, #0
 80082d0:	42a6      	cmp	r6, r4
 80082d2:	d109      	bne.n	80082e8 <__libc_init_array+0x24>
 80082d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008304 <__libc_init_array+0x40>)
 80082d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008308 <__libc_init_array+0x44>)
 80082d8:	f003 fb70 	bl	800b9bc <_init>
 80082dc:	1b64      	subs	r4, r4, r5
 80082de:	10a4      	asrs	r4, r4, #2
 80082e0:	2600      	movs	r6, #0
 80082e2:	42a6      	cmp	r6, r4
 80082e4:	d105      	bne.n	80082f2 <__libc_init_array+0x2e>
 80082e6:	bd70      	pop	{r4, r5, r6, pc}
 80082e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ec:	4798      	blx	r3
 80082ee:	3601      	adds	r6, #1
 80082f0:	e7ee      	b.n	80082d0 <__libc_init_array+0xc>
 80082f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f6:	4798      	blx	r3
 80082f8:	3601      	adds	r6, #1
 80082fa:	e7f2      	b.n	80082e2 <__libc_init_array+0x1e>
 80082fc:	0800be48 	.word	0x0800be48
 8008300:	0800be48 	.word	0x0800be48
 8008304:	0800be48 	.word	0x0800be48
 8008308:	0800be4c 	.word	0x0800be4c

0800830c <__retarget_lock_init_recursive>:
 800830c:	4770      	bx	lr

0800830e <__retarget_lock_acquire_recursive>:
 800830e:	4770      	bx	lr

08008310 <__retarget_lock_release_recursive>:
 8008310:	4770      	bx	lr
	...

08008314 <nanf>:
 8008314:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800831c <nanf+0x8>
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	7fc00000 	.word	0x7fc00000

08008320 <quorem>:
 8008320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	6903      	ldr	r3, [r0, #16]
 8008326:	690c      	ldr	r4, [r1, #16]
 8008328:	42a3      	cmp	r3, r4
 800832a:	4607      	mov	r7, r0
 800832c:	db7e      	blt.n	800842c <quorem+0x10c>
 800832e:	3c01      	subs	r4, #1
 8008330:	f101 0814 	add.w	r8, r1, #20
 8008334:	00a3      	lsls	r3, r4, #2
 8008336:	f100 0514 	add.w	r5, r0, #20
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834a:	3301      	adds	r3, #1
 800834c:	429a      	cmp	r2, r3
 800834e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008352:	fbb2 f6f3 	udiv	r6, r2, r3
 8008356:	d32e      	bcc.n	80083b6 <quorem+0x96>
 8008358:	f04f 0a00 	mov.w	sl, #0
 800835c:	46c4      	mov	ip, r8
 800835e:	46ae      	mov	lr, r5
 8008360:	46d3      	mov	fp, sl
 8008362:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008366:	b298      	uxth	r0, r3
 8008368:	fb06 a000 	mla	r0, r6, r0, sl
 800836c:	0c02      	lsrs	r2, r0, #16
 800836e:	0c1b      	lsrs	r3, r3, #16
 8008370:	fb06 2303 	mla	r3, r6, r3, r2
 8008374:	f8de 2000 	ldr.w	r2, [lr]
 8008378:	b280      	uxth	r0, r0
 800837a:	b292      	uxth	r2, r2
 800837c:	1a12      	subs	r2, r2, r0
 800837e:	445a      	add	r2, fp
 8008380:	f8de 0000 	ldr.w	r0, [lr]
 8008384:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008388:	b29b      	uxth	r3, r3
 800838a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800838e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008392:	b292      	uxth	r2, r2
 8008394:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008398:	45e1      	cmp	r9, ip
 800839a:	f84e 2b04 	str.w	r2, [lr], #4
 800839e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80083a2:	d2de      	bcs.n	8008362 <quorem+0x42>
 80083a4:	9b00      	ldr	r3, [sp, #0]
 80083a6:	58eb      	ldr	r3, [r5, r3]
 80083a8:	b92b      	cbnz	r3, 80083b6 <quorem+0x96>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	3b04      	subs	r3, #4
 80083ae:	429d      	cmp	r5, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	d32f      	bcc.n	8008414 <quorem+0xf4>
 80083b4:	613c      	str	r4, [r7, #16]
 80083b6:	4638      	mov	r0, r7
 80083b8:	f001 f9c2 	bl	8009740 <__mcmp>
 80083bc:	2800      	cmp	r0, #0
 80083be:	db25      	blt.n	800840c <quorem+0xec>
 80083c0:	4629      	mov	r1, r5
 80083c2:	2000      	movs	r0, #0
 80083c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80083c8:	f8d1 c000 	ldr.w	ip, [r1]
 80083cc:	fa1f fe82 	uxth.w	lr, r2
 80083d0:	fa1f f38c 	uxth.w	r3, ip
 80083d4:	eba3 030e 	sub.w	r3, r3, lr
 80083d8:	4403      	add	r3, r0
 80083da:	0c12      	lsrs	r2, r2, #16
 80083dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ea:	45c1      	cmp	r9, r8
 80083ec:	f841 3b04 	str.w	r3, [r1], #4
 80083f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083f4:	d2e6      	bcs.n	80083c4 <quorem+0xa4>
 80083f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083fe:	b922      	cbnz	r2, 800840a <quorem+0xea>
 8008400:	3b04      	subs	r3, #4
 8008402:	429d      	cmp	r5, r3
 8008404:	461a      	mov	r2, r3
 8008406:	d30b      	bcc.n	8008420 <quorem+0x100>
 8008408:	613c      	str	r4, [r7, #16]
 800840a:	3601      	adds	r6, #1
 800840c:	4630      	mov	r0, r6
 800840e:	b003      	add	sp, #12
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	6812      	ldr	r2, [r2, #0]
 8008416:	3b04      	subs	r3, #4
 8008418:	2a00      	cmp	r2, #0
 800841a:	d1cb      	bne.n	80083b4 <quorem+0x94>
 800841c:	3c01      	subs	r4, #1
 800841e:	e7c6      	b.n	80083ae <quorem+0x8e>
 8008420:	6812      	ldr	r2, [r2, #0]
 8008422:	3b04      	subs	r3, #4
 8008424:	2a00      	cmp	r2, #0
 8008426:	d1ef      	bne.n	8008408 <quorem+0xe8>
 8008428:	3c01      	subs	r4, #1
 800842a:	e7ea      	b.n	8008402 <quorem+0xe2>
 800842c:	2000      	movs	r0, #0
 800842e:	e7ee      	b.n	800840e <quorem+0xee>

08008430 <_dtoa_r>:
 8008430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	69c7      	ldr	r7, [r0, #28]
 8008436:	b099      	sub	sp, #100	@ 0x64
 8008438:	ed8d 0b02 	vstr	d0, [sp, #8]
 800843c:	ec55 4b10 	vmov	r4, r5, d0
 8008440:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008442:	9109      	str	r1, [sp, #36]	@ 0x24
 8008444:	4683      	mov	fp, r0
 8008446:	920e      	str	r2, [sp, #56]	@ 0x38
 8008448:	9313      	str	r3, [sp, #76]	@ 0x4c
 800844a:	b97f      	cbnz	r7, 800846c <_dtoa_r+0x3c>
 800844c:	2010      	movs	r0, #16
 800844e:	f000 fdfd 	bl	800904c <malloc>
 8008452:	4602      	mov	r2, r0
 8008454:	f8cb 001c 	str.w	r0, [fp, #28]
 8008458:	b920      	cbnz	r0, 8008464 <_dtoa_r+0x34>
 800845a:	4ba7      	ldr	r3, [pc, #668]	@ (80086f8 <_dtoa_r+0x2c8>)
 800845c:	21ef      	movs	r1, #239	@ 0xef
 800845e:	48a7      	ldr	r0, [pc, #668]	@ (80086fc <_dtoa_r+0x2cc>)
 8008460:	f002 fc36 	bl	800acd0 <__assert_func>
 8008464:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008468:	6007      	str	r7, [r0, #0]
 800846a:	60c7      	str	r7, [r0, #12]
 800846c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	b159      	cbz	r1, 800848c <_dtoa_r+0x5c>
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	604a      	str	r2, [r1, #4]
 8008478:	2301      	movs	r3, #1
 800847a:	4093      	lsls	r3, r2
 800847c:	608b      	str	r3, [r1, #8]
 800847e:	4658      	mov	r0, fp
 8008480:	f000 feda 	bl	8009238 <_Bfree>
 8008484:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	1e2b      	subs	r3, r5, #0
 800848e:	bfb9      	ittee	lt
 8008490:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008494:	9303      	strlt	r3, [sp, #12]
 8008496:	2300      	movge	r3, #0
 8008498:	6033      	strge	r3, [r6, #0]
 800849a:	9f03      	ldr	r7, [sp, #12]
 800849c:	4b98      	ldr	r3, [pc, #608]	@ (8008700 <_dtoa_r+0x2d0>)
 800849e:	bfbc      	itt	lt
 80084a0:	2201      	movlt	r2, #1
 80084a2:	6032      	strlt	r2, [r6, #0]
 80084a4:	43bb      	bics	r3, r7
 80084a6:	d112      	bne.n	80084ce <_dtoa_r+0x9e>
 80084a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084b4:	4323      	orrs	r3, r4
 80084b6:	f000 854d 	beq.w	8008f54 <_dtoa_r+0xb24>
 80084ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008714 <_dtoa_r+0x2e4>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	f000 854f 	beq.w	8008f64 <_dtoa_r+0xb34>
 80084c6:	f10a 0303 	add.w	r3, sl, #3
 80084ca:	f000 bd49 	b.w	8008f60 <_dtoa_r+0xb30>
 80084ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	ec51 0b17 	vmov	r0, r1, d7
 80084d8:	2300      	movs	r3, #0
 80084da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80084de:	f7f8 fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 80084e2:	4680      	mov	r8, r0
 80084e4:	b158      	cbz	r0, 80084fe <_dtoa_r+0xce>
 80084e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084e8:	2301      	movs	r3, #1
 80084ea:	6013      	str	r3, [r2, #0]
 80084ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084ee:	b113      	cbz	r3, 80084f6 <_dtoa_r+0xc6>
 80084f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80084f2:	4b84      	ldr	r3, [pc, #528]	@ (8008704 <_dtoa_r+0x2d4>)
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008718 <_dtoa_r+0x2e8>
 80084fa:	f000 bd33 	b.w	8008f64 <_dtoa_r+0xb34>
 80084fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008502:	aa16      	add	r2, sp, #88	@ 0x58
 8008504:	a917      	add	r1, sp, #92	@ 0x5c
 8008506:	4658      	mov	r0, fp
 8008508:	f001 fa3a 	bl	8009980 <__d2b>
 800850c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008510:	4681      	mov	r9, r0
 8008512:	2e00      	cmp	r6, #0
 8008514:	d077      	beq.n	8008606 <_dtoa_r+0x1d6>
 8008516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008518:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800851c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008520:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008524:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008528:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800852c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008530:	4619      	mov	r1, r3
 8008532:	2200      	movs	r2, #0
 8008534:	4b74      	ldr	r3, [pc, #464]	@ (8008708 <_dtoa_r+0x2d8>)
 8008536:	f7f7 feaf 	bl	8000298 <__aeabi_dsub>
 800853a:	a369      	add	r3, pc, #420	@ (adr r3, 80086e0 <_dtoa_r+0x2b0>)
 800853c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008540:	f7f8 f862 	bl	8000608 <__aeabi_dmul>
 8008544:	a368      	add	r3, pc, #416	@ (adr r3, 80086e8 <_dtoa_r+0x2b8>)
 8008546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854a:	f7f7 fea7 	bl	800029c <__adddf3>
 800854e:	4604      	mov	r4, r0
 8008550:	4630      	mov	r0, r6
 8008552:	460d      	mov	r5, r1
 8008554:	f7f7 ffee 	bl	8000534 <__aeabi_i2d>
 8008558:	a365      	add	r3, pc, #404	@ (adr r3, 80086f0 <_dtoa_r+0x2c0>)
 800855a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855e:	f7f8 f853 	bl	8000608 <__aeabi_dmul>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 fe97 	bl	800029c <__adddf3>
 800856e:	4604      	mov	r4, r0
 8008570:	460d      	mov	r5, r1
 8008572:	f7f8 faf9 	bl	8000b68 <__aeabi_d2iz>
 8008576:	2200      	movs	r2, #0
 8008578:	4607      	mov	r7, r0
 800857a:	2300      	movs	r3, #0
 800857c:	4620      	mov	r0, r4
 800857e:	4629      	mov	r1, r5
 8008580:	f7f8 fab4 	bl	8000aec <__aeabi_dcmplt>
 8008584:	b140      	cbz	r0, 8008598 <_dtoa_r+0x168>
 8008586:	4638      	mov	r0, r7
 8008588:	f7f7 ffd4 	bl	8000534 <__aeabi_i2d>
 800858c:	4622      	mov	r2, r4
 800858e:	462b      	mov	r3, r5
 8008590:	f7f8 faa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008594:	b900      	cbnz	r0, 8008598 <_dtoa_r+0x168>
 8008596:	3f01      	subs	r7, #1
 8008598:	2f16      	cmp	r7, #22
 800859a:	d851      	bhi.n	8008640 <_dtoa_r+0x210>
 800859c:	4b5b      	ldr	r3, [pc, #364]	@ (800870c <_dtoa_r+0x2dc>)
 800859e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085aa:	f7f8 fa9f 	bl	8000aec <__aeabi_dcmplt>
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d048      	beq.n	8008644 <_dtoa_r+0x214>
 80085b2:	3f01      	subs	r7, #1
 80085b4:	2300      	movs	r3, #0
 80085b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80085b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085ba:	1b9b      	subs	r3, r3, r6
 80085bc:	1e5a      	subs	r2, r3, #1
 80085be:	bf44      	itt	mi
 80085c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80085c4:	2300      	movmi	r3, #0
 80085c6:	9208      	str	r2, [sp, #32]
 80085c8:	bf54      	ite	pl
 80085ca:	f04f 0800 	movpl.w	r8, #0
 80085ce:	9308      	strmi	r3, [sp, #32]
 80085d0:	2f00      	cmp	r7, #0
 80085d2:	db39      	blt.n	8008648 <_dtoa_r+0x218>
 80085d4:	9b08      	ldr	r3, [sp, #32]
 80085d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80085d8:	443b      	add	r3, r7
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	2300      	movs	r3, #0
 80085de:	930a      	str	r3, [sp, #40]	@ 0x28
 80085e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d864      	bhi.n	80086b0 <_dtoa_r+0x280>
 80085e6:	2b05      	cmp	r3, #5
 80085e8:	bfc4      	itt	gt
 80085ea:	3b04      	subgt	r3, #4
 80085ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80085ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f0:	f1a3 0302 	sub.w	r3, r3, #2
 80085f4:	bfcc      	ite	gt
 80085f6:	2400      	movgt	r4, #0
 80085f8:	2401      	movle	r4, #1
 80085fa:	2b03      	cmp	r3, #3
 80085fc:	d863      	bhi.n	80086c6 <_dtoa_r+0x296>
 80085fe:	e8df f003 	tbb	[pc, r3]
 8008602:	372a      	.short	0x372a
 8008604:	5535      	.short	0x5535
 8008606:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800860a:	441e      	add	r6, r3
 800860c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008610:	2b20      	cmp	r3, #32
 8008612:	bfc1      	itttt	gt
 8008614:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008618:	409f      	lslgt	r7, r3
 800861a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800861e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008622:	bfd6      	itet	le
 8008624:	f1c3 0320 	rsble	r3, r3, #32
 8008628:	ea47 0003 	orrgt.w	r0, r7, r3
 800862c:	fa04 f003 	lslle.w	r0, r4, r3
 8008630:	f7f7 ff70 	bl	8000514 <__aeabi_ui2d>
 8008634:	2201      	movs	r2, #1
 8008636:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800863a:	3e01      	subs	r6, #1
 800863c:	9214      	str	r2, [sp, #80]	@ 0x50
 800863e:	e777      	b.n	8008530 <_dtoa_r+0x100>
 8008640:	2301      	movs	r3, #1
 8008642:	e7b8      	b.n	80085b6 <_dtoa_r+0x186>
 8008644:	9012      	str	r0, [sp, #72]	@ 0x48
 8008646:	e7b7      	b.n	80085b8 <_dtoa_r+0x188>
 8008648:	427b      	negs	r3, r7
 800864a:	930a      	str	r3, [sp, #40]	@ 0x28
 800864c:	2300      	movs	r3, #0
 800864e:	eba8 0807 	sub.w	r8, r8, r7
 8008652:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008654:	e7c4      	b.n	80085e0 <_dtoa_r+0x1b0>
 8008656:	2300      	movs	r3, #0
 8008658:	930b      	str	r3, [sp, #44]	@ 0x2c
 800865a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800865c:	2b00      	cmp	r3, #0
 800865e:	dc35      	bgt.n	80086cc <_dtoa_r+0x29c>
 8008660:	2301      	movs	r3, #1
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	9307      	str	r3, [sp, #28]
 8008666:	461a      	mov	r2, r3
 8008668:	920e      	str	r2, [sp, #56]	@ 0x38
 800866a:	e00b      	b.n	8008684 <_dtoa_r+0x254>
 800866c:	2301      	movs	r3, #1
 800866e:	e7f3      	b.n	8008658 <_dtoa_r+0x228>
 8008670:	2300      	movs	r3, #0
 8008672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	2b01      	cmp	r3, #1
 800867e:	9307      	str	r3, [sp, #28]
 8008680:	bfb8      	it	lt
 8008682:	2301      	movlt	r3, #1
 8008684:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008688:	2100      	movs	r1, #0
 800868a:	2204      	movs	r2, #4
 800868c:	f102 0514 	add.w	r5, r2, #20
 8008690:	429d      	cmp	r5, r3
 8008692:	d91f      	bls.n	80086d4 <_dtoa_r+0x2a4>
 8008694:	6041      	str	r1, [r0, #4]
 8008696:	4658      	mov	r0, fp
 8008698:	f000 fd8e 	bl	80091b8 <_Balloc>
 800869c:	4682      	mov	sl, r0
 800869e:	2800      	cmp	r0, #0
 80086a0:	d13c      	bne.n	800871c <_dtoa_r+0x2ec>
 80086a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008710 <_dtoa_r+0x2e0>)
 80086a4:	4602      	mov	r2, r0
 80086a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80086aa:	e6d8      	b.n	800845e <_dtoa_r+0x2e>
 80086ac:	2301      	movs	r3, #1
 80086ae:	e7e0      	b.n	8008672 <_dtoa_r+0x242>
 80086b0:	2401      	movs	r4, #1
 80086b2:	2300      	movs	r3, #0
 80086b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80086b8:	f04f 33ff 	mov.w	r3, #4294967295
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	2200      	movs	r2, #0
 80086c2:	2312      	movs	r3, #18
 80086c4:	e7d0      	b.n	8008668 <_dtoa_r+0x238>
 80086c6:	2301      	movs	r3, #1
 80086c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ca:	e7f5      	b.n	80086b8 <_dtoa_r+0x288>
 80086cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	9307      	str	r3, [sp, #28]
 80086d2:	e7d7      	b.n	8008684 <_dtoa_r+0x254>
 80086d4:	3101      	adds	r1, #1
 80086d6:	0052      	lsls	r2, r2, #1
 80086d8:	e7d8      	b.n	800868c <_dtoa_r+0x25c>
 80086da:	bf00      	nop
 80086dc:	f3af 8000 	nop.w
 80086e0:	636f4361 	.word	0x636f4361
 80086e4:	3fd287a7 	.word	0x3fd287a7
 80086e8:	8b60c8b3 	.word	0x8b60c8b3
 80086ec:	3fc68a28 	.word	0x3fc68a28
 80086f0:	509f79fb 	.word	0x509f79fb
 80086f4:	3fd34413 	.word	0x3fd34413
 80086f8:	0800ba56 	.word	0x0800ba56
 80086fc:	0800ba6d 	.word	0x0800ba6d
 8008700:	7ff00000 	.word	0x7ff00000
 8008704:	0800ba21 	.word	0x0800ba21
 8008708:	3ff80000 	.word	0x3ff80000
 800870c:	0800bb68 	.word	0x0800bb68
 8008710:	0800bac5 	.word	0x0800bac5
 8008714:	0800ba52 	.word	0x0800ba52
 8008718:	0800ba20 	.word	0x0800ba20
 800871c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008720:	6018      	str	r0, [r3, #0]
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	2b0e      	cmp	r3, #14
 8008726:	f200 80a4 	bhi.w	8008872 <_dtoa_r+0x442>
 800872a:	2c00      	cmp	r4, #0
 800872c:	f000 80a1 	beq.w	8008872 <_dtoa_r+0x442>
 8008730:	2f00      	cmp	r7, #0
 8008732:	dd33      	ble.n	800879c <_dtoa_r+0x36c>
 8008734:	4bad      	ldr	r3, [pc, #692]	@ (80089ec <_dtoa_r+0x5bc>)
 8008736:	f007 020f 	and.w	r2, r7, #15
 800873a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800873e:	ed93 7b00 	vldr	d7, [r3]
 8008742:	05f8      	lsls	r0, r7, #23
 8008744:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008748:	ea4f 1427 	mov.w	r4, r7, asr #4
 800874c:	d516      	bpl.n	800877c <_dtoa_r+0x34c>
 800874e:	4ba8      	ldr	r3, [pc, #672]	@ (80089f0 <_dtoa_r+0x5c0>)
 8008750:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008758:	f7f8 f880 	bl	800085c <__aeabi_ddiv>
 800875c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008760:	f004 040f 	and.w	r4, r4, #15
 8008764:	2603      	movs	r6, #3
 8008766:	4da2      	ldr	r5, [pc, #648]	@ (80089f0 <_dtoa_r+0x5c0>)
 8008768:	b954      	cbnz	r4, 8008780 <_dtoa_r+0x350>
 800876a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800876e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008772:	f7f8 f873 	bl	800085c <__aeabi_ddiv>
 8008776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800877a:	e028      	b.n	80087ce <_dtoa_r+0x39e>
 800877c:	2602      	movs	r6, #2
 800877e:	e7f2      	b.n	8008766 <_dtoa_r+0x336>
 8008780:	07e1      	lsls	r1, r4, #31
 8008782:	d508      	bpl.n	8008796 <_dtoa_r+0x366>
 8008784:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800878c:	f7f7 ff3c 	bl	8000608 <__aeabi_dmul>
 8008790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008794:	3601      	adds	r6, #1
 8008796:	1064      	asrs	r4, r4, #1
 8008798:	3508      	adds	r5, #8
 800879a:	e7e5      	b.n	8008768 <_dtoa_r+0x338>
 800879c:	f000 80d2 	beq.w	8008944 <_dtoa_r+0x514>
 80087a0:	427c      	negs	r4, r7
 80087a2:	4b92      	ldr	r3, [pc, #584]	@ (80089ec <_dtoa_r+0x5bc>)
 80087a4:	4d92      	ldr	r5, [pc, #584]	@ (80089f0 <_dtoa_r+0x5c0>)
 80087a6:	f004 020f 	and.w	r2, r4, #15
 80087aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087b6:	f7f7 ff27 	bl	8000608 <__aeabi_dmul>
 80087ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087be:	1124      	asrs	r4, r4, #4
 80087c0:	2300      	movs	r3, #0
 80087c2:	2602      	movs	r6, #2
 80087c4:	2c00      	cmp	r4, #0
 80087c6:	f040 80b2 	bne.w	800892e <_dtoa_r+0x4fe>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1d3      	bne.n	8008776 <_dtoa_r+0x346>
 80087ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f000 80b7 	beq.w	8008948 <_dtoa_r+0x518>
 80087da:	4b86      	ldr	r3, [pc, #536]	@ (80089f4 <_dtoa_r+0x5c4>)
 80087dc:	2200      	movs	r2, #0
 80087de:	4620      	mov	r0, r4
 80087e0:	4629      	mov	r1, r5
 80087e2:	f7f8 f983 	bl	8000aec <__aeabi_dcmplt>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f000 80ae 	beq.w	8008948 <_dtoa_r+0x518>
 80087ec:	9b07      	ldr	r3, [sp, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80aa 	beq.w	8008948 <_dtoa_r+0x518>
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dd37      	ble.n	800886a <_dtoa_r+0x43a>
 80087fa:	1e7b      	subs	r3, r7, #1
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	4620      	mov	r0, r4
 8008800:	4b7d      	ldr	r3, [pc, #500]	@ (80089f8 <_dtoa_r+0x5c8>)
 8008802:	2200      	movs	r2, #0
 8008804:	4629      	mov	r1, r5
 8008806:	f7f7 feff 	bl	8000608 <__aeabi_dmul>
 800880a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800880e:	9c00      	ldr	r4, [sp, #0]
 8008810:	3601      	adds	r6, #1
 8008812:	4630      	mov	r0, r6
 8008814:	f7f7 fe8e 	bl	8000534 <__aeabi_i2d>
 8008818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800881c:	f7f7 fef4 	bl	8000608 <__aeabi_dmul>
 8008820:	4b76      	ldr	r3, [pc, #472]	@ (80089fc <_dtoa_r+0x5cc>)
 8008822:	2200      	movs	r2, #0
 8008824:	f7f7 fd3a 	bl	800029c <__adddf3>
 8008828:	4605      	mov	r5, r0
 800882a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800882e:	2c00      	cmp	r4, #0
 8008830:	f040 808d 	bne.w	800894e <_dtoa_r+0x51e>
 8008834:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008838:	4b71      	ldr	r3, [pc, #452]	@ (8008a00 <_dtoa_r+0x5d0>)
 800883a:	2200      	movs	r2, #0
 800883c:	f7f7 fd2c 	bl	8000298 <__aeabi_dsub>
 8008840:	4602      	mov	r2, r0
 8008842:	460b      	mov	r3, r1
 8008844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008848:	462a      	mov	r2, r5
 800884a:	4633      	mov	r3, r6
 800884c:	f7f8 f96c 	bl	8000b28 <__aeabi_dcmpgt>
 8008850:	2800      	cmp	r0, #0
 8008852:	f040 828b 	bne.w	8008d6c <_dtoa_r+0x93c>
 8008856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800885a:	462a      	mov	r2, r5
 800885c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008860:	f7f8 f944 	bl	8000aec <__aeabi_dcmplt>
 8008864:	2800      	cmp	r0, #0
 8008866:	f040 8128 	bne.w	8008aba <_dtoa_r+0x68a>
 800886a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800886e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008872:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008874:	2b00      	cmp	r3, #0
 8008876:	f2c0 815a 	blt.w	8008b2e <_dtoa_r+0x6fe>
 800887a:	2f0e      	cmp	r7, #14
 800887c:	f300 8157 	bgt.w	8008b2e <_dtoa_r+0x6fe>
 8008880:	4b5a      	ldr	r3, [pc, #360]	@ (80089ec <_dtoa_r+0x5bc>)
 8008882:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008886:	ed93 7b00 	vldr	d7, [r3]
 800888a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800888c:	2b00      	cmp	r3, #0
 800888e:	ed8d 7b00 	vstr	d7, [sp]
 8008892:	da03      	bge.n	800889c <_dtoa_r+0x46c>
 8008894:	9b07      	ldr	r3, [sp, #28]
 8008896:	2b00      	cmp	r3, #0
 8008898:	f340 8101 	ble.w	8008a9e <_dtoa_r+0x66e>
 800889c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088a0:	4656      	mov	r6, sl
 80088a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f7f7 ffd7 	bl	800085c <__aeabi_ddiv>
 80088ae:	f7f8 f95b 	bl	8000b68 <__aeabi_d2iz>
 80088b2:	4680      	mov	r8, r0
 80088b4:	f7f7 fe3e 	bl	8000534 <__aeabi_i2d>
 80088b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088bc:	f7f7 fea4 	bl	8000608 <__aeabi_dmul>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	4620      	mov	r0, r4
 80088c6:	4629      	mov	r1, r5
 80088c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80088cc:	f7f7 fce4 	bl	8000298 <__aeabi_dsub>
 80088d0:	f806 4b01 	strb.w	r4, [r6], #1
 80088d4:	9d07      	ldr	r5, [sp, #28]
 80088d6:	eba6 040a 	sub.w	r4, r6, sl
 80088da:	42a5      	cmp	r5, r4
 80088dc:	4602      	mov	r2, r0
 80088de:	460b      	mov	r3, r1
 80088e0:	f040 8117 	bne.w	8008b12 <_dtoa_r+0x6e2>
 80088e4:	f7f7 fcda 	bl	800029c <__adddf3>
 80088e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ec:	4604      	mov	r4, r0
 80088ee:	460d      	mov	r5, r1
 80088f0:	f7f8 f91a 	bl	8000b28 <__aeabi_dcmpgt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 80f9 	bne.w	8008aec <_dtoa_r+0x6bc>
 80088fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088fe:	4620      	mov	r0, r4
 8008900:	4629      	mov	r1, r5
 8008902:	f7f8 f8e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008906:	b118      	cbz	r0, 8008910 <_dtoa_r+0x4e0>
 8008908:	f018 0f01 	tst.w	r8, #1
 800890c:	f040 80ee 	bne.w	8008aec <_dtoa_r+0x6bc>
 8008910:	4649      	mov	r1, r9
 8008912:	4658      	mov	r0, fp
 8008914:	f000 fc90 	bl	8009238 <_Bfree>
 8008918:	2300      	movs	r3, #0
 800891a:	7033      	strb	r3, [r6, #0]
 800891c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800891e:	3701      	adds	r7, #1
 8008920:	601f      	str	r7, [r3, #0]
 8008922:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 831d 	beq.w	8008f64 <_dtoa_r+0xb34>
 800892a:	601e      	str	r6, [r3, #0]
 800892c:	e31a      	b.n	8008f64 <_dtoa_r+0xb34>
 800892e:	07e2      	lsls	r2, r4, #31
 8008930:	d505      	bpl.n	800893e <_dtoa_r+0x50e>
 8008932:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008936:	f7f7 fe67 	bl	8000608 <__aeabi_dmul>
 800893a:	3601      	adds	r6, #1
 800893c:	2301      	movs	r3, #1
 800893e:	1064      	asrs	r4, r4, #1
 8008940:	3508      	adds	r5, #8
 8008942:	e73f      	b.n	80087c4 <_dtoa_r+0x394>
 8008944:	2602      	movs	r6, #2
 8008946:	e742      	b.n	80087ce <_dtoa_r+0x39e>
 8008948:	9c07      	ldr	r4, [sp, #28]
 800894a:	9704      	str	r7, [sp, #16]
 800894c:	e761      	b.n	8008812 <_dtoa_r+0x3e2>
 800894e:	4b27      	ldr	r3, [pc, #156]	@ (80089ec <_dtoa_r+0x5bc>)
 8008950:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008952:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008956:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800895a:	4454      	add	r4, sl
 800895c:	2900      	cmp	r1, #0
 800895e:	d053      	beq.n	8008a08 <_dtoa_r+0x5d8>
 8008960:	4928      	ldr	r1, [pc, #160]	@ (8008a04 <_dtoa_r+0x5d4>)
 8008962:	2000      	movs	r0, #0
 8008964:	f7f7 ff7a 	bl	800085c <__aeabi_ddiv>
 8008968:	4633      	mov	r3, r6
 800896a:	462a      	mov	r2, r5
 800896c:	f7f7 fc94 	bl	8000298 <__aeabi_dsub>
 8008970:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008974:	4656      	mov	r6, sl
 8008976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800897a:	f7f8 f8f5 	bl	8000b68 <__aeabi_d2iz>
 800897e:	4605      	mov	r5, r0
 8008980:	f7f7 fdd8 	bl	8000534 <__aeabi_i2d>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800898c:	f7f7 fc84 	bl	8000298 <__aeabi_dsub>
 8008990:	3530      	adds	r5, #48	@ 0x30
 8008992:	4602      	mov	r2, r0
 8008994:	460b      	mov	r3, r1
 8008996:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800899a:	f806 5b01 	strb.w	r5, [r6], #1
 800899e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089a2:	f7f8 f8a3 	bl	8000aec <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	d171      	bne.n	8008a8e <_dtoa_r+0x65e>
 80089aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089ae:	4911      	ldr	r1, [pc, #68]	@ (80089f4 <_dtoa_r+0x5c4>)
 80089b0:	2000      	movs	r0, #0
 80089b2:	f7f7 fc71 	bl	8000298 <__aeabi_dsub>
 80089b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089ba:	f7f8 f897 	bl	8000aec <__aeabi_dcmplt>
 80089be:	2800      	cmp	r0, #0
 80089c0:	f040 8095 	bne.w	8008aee <_dtoa_r+0x6be>
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	f43f af50 	beq.w	800886a <_dtoa_r+0x43a>
 80089ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089ce:	4b0a      	ldr	r3, [pc, #40]	@ (80089f8 <_dtoa_r+0x5c8>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	f7f7 fe19 	bl	8000608 <__aeabi_dmul>
 80089d6:	4b08      	ldr	r3, [pc, #32]	@ (80089f8 <_dtoa_r+0x5c8>)
 80089d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089dc:	2200      	movs	r2, #0
 80089de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089e2:	f7f7 fe11 	bl	8000608 <__aeabi_dmul>
 80089e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ea:	e7c4      	b.n	8008976 <_dtoa_r+0x546>
 80089ec:	0800bb68 	.word	0x0800bb68
 80089f0:	0800bb40 	.word	0x0800bb40
 80089f4:	3ff00000 	.word	0x3ff00000
 80089f8:	40240000 	.word	0x40240000
 80089fc:	401c0000 	.word	0x401c0000
 8008a00:	40140000 	.word	0x40140000
 8008a04:	3fe00000 	.word	0x3fe00000
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	f7f7 fdfc 	bl	8000608 <__aeabi_dmul>
 8008a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a14:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a16:	4656      	mov	r6, sl
 8008a18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a1c:	f7f8 f8a4 	bl	8000b68 <__aeabi_d2iz>
 8008a20:	4605      	mov	r5, r0
 8008a22:	f7f7 fd87 	bl	8000534 <__aeabi_i2d>
 8008a26:	4602      	mov	r2, r0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a2e:	f7f7 fc33 	bl	8000298 <__aeabi_dsub>
 8008a32:	3530      	adds	r5, #48	@ 0x30
 8008a34:	f806 5b01 	strb.w	r5, [r6], #1
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	42a6      	cmp	r6, r4
 8008a3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a42:	f04f 0200 	mov.w	r2, #0
 8008a46:	d124      	bne.n	8008a92 <_dtoa_r+0x662>
 8008a48:	4bac      	ldr	r3, [pc, #688]	@ (8008cfc <_dtoa_r+0x8cc>)
 8008a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a4e:	f7f7 fc25 	bl	800029c <__adddf3>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a5a:	f7f8 f865 	bl	8000b28 <__aeabi_dcmpgt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d145      	bne.n	8008aee <_dtoa_r+0x6be>
 8008a62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a66:	49a5      	ldr	r1, [pc, #660]	@ (8008cfc <_dtoa_r+0x8cc>)
 8008a68:	2000      	movs	r0, #0
 8008a6a:	f7f7 fc15 	bl	8000298 <__aeabi_dsub>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a76:	f7f8 f839 	bl	8000aec <__aeabi_dcmplt>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	f43f aef5 	beq.w	800886a <_dtoa_r+0x43a>
 8008a80:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a82:	1e73      	subs	r3, r6, #1
 8008a84:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a86:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a8a:	2b30      	cmp	r3, #48	@ 0x30
 8008a8c:	d0f8      	beq.n	8008a80 <_dtoa_r+0x650>
 8008a8e:	9f04      	ldr	r7, [sp, #16]
 8008a90:	e73e      	b.n	8008910 <_dtoa_r+0x4e0>
 8008a92:	4b9b      	ldr	r3, [pc, #620]	@ (8008d00 <_dtoa_r+0x8d0>)
 8008a94:	f7f7 fdb8 	bl	8000608 <__aeabi_dmul>
 8008a98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a9c:	e7bc      	b.n	8008a18 <_dtoa_r+0x5e8>
 8008a9e:	d10c      	bne.n	8008aba <_dtoa_r+0x68a>
 8008aa0:	4b98      	ldr	r3, [pc, #608]	@ (8008d04 <_dtoa_r+0x8d4>)
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aa8:	f7f7 fdae 	bl	8000608 <__aeabi_dmul>
 8008aac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ab0:	f7f8 f830 	bl	8000b14 <__aeabi_dcmpge>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f000 8157 	beq.w	8008d68 <_dtoa_r+0x938>
 8008aba:	2400      	movs	r4, #0
 8008abc:	4625      	mov	r5, r4
 8008abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ac0:	43db      	mvns	r3, r3
 8008ac2:	9304      	str	r3, [sp, #16]
 8008ac4:	4656      	mov	r6, sl
 8008ac6:	2700      	movs	r7, #0
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4658      	mov	r0, fp
 8008acc:	f000 fbb4 	bl	8009238 <_Bfree>
 8008ad0:	2d00      	cmp	r5, #0
 8008ad2:	d0dc      	beq.n	8008a8e <_dtoa_r+0x65e>
 8008ad4:	b12f      	cbz	r7, 8008ae2 <_dtoa_r+0x6b2>
 8008ad6:	42af      	cmp	r7, r5
 8008ad8:	d003      	beq.n	8008ae2 <_dtoa_r+0x6b2>
 8008ada:	4639      	mov	r1, r7
 8008adc:	4658      	mov	r0, fp
 8008ade:	f000 fbab 	bl	8009238 <_Bfree>
 8008ae2:	4629      	mov	r1, r5
 8008ae4:	4658      	mov	r0, fp
 8008ae6:	f000 fba7 	bl	8009238 <_Bfree>
 8008aea:	e7d0      	b.n	8008a8e <_dtoa_r+0x65e>
 8008aec:	9704      	str	r7, [sp, #16]
 8008aee:	4633      	mov	r3, r6
 8008af0:	461e      	mov	r6, r3
 8008af2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008af6:	2a39      	cmp	r2, #57	@ 0x39
 8008af8:	d107      	bne.n	8008b0a <_dtoa_r+0x6da>
 8008afa:	459a      	cmp	sl, r3
 8008afc:	d1f8      	bne.n	8008af0 <_dtoa_r+0x6c0>
 8008afe:	9a04      	ldr	r2, [sp, #16]
 8008b00:	3201      	adds	r2, #1
 8008b02:	9204      	str	r2, [sp, #16]
 8008b04:	2230      	movs	r2, #48	@ 0x30
 8008b06:	f88a 2000 	strb.w	r2, [sl]
 8008b0a:	781a      	ldrb	r2, [r3, #0]
 8008b0c:	3201      	adds	r2, #1
 8008b0e:	701a      	strb	r2, [r3, #0]
 8008b10:	e7bd      	b.n	8008a8e <_dtoa_r+0x65e>
 8008b12:	4b7b      	ldr	r3, [pc, #492]	@ (8008d00 <_dtoa_r+0x8d0>)
 8008b14:	2200      	movs	r2, #0
 8008b16:	f7f7 fd77 	bl	8000608 <__aeabi_dmul>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	460d      	mov	r5, r1
 8008b22:	f7f7 ffd9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f43f aebb 	beq.w	80088a2 <_dtoa_r+0x472>
 8008b2c:	e6f0      	b.n	8008910 <_dtoa_r+0x4e0>
 8008b2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b30:	2a00      	cmp	r2, #0
 8008b32:	f000 80db 	beq.w	8008cec <_dtoa_r+0x8bc>
 8008b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b38:	2a01      	cmp	r2, #1
 8008b3a:	f300 80bf 	bgt.w	8008cbc <_dtoa_r+0x88c>
 8008b3e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b40:	2a00      	cmp	r2, #0
 8008b42:	f000 80b7 	beq.w	8008cb4 <_dtoa_r+0x884>
 8008b46:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b4a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b4c:	4646      	mov	r6, r8
 8008b4e:	9a08      	ldr	r2, [sp, #32]
 8008b50:	2101      	movs	r1, #1
 8008b52:	441a      	add	r2, r3
 8008b54:	4658      	mov	r0, fp
 8008b56:	4498      	add	r8, r3
 8008b58:	9208      	str	r2, [sp, #32]
 8008b5a:	f000 fc6b 	bl	8009434 <__i2b>
 8008b5e:	4605      	mov	r5, r0
 8008b60:	b15e      	cbz	r6, 8008b7a <_dtoa_r+0x74a>
 8008b62:	9b08      	ldr	r3, [sp, #32]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	dd08      	ble.n	8008b7a <_dtoa_r+0x74a>
 8008b68:	42b3      	cmp	r3, r6
 8008b6a:	9a08      	ldr	r2, [sp, #32]
 8008b6c:	bfa8      	it	ge
 8008b6e:	4633      	movge	r3, r6
 8008b70:	eba8 0803 	sub.w	r8, r8, r3
 8008b74:	1af6      	subs	r6, r6, r3
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	9308      	str	r3, [sp, #32]
 8008b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b7c:	b1f3      	cbz	r3, 8008bbc <_dtoa_r+0x78c>
 8008b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80b7 	beq.w	8008cf4 <_dtoa_r+0x8c4>
 8008b86:	b18c      	cbz	r4, 8008bac <_dtoa_r+0x77c>
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4622      	mov	r2, r4
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f000 fd11 	bl	80095b4 <__pow5mult>
 8008b92:	464a      	mov	r2, r9
 8008b94:	4601      	mov	r1, r0
 8008b96:	4605      	mov	r5, r0
 8008b98:	4658      	mov	r0, fp
 8008b9a:	f000 fc61 	bl	8009460 <__multiply>
 8008b9e:	4649      	mov	r1, r9
 8008ba0:	9004      	str	r0, [sp, #16]
 8008ba2:	4658      	mov	r0, fp
 8008ba4:	f000 fb48 	bl	8009238 <_Bfree>
 8008ba8:	9b04      	ldr	r3, [sp, #16]
 8008baa:	4699      	mov	r9, r3
 8008bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bae:	1b1a      	subs	r2, r3, r4
 8008bb0:	d004      	beq.n	8008bbc <_dtoa_r+0x78c>
 8008bb2:	4649      	mov	r1, r9
 8008bb4:	4658      	mov	r0, fp
 8008bb6:	f000 fcfd 	bl	80095b4 <__pow5mult>
 8008bba:	4681      	mov	r9, r0
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	f000 fc38 	bl	8009434 <__i2b>
 8008bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 81cf 	beq.w	8008f6c <_dtoa_r+0xb3c>
 8008bce:	461a      	mov	r2, r3
 8008bd0:	4601      	mov	r1, r0
 8008bd2:	4658      	mov	r0, fp
 8008bd4:	f000 fcee 	bl	80095b4 <__pow5mult>
 8008bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	4604      	mov	r4, r0
 8008bde:	f300 8095 	bgt.w	8008d0c <_dtoa_r+0x8dc>
 8008be2:	9b02      	ldr	r3, [sp, #8]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f040 8087 	bne.w	8008cf8 <_dtoa_r+0x8c8>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 8089 	bne.w	8008d08 <_dtoa_r+0x8d8>
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bfc:	0d1b      	lsrs	r3, r3, #20
 8008bfe:	051b      	lsls	r3, r3, #20
 8008c00:	b12b      	cbz	r3, 8008c0e <_dtoa_r+0x7de>
 8008c02:	9b08      	ldr	r3, [sp, #32]
 8008c04:	3301      	adds	r3, #1
 8008c06:	9308      	str	r3, [sp, #32]
 8008c08:	f108 0801 	add.w	r8, r8, #1
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 81b0 	beq.w	8008f78 <_dtoa_r+0xb48>
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c1e:	6918      	ldr	r0, [r3, #16]
 8008c20:	f000 fbbc 	bl	800939c <__hi0bits>
 8008c24:	f1c0 0020 	rsb	r0, r0, #32
 8008c28:	9b08      	ldr	r3, [sp, #32]
 8008c2a:	4418      	add	r0, r3
 8008c2c:	f010 001f 	ands.w	r0, r0, #31
 8008c30:	d077      	beq.n	8008d22 <_dtoa_r+0x8f2>
 8008c32:	f1c0 0320 	rsb	r3, r0, #32
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	dd6b      	ble.n	8008d12 <_dtoa_r+0x8e2>
 8008c3a:	9b08      	ldr	r3, [sp, #32]
 8008c3c:	f1c0 001c 	rsb	r0, r0, #28
 8008c40:	4403      	add	r3, r0
 8008c42:	4480      	add	r8, r0
 8008c44:	4406      	add	r6, r0
 8008c46:	9308      	str	r3, [sp, #32]
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	dd05      	ble.n	8008c5a <_dtoa_r+0x82a>
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4642      	mov	r2, r8
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fd08 	bl	8009668 <__lshift>
 8008c58:	4681      	mov	r9, r0
 8008c5a:	9b08      	ldr	r3, [sp, #32]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd05      	ble.n	8008c6c <_dtoa_r+0x83c>
 8008c60:	4621      	mov	r1, r4
 8008c62:	461a      	mov	r2, r3
 8008c64:	4658      	mov	r0, fp
 8008c66:	f000 fcff 	bl	8009668 <__lshift>
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d059      	beq.n	8008d26 <_dtoa_r+0x8f6>
 8008c72:	4621      	mov	r1, r4
 8008c74:	4648      	mov	r0, r9
 8008c76:	f000 fd63 	bl	8009740 <__mcmp>
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	da53      	bge.n	8008d26 <_dtoa_r+0x8f6>
 8008c7e:	1e7b      	subs	r3, r7, #1
 8008c80:	9304      	str	r3, [sp, #16]
 8008c82:	4649      	mov	r1, r9
 8008c84:	2300      	movs	r3, #0
 8008c86:	220a      	movs	r2, #10
 8008c88:	4658      	mov	r0, fp
 8008c8a:	f000 faf7 	bl	800927c <__multadd>
 8008c8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c90:	4681      	mov	r9, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8172 	beq.w	8008f7c <_dtoa_r+0xb4c>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	220a      	movs	r2, #10
 8008c9e:	4658      	mov	r0, fp
 8008ca0:	f000 faec 	bl	800927c <__multadd>
 8008ca4:	9b00      	ldr	r3, [sp, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	4605      	mov	r5, r0
 8008caa:	dc67      	bgt.n	8008d7c <_dtoa_r+0x94c>
 8008cac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dc41      	bgt.n	8008d36 <_dtoa_r+0x906>
 8008cb2:	e063      	b.n	8008d7c <_dtoa_r+0x94c>
 8008cb4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cb6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008cba:	e746      	b.n	8008b4a <_dtoa_r+0x71a>
 8008cbc:	9b07      	ldr	r3, [sp, #28]
 8008cbe:	1e5c      	subs	r4, r3, #1
 8008cc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	bfbf      	itttt	lt
 8008cc6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008cc8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008cca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008ccc:	1ae3      	sublt	r3, r4, r3
 8008cce:	bfb4      	ite	lt
 8008cd0:	18d2      	addlt	r2, r2, r3
 8008cd2:	1b1c      	subge	r4, r3, r4
 8008cd4:	9b07      	ldr	r3, [sp, #28]
 8008cd6:	bfbc      	itt	lt
 8008cd8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008cda:	2400      	movlt	r4, #0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfb5      	itete	lt
 8008ce0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ce4:	9b07      	ldrge	r3, [sp, #28]
 8008ce6:	2300      	movlt	r3, #0
 8008ce8:	4646      	movge	r6, r8
 8008cea:	e730      	b.n	8008b4e <_dtoa_r+0x71e>
 8008cec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008cf0:	4646      	mov	r6, r8
 8008cf2:	e735      	b.n	8008b60 <_dtoa_r+0x730>
 8008cf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cf6:	e75c      	b.n	8008bb2 <_dtoa_r+0x782>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e788      	b.n	8008c0e <_dtoa_r+0x7de>
 8008cfc:	3fe00000 	.word	0x3fe00000
 8008d00:	40240000 	.word	0x40240000
 8008d04:	40140000 	.word	0x40140000
 8008d08:	9b02      	ldr	r3, [sp, #8]
 8008d0a:	e780      	b.n	8008c0e <_dtoa_r+0x7de>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d10:	e782      	b.n	8008c18 <_dtoa_r+0x7e8>
 8008d12:	d099      	beq.n	8008c48 <_dtoa_r+0x818>
 8008d14:	9a08      	ldr	r2, [sp, #32]
 8008d16:	331c      	adds	r3, #28
 8008d18:	441a      	add	r2, r3
 8008d1a:	4498      	add	r8, r3
 8008d1c:	441e      	add	r6, r3
 8008d1e:	9208      	str	r2, [sp, #32]
 8008d20:	e792      	b.n	8008c48 <_dtoa_r+0x818>
 8008d22:	4603      	mov	r3, r0
 8008d24:	e7f6      	b.n	8008d14 <_dtoa_r+0x8e4>
 8008d26:	9b07      	ldr	r3, [sp, #28]
 8008d28:	9704      	str	r7, [sp, #16]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dc20      	bgt.n	8008d70 <_dtoa_r+0x940>
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	dd1e      	ble.n	8008d74 <_dtoa_r+0x944>
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f47f aec0 	bne.w	8008abe <_dtoa_r+0x68e>
 8008d3e:	4621      	mov	r1, r4
 8008d40:	2205      	movs	r2, #5
 8008d42:	4658      	mov	r0, fp
 8008d44:	f000 fa9a 	bl	800927c <__multadd>
 8008d48:	4601      	mov	r1, r0
 8008d4a:	4604      	mov	r4, r0
 8008d4c:	4648      	mov	r0, r9
 8008d4e:	f000 fcf7 	bl	8009740 <__mcmp>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	f77f aeb3 	ble.w	8008abe <_dtoa_r+0x68e>
 8008d58:	4656      	mov	r6, sl
 8008d5a:	2331      	movs	r3, #49	@ 0x31
 8008d5c:	f806 3b01 	strb.w	r3, [r6], #1
 8008d60:	9b04      	ldr	r3, [sp, #16]
 8008d62:	3301      	adds	r3, #1
 8008d64:	9304      	str	r3, [sp, #16]
 8008d66:	e6ae      	b.n	8008ac6 <_dtoa_r+0x696>
 8008d68:	9c07      	ldr	r4, [sp, #28]
 8008d6a:	9704      	str	r7, [sp, #16]
 8008d6c:	4625      	mov	r5, r4
 8008d6e:	e7f3      	b.n	8008d58 <_dtoa_r+0x928>
 8008d70:	9b07      	ldr	r3, [sp, #28]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 8104 	beq.w	8008f84 <_dtoa_r+0xb54>
 8008d7c:	2e00      	cmp	r6, #0
 8008d7e:	dd05      	ble.n	8008d8c <_dtoa_r+0x95c>
 8008d80:	4629      	mov	r1, r5
 8008d82:	4632      	mov	r2, r6
 8008d84:	4658      	mov	r0, fp
 8008d86:	f000 fc6f 	bl	8009668 <__lshift>
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d05a      	beq.n	8008e48 <_dtoa_r+0xa18>
 8008d92:	6869      	ldr	r1, [r5, #4]
 8008d94:	4658      	mov	r0, fp
 8008d96:	f000 fa0f 	bl	80091b8 <_Balloc>
 8008d9a:	4606      	mov	r6, r0
 8008d9c:	b928      	cbnz	r0, 8008daa <_dtoa_r+0x97a>
 8008d9e:	4b84      	ldr	r3, [pc, #528]	@ (8008fb0 <_dtoa_r+0xb80>)
 8008da0:	4602      	mov	r2, r0
 8008da2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008da6:	f7ff bb5a 	b.w	800845e <_dtoa_r+0x2e>
 8008daa:	692a      	ldr	r2, [r5, #16]
 8008dac:	3202      	adds	r2, #2
 8008dae:	0092      	lsls	r2, r2, #2
 8008db0:	f105 010c 	add.w	r1, r5, #12
 8008db4:	300c      	adds	r0, #12
 8008db6:	f001 ff75 	bl	800aca4 <memcpy>
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	4658      	mov	r0, fp
 8008dc0:	f000 fc52 	bl	8009668 <__lshift>
 8008dc4:	f10a 0301 	add.w	r3, sl, #1
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	4453      	add	r3, sl
 8008dce:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	462f      	mov	r7, r5
 8008dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dda:	4605      	mov	r5, r0
 8008ddc:	9b07      	ldr	r3, [sp, #28]
 8008dde:	4621      	mov	r1, r4
 8008de0:	3b01      	subs	r3, #1
 8008de2:	4648      	mov	r0, r9
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	f7ff fa9b 	bl	8008320 <quorem>
 8008dea:	4639      	mov	r1, r7
 8008dec:	9002      	str	r0, [sp, #8]
 8008dee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008df2:	4648      	mov	r0, r9
 8008df4:	f000 fca4 	bl	8009740 <__mcmp>
 8008df8:	462a      	mov	r2, r5
 8008dfa:	9008      	str	r0, [sp, #32]
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f000 fcba 	bl	8009778 <__mdiff>
 8008e04:	68c2      	ldr	r2, [r0, #12]
 8008e06:	4606      	mov	r6, r0
 8008e08:	bb02      	cbnz	r2, 8008e4c <_dtoa_r+0xa1c>
 8008e0a:	4601      	mov	r1, r0
 8008e0c:	4648      	mov	r0, r9
 8008e0e:	f000 fc97 	bl	8009740 <__mcmp>
 8008e12:	4602      	mov	r2, r0
 8008e14:	4631      	mov	r1, r6
 8008e16:	4658      	mov	r0, fp
 8008e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e1a:	f000 fa0d 	bl	8009238 <_Bfree>
 8008e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e22:	9e07      	ldr	r6, [sp, #28]
 8008e24:	ea43 0102 	orr.w	r1, r3, r2
 8008e28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e2a:	4319      	orrs	r1, r3
 8008e2c:	d110      	bne.n	8008e50 <_dtoa_r+0xa20>
 8008e2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e32:	d029      	beq.n	8008e88 <_dtoa_r+0xa58>
 8008e34:	9b08      	ldr	r3, [sp, #32]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	dd02      	ble.n	8008e40 <_dtoa_r+0xa10>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008e40:	9b00      	ldr	r3, [sp, #0]
 8008e42:	f883 8000 	strb.w	r8, [r3]
 8008e46:	e63f      	b.n	8008ac8 <_dtoa_r+0x698>
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e7bb      	b.n	8008dc4 <_dtoa_r+0x994>
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	e7e1      	b.n	8008e14 <_dtoa_r+0x9e4>
 8008e50:	9b08      	ldr	r3, [sp, #32]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	db04      	blt.n	8008e60 <_dtoa_r+0xa30>
 8008e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e58:	430b      	orrs	r3, r1
 8008e5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e5c:	430b      	orrs	r3, r1
 8008e5e:	d120      	bne.n	8008ea2 <_dtoa_r+0xa72>
 8008e60:	2a00      	cmp	r2, #0
 8008e62:	dded      	ble.n	8008e40 <_dtoa_r+0xa10>
 8008e64:	4649      	mov	r1, r9
 8008e66:	2201      	movs	r2, #1
 8008e68:	4658      	mov	r0, fp
 8008e6a:	f000 fbfd 	bl	8009668 <__lshift>
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4681      	mov	r9, r0
 8008e72:	f000 fc65 	bl	8009740 <__mcmp>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	dc03      	bgt.n	8008e82 <_dtoa_r+0xa52>
 8008e7a:	d1e1      	bne.n	8008e40 <_dtoa_r+0xa10>
 8008e7c:	f018 0f01 	tst.w	r8, #1
 8008e80:	d0de      	beq.n	8008e40 <_dtoa_r+0xa10>
 8008e82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e86:	d1d8      	bne.n	8008e3a <_dtoa_r+0xa0a>
 8008e88:	9a00      	ldr	r2, [sp, #0]
 8008e8a:	2339      	movs	r3, #57	@ 0x39
 8008e8c:	7013      	strb	r3, [r2, #0]
 8008e8e:	4633      	mov	r3, r6
 8008e90:	461e      	mov	r6, r3
 8008e92:	3b01      	subs	r3, #1
 8008e94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e98:	2a39      	cmp	r2, #57	@ 0x39
 8008e9a:	d052      	beq.n	8008f42 <_dtoa_r+0xb12>
 8008e9c:	3201      	adds	r2, #1
 8008e9e:	701a      	strb	r2, [r3, #0]
 8008ea0:	e612      	b.n	8008ac8 <_dtoa_r+0x698>
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	dd07      	ble.n	8008eb6 <_dtoa_r+0xa86>
 8008ea6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008eaa:	d0ed      	beq.n	8008e88 <_dtoa_r+0xa58>
 8008eac:	9a00      	ldr	r2, [sp, #0]
 8008eae:	f108 0301 	add.w	r3, r8, #1
 8008eb2:	7013      	strb	r3, [r2, #0]
 8008eb4:	e608      	b.n	8008ac8 <_dtoa_r+0x698>
 8008eb6:	9b07      	ldr	r3, [sp, #28]
 8008eb8:	9a07      	ldr	r2, [sp, #28]
 8008eba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d028      	beq.n	8008f16 <_dtoa_r+0xae6>
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	220a      	movs	r2, #10
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f000 f9d6 	bl	800927c <__multadd>
 8008ed0:	42af      	cmp	r7, r5
 8008ed2:	4681      	mov	r9, r0
 8008ed4:	f04f 0300 	mov.w	r3, #0
 8008ed8:	f04f 020a 	mov.w	r2, #10
 8008edc:	4639      	mov	r1, r7
 8008ede:	4658      	mov	r0, fp
 8008ee0:	d107      	bne.n	8008ef2 <_dtoa_r+0xac2>
 8008ee2:	f000 f9cb 	bl	800927c <__multadd>
 8008ee6:	4607      	mov	r7, r0
 8008ee8:	4605      	mov	r5, r0
 8008eea:	9b07      	ldr	r3, [sp, #28]
 8008eec:	3301      	adds	r3, #1
 8008eee:	9307      	str	r3, [sp, #28]
 8008ef0:	e774      	b.n	8008ddc <_dtoa_r+0x9ac>
 8008ef2:	f000 f9c3 	bl	800927c <__multadd>
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4607      	mov	r7, r0
 8008efa:	2300      	movs	r3, #0
 8008efc:	220a      	movs	r2, #10
 8008efe:	4658      	mov	r0, fp
 8008f00:	f000 f9bc 	bl	800927c <__multadd>
 8008f04:	4605      	mov	r5, r0
 8008f06:	e7f0      	b.n	8008eea <_dtoa_r+0xaba>
 8008f08:	9b00      	ldr	r3, [sp, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	bfcc      	ite	gt
 8008f0e:	461e      	movgt	r6, r3
 8008f10:	2601      	movle	r6, #1
 8008f12:	4456      	add	r6, sl
 8008f14:	2700      	movs	r7, #0
 8008f16:	4649      	mov	r1, r9
 8008f18:	2201      	movs	r2, #1
 8008f1a:	4658      	mov	r0, fp
 8008f1c:	f000 fba4 	bl	8009668 <__lshift>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4681      	mov	r9, r0
 8008f24:	f000 fc0c 	bl	8009740 <__mcmp>
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	dcb0      	bgt.n	8008e8e <_dtoa_r+0xa5e>
 8008f2c:	d102      	bne.n	8008f34 <_dtoa_r+0xb04>
 8008f2e:	f018 0f01 	tst.w	r8, #1
 8008f32:	d1ac      	bne.n	8008e8e <_dtoa_r+0xa5e>
 8008f34:	4633      	mov	r3, r6
 8008f36:	461e      	mov	r6, r3
 8008f38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f3c:	2a30      	cmp	r2, #48	@ 0x30
 8008f3e:	d0fa      	beq.n	8008f36 <_dtoa_r+0xb06>
 8008f40:	e5c2      	b.n	8008ac8 <_dtoa_r+0x698>
 8008f42:	459a      	cmp	sl, r3
 8008f44:	d1a4      	bne.n	8008e90 <_dtoa_r+0xa60>
 8008f46:	9b04      	ldr	r3, [sp, #16]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	2331      	movs	r3, #49	@ 0x31
 8008f4e:	f88a 3000 	strb.w	r3, [sl]
 8008f52:	e5b9      	b.n	8008ac8 <_dtoa_r+0x698>
 8008f54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008fb4 <_dtoa_r+0xb84>
 8008f5a:	b11b      	cbz	r3, 8008f64 <_dtoa_r+0xb34>
 8008f5c:	f10a 0308 	add.w	r3, sl, #8
 8008f60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f62:	6013      	str	r3, [r2, #0]
 8008f64:	4650      	mov	r0, sl
 8008f66:	b019      	add	sp, #100	@ 0x64
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	f77f ae37 	ble.w	8008be2 <_dtoa_r+0x7b2>
 8008f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f78:	2001      	movs	r0, #1
 8008f7a:	e655      	b.n	8008c28 <_dtoa_r+0x7f8>
 8008f7c:	9b00      	ldr	r3, [sp, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f77f aed6 	ble.w	8008d30 <_dtoa_r+0x900>
 8008f84:	4656      	mov	r6, sl
 8008f86:	4621      	mov	r1, r4
 8008f88:	4648      	mov	r0, r9
 8008f8a:	f7ff f9c9 	bl	8008320 <quorem>
 8008f8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f92:	f806 8b01 	strb.w	r8, [r6], #1
 8008f96:	9b00      	ldr	r3, [sp, #0]
 8008f98:	eba6 020a 	sub.w	r2, r6, sl
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	ddb3      	ble.n	8008f08 <_dtoa_r+0xad8>
 8008fa0:	4649      	mov	r1, r9
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	220a      	movs	r2, #10
 8008fa6:	4658      	mov	r0, fp
 8008fa8:	f000 f968 	bl	800927c <__multadd>
 8008fac:	4681      	mov	r9, r0
 8008fae:	e7ea      	b.n	8008f86 <_dtoa_r+0xb56>
 8008fb0:	0800bac5 	.word	0x0800bac5
 8008fb4:	0800ba49 	.word	0x0800ba49

08008fb8 <_free_r>:
 8008fb8:	b538      	push	{r3, r4, r5, lr}
 8008fba:	4605      	mov	r5, r0
 8008fbc:	2900      	cmp	r1, #0
 8008fbe:	d041      	beq.n	8009044 <_free_r+0x8c>
 8008fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc4:	1f0c      	subs	r4, r1, #4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	bfb8      	it	lt
 8008fca:	18e4      	addlt	r4, r4, r3
 8008fcc:	f000 f8e8 	bl	80091a0 <__malloc_lock>
 8008fd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009048 <_free_r+0x90>)
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	b933      	cbnz	r3, 8008fe4 <_free_r+0x2c>
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	6014      	str	r4, [r2, #0]
 8008fda:	4628      	mov	r0, r5
 8008fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fe0:	f000 b8e4 	b.w	80091ac <__malloc_unlock>
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d908      	bls.n	8008ffa <_free_r+0x42>
 8008fe8:	6820      	ldr	r0, [r4, #0]
 8008fea:	1821      	adds	r1, r4, r0
 8008fec:	428b      	cmp	r3, r1
 8008fee:	bf01      	itttt	eq
 8008ff0:	6819      	ldreq	r1, [r3, #0]
 8008ff2:	685b      	ldreq	r3, [r3, #4]
 8008ff4:	1809      	addeq	r1, r1, r0
 8008ff6:	6021      	streq	r1, [r4, #0]
 8008ff8:	e7ed      	b.n	8008fd6 <_free_r+0x1e>
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	b10b      	cbz	r3, 8009004 <_free_r+0x4c>
 8009000:	42a3      	cmp	r3, r4
 8009002:	d9fa      	bls.n	8008ffa <_free_r+0x42>
 8009004:	6811      	ldr	r1, [r2, #0]
 8009006:	1850      	adds	r0, r2, r1
 8009008:	42a0      	cmp	r0, r4
 800900a:	d10b      	bne.n	8009024 <_free_r+0x6c>
 800900c:	6820      	ldr	r0, [r4, #0]
 800900e:	4401      	add	r1, r0
 8009010:	1850      	adds	r0, r2, r1
 8009012:	4283      	cmp	r3, r0
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	d1e0      	bne.n	8008fda <_free_r+0x22>
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	6053      	str	r3, [r2, #4]
 800901e:	4408      	add	r0, r1
 8009020:	6010      	str	r0, [r2, #0]
 8009022:	e7da      	b.n	8008fda <_free_r+0x22>
 8009024:	d902      	bls.n	800902c <_free_r+0x74>
 8009026:	230c      	movs	r3, #12
 8009028:	602b      	str	r3, [r5, #0]
 800902a:	e7d6      	b.n	8008fda <_free_r+0x22>
 800902c:	6820      	ldr	r0, [r4, #0]
 800902e:	1821      	adds	r1, r4, r0
 8009030:	428b      	cmp	r3, r1
 8009032:	bf04      	itt	eq
 8009034:	6819      	ldreq	r1, [r3, #0]
 8009036:	685b      	ldreq	r3, [r3, #4]
 8009038:	6063      	str	r3, [r4, #4]
 800903a:	bf04      	itt	eq
 800903c:	1809      	addeq	r1, r1, r0
 800903e:	6021      	streq	r1, [r4, #0]
 8009040:	6054      	str	r4, [r2, #4]
 8009042:	e7ca      	b.n	8008fda <_free_r+0x22>
 8009044:	bd38      	pop	{r3, r4, r5, pc}
 8009046:	bf00      	nop
 8009048:	20000520 	.word	0x20000520

0800904c <malloc>:
 800904c:	4b02      	ldr	r3, [pc, #8]	@ (8009058 <malloc+0xc>)
 800904e:	4601      	mov	r1, r0
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	f000 b825 	b.w	80090a0 <_malloc_r>
 8009056:	bf00      	nop
 8009058:	2000001c 	.word	0x2000001c

0800905c <sbrk_aligned>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4e0f      	ldr	r6, [pc, #60]	@ (800909c <sbrk_aligned+0x40>)
 8009060:	460c      	mov	r4, r1
 8009062:	6831      	ldr	r1, [r6, #0]
 8009064:	4605      	mov	r5, r0
 8009066:	b911      	cbnz	r1, 800906e <sbrk_aligned+0x12>
 8009068:	f001 fe0c 	bl	800ac84 <_sbrk_r>
 800906c:	6030      	str	r0, [r6, #0]
 800906e:	4621      	mov	r1, r4
 8009070:	4628      	mov	r0, r5
 8009072:	f001 fe07 	bl	800ac84 <_sbrk_r>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d103      	bne.n	8009082 <sbrk_aligned+0x26>
 800907a:	f04f 34ff 	mov.w	r4, #4294967295
 800907e:	4620      	mov	r0, r4
 8009080:	bd70      	pop	{r4, r5, r6, pc}
 8009082:	1cc4      	adds	r4, r0, #3
 8009084:	f024 0403 	bic.w	r4, r4, #3
 8009088:	42a0      	cmp	r0, r4
 800908a:	d0f8      	beq.n	800907e <sbrk_aligned+0x22>
 800908c:	1a21      	subs	r1, r4, r0
 800908e:	4628      	mov	r0, r5
 8009090:	f001 fdf8 	bl	800ac84 <_sbrk_r>
 8009094:	3001      	adds	r0, #1
 8009096:	d1f2      	bne.n	800907e <sbrk_aligned+0x22>
 8009098:	e7ef      	b.n	800907a <sbrk_aligned+0x1e>
 800909a:	bf00      	nop
 800909c:	2000051c 	.word	0x2000051c

080090a0 <_malloc_r>:
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	1ccd      	adds	r5, r1, #3
 80090a6:	f025 0503 	bic.w	r5, r5, #3
 80090aa:	3508      	adds	r5, #8
 80090ac:	2d0c      	cmp	r5, #12
 80090ae:	bf38      	it	cc
 80090b0:	250c      	movcc	r5, #12
 80090b2:	2d00      	cmp	r5, #0
 80090b4:	4606      	mov	r6, r0
 80090b6:	db01      	blt.n	80090bc <_malloc_r+0x1c>
 80090b8:	42a9      	cmp	r1, r5
 80090ba:	d904      	bls.n	80090c6 <_malloc_r+0x26>
 80090bc:	230c      	movs	r3, #12
 80090be:	6033      	str	r3, [r6, #0]
 80090c0:	2000      	movs	r0, #0
 80090c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800919c <_malloc_r+0xfc>
 80090ca:	f000 f869 	bl	80091a0 <__malloc_lock>
 80090ce:	f8d8 3000 	ldr.w	r3, [r8]
 80090d2:	461c      	mov	r4, r3
 80090d4:	bb44      	cbnz	r4, 8009128 <_malloc_r+0x88>
 80090d6:	4629      	mov	r1, r5
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff ffbf 	bl	800905c <sbrk_aligned>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	4604      	mov	r4, r0
 80090e2:	d158      	bne.n	8009196 <_malloc_r+0xf6>
 80090e4:	f8d8 4000 	ldr.w	r4, [r8]
 80090e8:	4627      	mov	r7, r4
 80090ea:	2f00      	cmp	r7, #0
 80090ec:	d143      	bne.n	8009176 <_malloc_r+0xd6>
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	d04b      	beq.n	800918a <_malloc_r+0xea>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	4639      	mov	r1, r7
 80090f6:	4630      	mov	r0, r6
 80090f8:	eb04 0903 	add.w	r9, r4, r3
 80090fc:	f001 fdc2 	bl	800ac84 <_sbrk_r>
 8009100:	4581      	cmp	r9, r0
 8009102:	d142      	bne.n	800918a <_malloc_r+0xea>
 8009104:	6821      	ldr	r1, [r4, #0]
 8009106:	1a6d      	subs	r5, r5, r1
 8009108:	4629      	mov	r1, r5
 800910a:	4630      	mov	r0, r6
 800910c:	f7ff ffa6 	bl	800905c <sbrk_aligned>
 8009110:	3001      	adds	r0, #1
 8009112:	d03a      	beq.n	800918a <_malloc_r+0xea>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	442b      	add	r3, r5
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	f8d8 3000 	ldr.w	r3, [r8]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	bb62      	cbnz	r2, 800917c <_malloc_r+0xdc>
 8009122:	f8c8 7000 	str.w	r7, [r8]
 8009126:	e00f      	b.n	8009148 <_malloc_r+0xa8>
 8009128:	6822      	ldr	r2, [r4, #0]
 800912a:	1b52      	subs	r2, r2, r5
 800912c:	d420      	bmi.n	8009170 <_malloc_r+0xd0>
 800912e:	2a0b      	cmp	r2, #11
 8009130:	d917      	bls.n	8009162 <_malloc_r+0xc2>
 8009132:	1961      	adds	r1, r4, r5
 8009134:	42a3      	cmp	r3, r4
 8009136:	6025      	str	r5, [r4, #0]
 8009138:	bf18      	it	ne
 800913a:	6059      	strne	r1, [r3, #4]
 800913c:	6863      	ldr	r3, [r4, #4]
 800913e:	bf08      	it	eq
 8009140:	f8c8 1000 	streq.w	r1, [r8]
 8009144:	5162      	str	r2, [r4, r5]
 8009146:	604b      	str	r3, [r1, #4]
 8009148:	4630      	mov	r0, r6
 800914a:	f000 f82f 	bl	80091ac <__malloc_unlock>
 800914e:	f104 000b 	add.w	r0, r4, #11
 8009152:	1d23      	adds	r3, r4, #4
 8009154:	f020 0007 	bic.w	r0, r0, #7
 8009158:	1ac2      	subs	r2, r0, r3
 800915a:	bf1c      	itt	ne
 800915c:	1a1b      	subne	r3, r3, r0
 800915e:	50a3      	strne	r3, [r4, r2]
 8009160:	e7af      	b.n	80090c2 <_malloc_r+0x22>
 8009162:	6862      	ldr	r2, [r4, #4]
 8009164:	42a3      	cmp	r3, r4
 8009166:	bf0c      	ite	eq
 8009168:	f8c8 2000 	streq.w	r2, [r8]
 800916c:	605a      	strne	r2, [r3, #4]
 800916e:	e7eb      	b.n	8009148 <_malloc_r+0xa8>
 8009170:	4623      	mov	r3, r4
 8009172:	6864      	ldr	r4, [r4, #4]
 8009174:	e7ae      	b.n	80090d4 <_malloc_r+0x34>
 8009176:	463c      	mov	r4, r7
 8009178:	687f      	ldr	r7, [r7, #4]
 800917a:	e7b6      	b.n	80090ea <_malloc_r+0x4a>
 800917c:	461a      	mov	r2, r3
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	42a3      	cmp	r3, r4
 8009182:	d1fb      	bne.n	800917c <_malloc_r+0xdc>
 8009184:	2300      	movs	r3, #0
 8009186:	6053      	str	r3, [r2, #4]
 8009188:	e7de      	b.n	8009148 <_malloc_r+0xa8>
 800918a:	230c      	movs	r3, #12
 800918c:	6033      	str	r3, [r6, #0]
 800918e:	4630      	mov	r0, r6
 8009190:	f000 f80c 	bl	80091ac <__malloc_unlock>
 8009194:	e794      	b.n	80090c0 <_malloc_r+0x20>
 8009196:	6005      	str	r5, [r0, #0]
 8009198:	e7d6      	b.n	8009148 <_malloc_r+0xa8>
 800919a:	bf00      	nop
 800919c:	20000520 	.word	0x20000520

080091a0 <__malloc_lock>:
 80091a0:	4801      	ldr	r0, [pc, #4]	@ (80091a8 <__malloc_lock+0x8>)
 80091a2:	f7ff b8b4 	b.w	800830e <__retarget_lock_acquire_recursive>
 80091a6:	bf00      	nop
 80091a8:	20000518 	.word	0x20000518

080091ac <__malloc_unlock>:
 80091ac:	4801      	ldr	r0, [pc, #4]	@ (80091b4 <__malloc_unlock+0x8>)
 80091ae:	f7ff b8af 	b.w	8008310 <__retarget_lock_release_recursive>
 80091b2:	bf00      	nop
 80091b4:	20000518 	.word	0x20000518

080091b8 <_Balloc>:
 80091b8:	b570      	push	{r4, r5, r6, lr}
 80091ba:	69c6      	ldr	r6, [r0, #28]
 80091bc:	4604      	mov	r4, r0
 80091be:	460d      	mov	r5, r1
 80091c0:	b976      	cbnz	r6, 80091e0 <_Balloc+0x28>
 80091c2:	2010      	movs	r0, #16
 80091c4:	f7ff ff42 	bl	800904c <malloc>
 80091c8:	4602      	mov	r2, r0
 80091ca:	61e0      	str	r0, [r4, #28]
 80091cc:	b920      	cbnz	r0, 80091d8 <_Balloc+0x20>
 80091ce:	4b18      	ldr	r3, [pc, #96]	@ (8009230 <_Balloc+0x78>)
 80091d0:	4818      	ldr	r0, [pc, #96]	@ (8009234 <_Balloc+0x7c>)
 80091d2:	216b      	movs	r1, #107	@ 0x6b
 80091d4:	f001 fd7c 	bl	800acd0 <__assert_func>
 80091d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091dc:	6006      	str	r6, [r0, #0]
 80091de:	60c6      	str	r6, [r0, #12]
 80091e0:	69e6      	ldr	r6, [r4, #28]
 80091e2:	68f3      	ldr	r3, [r6, #12]
 80091e4:	b183      	cbz	r3, 8009208 <_Balloc+0x50>
 80091e6:	69e3      	ldr	r3, [r4, #28]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80091ee:	b9b8      	cbnz	r0, 8009220 <_Balloc+0x68>
 80091f0:	2101      	movs	r1, #1
 80091f2:	fa01 f605 	lsl.w	r6, r1, r5
 80091f6:	1d72      	adds	r2, r6, #5
 80091f8:	0092      	lsls	r2, r2, #2
 80091fa:	4620      	mov	r0, r4
 80091fc:	f001 fd86 	bl	800ad0c <_calloc_r>
 8009200:	b160      	cbz	r0, 800921c <_Balloc+0x64>
 8009202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009206:	e00e      	b.n	8009226 <_Balloc+0x6e>
 8009208:	2221      	movs	r2, #33	@ 0x21
 800920a:	2104      	movs	r1, #4
 800920c:	4620      	mov	r0, r4
 800920e:	f001 fd7d 	bl	800ad0c <_calloc_r>
 8009212:	69e3      	ldr	r3, [r4, #28]
 8009214:	60f0      	str	r0, [r6, #12]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1e4      	bne.n	80091e6 <_Balloc+0x2e>
 800921c:	2000      	movs	r0, #0
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	6802      	ldr	r2, [r0, #0]
 8009222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009226:	2300      	movs	r3, #0
 8009228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800922c:	e7f7      	b.n	800921e <_Balloc+0x66>
 800922e:	bf00      	nop
 8009230:	0800ba56 	.word	0x0800ba56
 8009234:	0800bad6 	.word	0x0800bad6

08009238 <_Bfree>:
 8009238:	b570      	push	{r4, r5, r6, lr}
 800923a:	69c6      	ldr	r6, [r0, #28]
 800923c:	4605      	mov	r5, r0
 800923e:	460c      	mov	r4, r1
 8009240:	b976      	cbnz	r6, 8009260 <_Bfree+0x28>
 8009242:	2010      	movs	r0, #16
 8009244:	f7ff ff02 	bl	800904c <malloc>
 8009248:	4602      	mov	r2, r0
 800924a:	61e8      	str	r0, [r5, #28]
 800924c:	b920      	cbnz	r0, 8009258 <_Bfree+0x20>
 800924e:	4b09      	ldr	r3, [pc, #36]	@ (8009274 <_Bfree+0x3c>)
 8009250:	4809      	ldr	r0, [pc, #36]	@ (8009278 <_Bfree+0x40>)
 8009252:	218f      	movs	r1, #143	@ 0x8f
 8009254:	f001 fd3c 	bl	800acd0 <__assert_func>
 8009258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800925c:	6006      	str	r6, [r0, #0]
 800925e:	60c6      	str	r6, [r0, #12]
 8009260:	b13c      	cbz	r4, 8009272 <_Bfree+0x3a>
 8009262:	69eb      	ldr	r3, [r5, #28]
 8009264:	6862      	ldr	r2, [r4, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800926c:	6021      	str	r1, [r4, #0]
 800926e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009272:	bd70      	pop	{r4, r5, r6, pc}
 8009274:	0800ba56 	.word	0x0800ba56
 8009278:	0800bad6 	.word	0x0800bad6

0800927c <__multadd>:
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	690d      	ldr	r5, [r1, #16]
 8009282:	4607      	mov	r7, r0
 8009284:	460c      	mov	r4, r1
 8009286:	461e      	mov	r6, r3
 8009288:	f101 0c14 	add.w	ip, r1, #20
 800928c:	2000      	movs	r0, #0
 800928e:	f8dc 3000 	ldr.w	r3, [ip]
 8009292:	b299      	uxth	r1, r3
 8009294:	fb02 6101 	mla	r1, r2, r1, r6
 8009298:	0c1e      	lsrs	r6, r3, #16
 800929a:	0c0b      	lsrs	r3, r1, #16
 800929c:	fb02 3306 	mla	r3, r2, r6, r3
 80092a0:	b289      	uxth	r1, r1
 80092a2:	3001      	adds	r0, #1
 80092a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092a8:	4285      	cmp	r5, r0
 80092aa:	f84c 1b04 	str.w	r1, [ip], #4
 80092ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092b2:	dcec      	bgt.n	800928e <__multadd+0x12>
 80092b4:	b30e      	cbz	r6, 80092fa <__multadd+0x7e>
 80092b6:	68a3      	ldr	r3, [r4, #8]
 80092b8:	42ab      	cmp	r3, r5
 80092ba:	dc19      	bgt.n	80092f0 <__multadd+0x74>
 80092bc:	6861      	ldr	r1, [r4, #4]
 80092be:	4638      	mov	r0, r7
 80092c0:	3101      	adds	r1, #1
 80092c2:	f7ff ff79 	bl	80091b8 <_Balloc>
 80092c6:	4680      	mov	r8, r0
 80092c8:	b928      	cbnz	r0, 80092d6 <__multadd+0x5a>
 80092ca:	4602      	mov	r2, r0
 80092cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009300 <__multadd+0x84>)
 80092ce:	480d      	ldr	r0, [pc, #52]	@ (8009304 <__multadd+0x88>)
 80092d0:	21ba      	movs	r1, #186	@ 0xba
 80092d2:	f001 fcfd 	bl	800acd0 <__assert_func>
 80092d6:	6922      	ldr	r2, [r4, #16]
 80092d8:	3202      	adds	r2, #2
 80092da:	f104 010c 	add.w	r1, r4, #12
 80092de:	0092      	lsls	r2, r2, #2
 80092e0:	300c      	adds	r0, #12
 80092e2:	f001 fcdf 	bl	800aca4 <memcpy>
 80092e6:	4621      	mov	r1, r4
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff ffa5 	bl	8009238 <_Bfree>
 80092ee:	4644      	mov	r4, r8
 80092f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092f4:	3501      	adds	r5, #1
 80092f6:	615e      	str	r6, [r3, #20]
 80092f8:	6125      	str	r5, [r4, #16]
 80092fa:	4620      	mov	r0, r4
 80092fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009300:	0800bac5 	.word	0x0800bac5
 8009304:	0800bad6 	.word	0x0800bad6

08009308 <__s2b>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	460c      	mov	r4, r1
 800930e:	4615      	mov	r5, r2
 8009310:	461f      	mov	r7, r3
 8009312:	2209      	movs	r2, #9
 8009314:	3308      	adds	r3, #8
 8009316:	4606      	mov	r6, r0
 8009318:	fb93 f3f2 	sdiv	r3, r3, r2
 800931c:	2100      	movs	r1, #0
 800931e:	2201      	movs	r2, #1
 8009320:	429a      	cmp	r2, r3
 8009322:	db09      	blt.n	8009338 <__s2b+0x30>
 8009324:	4630      	mov	r0, r6
 8009326:	f7ff ff47 	bl	80091b8 <_Balloc>
 800932a:	b940      	cbnz	r0, 800933e <__s2b+0x36>
 800932c:	4602      	mov	r2, r0
 800932e:	4b19      	ldr	r3, [pc, #100]	@ (8009394 <__s2b+0x8c>)
 8009330:	4819      	ldr	r0, [pc, #100]	@ (8009398 <__s2b+0x90>)
 8009332:	21d3      	movs	r1, #211	@ 0xd3
 8009334:	f001 fccc 	bl	800acd0 <__assert_func>
 8009338:	0052      	lsls	r2, r2, #1
 800933a:	3101      	adds	r1, #1
 800933c:	e7f0      	b.n	8009320 <__s2b+0x18>
 800933e:	9b08      	ldr	r3, [sp, #32]
 8009340:	6143      	str	r3, [r0, #20]
 8009342:	2d09      	cmp	r5, #9
 8009344:	f04f 0301 	mov.w	r3, #1
 8009348:	6103      	str	r3, [r0, #16]
 800934a:	dd16      	ble.n	800937a <__s2b+0x72>
 800934c:	f104 0909 	add.w	r9, r4, #9
 8009350:	46c8      	mov	r8, r9
 8009352:	442c      	add	r4, r5
 8009354:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009358:	4601      	mov	r1, r0
 800935a:	3b30      	subs	r3, #48	@ 0x30
 800935c:	220a      	movs	r2, #10
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ff8c 	bl	800927c <__multadd>
 8009364:	45a0      	cmp	r8, r4
 8009366:	d1f5      	bne.n	8009354 <__s2b+0x4c>
 8009368:	f1a5 0408 	sub.w	r4, r5, #8
 800936c:	444c      	add	r4, r9
 800936e:	1b2d      	subs	r5, r5, r4
 8009370:	1963      	adds	r3, r4, r5
 8009372:	42bb      	cmp	r3, r7
 8009374:	db04      	blt.n	8009380 <__s2b+0x78>
 8009376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937a:	340a      	adds	r4, #10
 800937c:	2509      	movs	r5, #9
 800937e:	e7f6      	b.n	800936e <__s2b+0x66>
 8009380:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009384:	4601      	mov	r1, r0
 8009386:	3b30      	subs	r3, #48	@ 0x30
 8009388:	220a      	movs	r2, #10
 800938a:	4630      	mov	r0, r6
 800938c:	f7ff ff76 	bl	800927c <__multadd>
 8009390:	e7ee      	b.n	8009370 <__s2b+0x68>
 8009392:	bf00      	nop
 8009394:	0800bac5 	.word	0x0800bac5
 8009398:	0800bad6 	.word	0x0800bad6

0800939c <__hi0bits>:
 800939c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093a0:	4603      	mov	r3, r0
 80093a2:	bf36      	itet	cc
 80093a4:	0403      	lslcc	r3, r0, #16
 80093a6:	2000      	movcs	r0, #0
 80093a8:	2010      	movcc	r0, #16
 80093aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ae:	bf3c      	itt	cc
 80093b0:	021b      	lslcc	r3, r3, #8
 80093b2:	3008      	addcc	r0, #8
 80093b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093b8:	bf3c      	itt	cc
 80093ba:	011b      	lslcc	r3, r3, #4
 80093bc:	3004      	addcc	r0, #4
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c2:	bf3c      	itt	cc
 80093c4:	009b      	lslcc	r3, r3, #2
 80093c6:	3002      	addcc	r0, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	db05      	blt.n	80093d8 <__hi0bits+0x3c>
 80093cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093d0:	f100 0001 	add.w	r0, r0, #1
 80093d4:	bf08      	it	eq
 80093d6:	2020      	moveq	r0, #32
 80093d8:	4770      	bx	lr

080093da <__lo0bits>:
 80093da:	6803      	ldr	r3, [r0, #0]
 80093dc:	4602      	mov	r2, r0
 80093de:	f013 0007 	ands.w	r0, r3, #7
 80093e2:	d00b      	beq.n	80093fc <__lo0bits+0x22>
 80093e4:	07d9      	lsls	r1, r3, #31
 80093e6:	d421      	bmi.n	800942c <__lo0bits+0x52>
 80093e8:	0798      	lsls	r0, r3, #30
 80093ea:	bf49      	itett	mi
 80093ec:	085b      	lsrmi	r3, r3, #1
 80093ee:	089b      	lsrpl	r3, r3, #2
 80093f0:	2001      	movmi	r0, #1
 80093f2:	6013      	strmi	r3, [r2, #0]
 80093f4:	bf5c      	itt	pl
 80093f6:	6013      	strpl	r3, [r2, #0]
 80093f8:	2002      	movpl	r0, #2
 80093fa:	4770      	bx	lr
 80093fc:	b299      	uxth	r1, r3
 80093fe:	b909      	cbnz	r1, 8009404 <__lo0bits+0x2a>
 8009400:	0c1b      	lsrs	r3, r3, #16
 8009402:	2010      	movs	r0, #16
 8009404:	b2d9      	uxtb	r1, r3
 8009406:	b909      	cbnz	r1, 800940c <__lo0bits+0x32>
 8009408:	3008      	adds	r0, #8
 800940a:	0a1b      	lsrs	r3, r3, #8
 800940c:	0719      	lsls	r1, r3, #28
 800940e:	bf04      	itt	eq
 8009410:	091b      	lsreq	r3, r3, #4
 8009412:	3004      	addeq	r0, #4
 8009414:	0799      	lsls	r1, r3, #30
 8009416:	bf04      	itt	eq
 8009418:	089b      	lsreq	r3, r3, #2
 800941a:	3002      	addeq	r0, #2
 800941c:	07d9      	lsls	r1, r3, #31
 800941e:	d403      	bmi.n	8009428 <__lo0bits+0x4e>
 8009420:	085b      	lsrs	r3, r3, #1
 8009422:	f100 0001 	add.w	r0, r0, #1
 8009426:	d003      	beq.n	8009430 <__lo0bits+0x56>
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	4770      	bx	lr
 800942c:	2000      	movs	r0, #0
 800942e:	4770      	bx	lr
 8009430:	2020      	movs	r0, #32
 8009432:	4770      	bx	lr

08009434 <__i2b>:
 8009434:	b510      	push	{r4, lr}
 8009436:	460c      	mov	r4, r1
 8009438:	2101      	movs	r1, #1
 800943a:	f7ff febd 	bl	80091b8 <_Balloc>
 800943e:	4602      	mov	r2, r0
 8009440:	b928      	cbnz	r0, 800944e <__i2b+0x1a>
 8009442:	4b05      	ldr	r3, [pc, #20]	@ (8009458 <__i2b+0x24>)
 8009444:	4805      	ldr	r0, [pc, #20]	@ (800945c <__i2b+0x28>)
 8009446:	f240 1145 	movw	r1, #325	@ 0x145
 800944a:	f001 fc41 	bl	800acd0 <__assert_func>
 800944e:	2301      	movs	r3, #1
 8009450:	6144      	str	r4, [r0, #20]
 8009452:	6103      	str	r3, [r0, #16]
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop
 8009458:	0800bac5 	.word	0x0800bac5
 800945c:	0800bad6 	.word	0x0800bad6

08009460 <__multiply>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	4614      	mov	r4, r2
 8009466:	690a      	ldr	r2, [r1, #16]
 8009468:	6923      	ldr	r3, [r4, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	bfa8      	it	ge
 800946e:	4623      	movge	r3, r4
 8009470:	460f      	mov	r7, r1
 8009472:	bfa4      	itt	ge
 8009474:	460c      	movge	r4, r1
 8009476:	461f      	movge	r7, r3
 8009478:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800947c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009480:	68a3      	ldr	r3, [r4, #8]
 8009482:	6861      	ldr	r1, [r4, #4]
 8009484:	eb0a 0609 	add.w	r6, sl, r9
 8009488:	42b3      	cmp	r3, r6
 800948a:	b085      	sub	sp, #20
 800948c:	bfb8      	it	lt
 800948e:	3101      	addlt	r1, #1
 8009490:	f7ff fe92 	bl	80091b8 <_Balloc>
 8009494:	b930      	cbnz	r0, 80094a4 <__multiply+0x44>
 8009496:	4602      	mov	r2, r0
 8009498:	4b44      	ldr	r3, [pc, #272]	@ (80095ac <__multiply+0x14c>)
 800949a:	4845      	ldr	r0, [pc, #276]	@ (80095b0 <__multiply+0x150>)
 800949c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80094a0:	f001 fc16 	bl	800acd0 <__assert_func>
 80094a4:	f100 0514 	add.w	r5, r0, #20
 80094a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80094ac:	462b      	mov	r3, r5
 80094ae:	2200      	movs	r2, #0
 80094b0:	4543      	cmp	r3, r8
 80094b2:	d321      	bcc.n	80094f8 <__multiply+0x98>
 80094b4:	f107 0114 	add.w	r1, r7, #20
 80094b8:	f104 0214 	add.w	r2, r4, #20
 80094bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80094c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80094c4:	9302      	str	r3, [sp, #8]
 80094c6:	1b13      	subs	r3, r2, r4
 80094c8:	3b15      	subs	r3, #21
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	3304      	adds	r3, #4
 80094d0:	f104 0715 	add.w	r7, r4, #21
 80094d4:	42ba      	cmp	r2, r7
 80094d6:	bf38      	it	cc
 80094d8:	2304      	movcc	r3, #4
 80094da:	9301      	str	r3, [sp, #4]
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	9103      	str	r1, [sp, #12]
 80094e0:	428b      	cmp	r3, r1
 80094e2:	d80c      	bhi.n	80094fe <__multiply+0x9e>
 80094e4:	2e00      	cmp	r6, #0
 80094e6:	dd03      	ble.n	80094f0 <__multiply+0x90>
 80094e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d05b      	beq.n	80095a8 <__multiply+0x148>
 80094f0:	6106      	str	r6, [r0, #16]
 80094f2:	b005      	add	sp, #20
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	f843 2b04 	str.w	r2, [r3], #4
 80094fc:	e7d8      	b.n	80094b0 <__multiply+0x50>
 80094fe:	f8b1 a000 	ldrh.w	sl, [r1]
 8009502:	f1ba 0f00 	cmp.w	sl, #0
 8009506:	d024      	beq.n	8009552 <__multiply+0xf2>
 8009508:	f104 0e14 	add.w	lr, r4, #20
 800950c:	46a9      	mov	r9, r5
 800950e:	f04f 0c00 	mov.w	ip, #0
 8009512:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009516:	f8d9 3000 	ldr.w	r3, [r9]
 800951a:	fa1f fb87 	uxth.w	fp, r7
 800951e:	b29b      	uxth	r3, r3
 8009520:	fb0a 330b 	mla	r3, sl, fp, r3
 8009524:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009528:	f8d9 7000 	ldr.w	r7, [r9]
 800952c:	4463      	add	r3, ip
 800952e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009532:	fb0a c70b 	mla	r7, sl, fp, ip
 8009536:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800953a:	b29b      	uxth	r3, r3
 800953c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009540:	4572      	cmp	r2, lr
 8009542:	f849 3b04 	str.w	r3, [r9], #4
 8009546:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800954a:	d8e2      	bhi.n	8009512 <__multiply+0xb2>
 800954c:	9b01      	ldr	r3, [sp, #4]
 800954e:	f845 c003 	str.w	ip, [r5, r3]
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009558:	3104      	adds	r1, #4
 800955a:	f1b9 0f00 	cmp.w	r9, #0
 800955e:	d021      	beq.n	80095a4 <__multiply+0x144>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	f104 0c14 	add.w	ip, r4, #20
 8009566:	46ae      	mov	lr, r5
 8009568:	f04f 0a00 	mov.w	sl, #0
 800956c:	f8bc b000 	ldrh.w	fp, [ip]
 8009570:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009574:	fb09 770b 	mla	r7, r9, fp, r7
 8009578:	4457      	add	r7, sl
 800957a:	b29b      	uxth	r3, r3
 800957c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009580:	f84e 3b04 	str.w	r3, [lr], #4
 8009584:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009588:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800958c:	f8be 3000 	ldrh.w	r3, [lr]
 8009590:	fb09 330a 	mla	r3, r9, sl, r3
 8009594:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009598:	4562      	cmp	r2, ip
 800959a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800959e:	d8e5      	bhi.n	800956c <__multiply+0x10c>
 80095a0:	9f01      	ldr	r7, [sp, #4]
 80095a2:	51eb      	str	r3, [r5, r7]
 80095a4:	3504      	adds	r5, #4
 80095a6:	e799      	b.n	80094dc <__multiply+0x7c>
 80095a8:	3e01      	subs	r6, #1
 80095aa:	e79b      	b.n	80094e4 <__multiply+0x84>
 80095ac:	0800bac5 	.word	0x0800bac5
 80095b0:	0800bad6 	.word	0x0800bad6

080095b4 <__pow5mult>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4615      	mov	r5, r2
 80095ba:	f012 0203 	ands.w	r2, r2, #3
 80095be:	4607      	mov	r7, r0
 80095c0:	460e      	mov	r6, r1
 80095c2:	d007      	beq.n	80095d4 <__pow5mult+0x20>
 80095c4:	4c25      	ldr	r4, [pc, #148]	@ (800965c <__pow5mult+0xa8>)
 80095c6:	3a01      	subs	r2, #1
 80095c8:	2300      	movs	r3, #0
 80095ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095ce:	f7ff fe55 	bl	800927c <__multadd>
 80095d2:	4606      	mov	r6, r0
 80095d4:	10ad      	asrs	r5, r5, #2
 80095d6:	d03d      	beq.n	8009654 <__pow5mult+0xa0>
 80095d8:	69fc      	ldr	r4, [r7, #28]
 80095da:	b97c      	cbnz	r4, 80095fc <__pow5mult+0x48>
 80095dc:	2010      	movs	r0, #16
 80095de:	f7ff fd35 	bl	800904c <malloc>
 80095e2:	4602      	mov	r2, r0
 80095e4:	61f8      	str	r0, [r7, #28]
 80095e6:	b928      	cbnz	r0, 80095f4 <__pow5mult+0x40>
 80095e8:	4b1d      	ldr	r3, [pc, #116]	@ (8009660 <__pow5mult+0xac>)
 80095ea:	481e      	ldr	r0, [pc, #120]	@ (8009664 <__pow5mult+0xb0>)
 80095ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095f0:	f001 fb6e 	bl	800acd0 <__assert_func>
 80095f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095f8:	6004      	str	r4, [r0, #0]
 80095fa:	60c4      	str	r4, [r0, #12]
 80095fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009604:	b94c      	cbnz	r4, 800961a <__pow5mult+0x66>
 8009606:	f240 2171 	movw	r1, #625	@ 0x271
 800960a:	4638      	mov	r0, r7
 800960c:	f7ff ff12 	bl	8009434 <__i2b>
 8009610:	2300      	movs	r3, #0
 8009612:	f8c8 0008 	str.w	r0, [r8, #8]
 8009616:	4604      	mov	r4, r0
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	f04f 0900 	mov.w	r9, #0
 800961e:	07eb      	lsls	r3, r5, #31
 8009620:	d50a      	bpl.n	8009638 <__pow5mult+0x84>
 8009622:	4631      	mov	r1, r6
 8009624:	4622      	mov	r2, r4
 8009626:	4638      	mov	r0, r7
 8009628:	f7ff ff1a 	bl	8009460 <__multiply>
 800962c:	4631      	mov	r1, r6
 800962e:	4680      	mov	r8, r0
 8009630:	4638      	mov	r0, r7
 8009632:	f7ff fe01 	bl	8009238 <_Bfree>
 8009636:	4646      	mov	r6, r8
 8009638:	106d      	asrs	r5, r5, #1
 800963a:	d00b      	beq.n	8009654 <__pow5mult+0xa0>
 800963c:	6820      	ldr	r0, [r4, #0]
 800963e:	b938      	cbnz	r0, 8009650 <__pow5mult+0x9c>
 8009640:	4622      	mov	r2, r4
 8009642:	4621      	mov	r1, r4
 8009644:	4638      	mov	r0, r7
 8009646:	f7ff ff0b 	bl	8009460 <__multiply>
 800964a:	6020      	str	r0, [r4, #0]
 800964c:	f8c0 9000 	str.w	r9, [r0]
 8009650:	4604      	mov	r4, r0
 8009652:	e7e4      	b.n	800961e <__pow5mult+0x6a>
 8009654:	4630      	mov	r0, r6
 8009656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800965a:	bf00      	nop
 800965c:	0800bb30 	.word	0x0800bb30
 8009660:	0800ba56 	.word	0x0800ba56
 8009664:	0800bad6 	.word	0x0800bad6

08009668 <__lshift>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	460c      	mov	r4, r1
 800966e:	6849      	ldr	r1, [r1, #4]
 8009670:	6923      	ldr	r3, [r4, #16]
 8009672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009676:	68a3      	ldr	r3, [r4, #8]
 8009678:	4607      	mov	r7, r0
 800967a:	4691      	mov	r9, r2
 800967c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009680:	f108 0601 	add.w	r6, r8, #1
 8009684:	42b3      	cmp	r3, r6
 8009686:	db0b      	blt.n	80096a0 <__lshift+0x38>
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff fd95 	bl	80091b8 <_Balloc>
 800968e:	4605      	mov	r5, r0
 8009690:	b948      	cbnz	r0, 80096a6 <__lshift+0x3e>
 8009692:	4602      	mov	r2, r0
 8009694:	4b28      	ldr	r3, [pc, #160]	@ (8009738 <__lshift+0xd0>)
 8009696:	4829      	ldr	r0, [pc, #164]	@ (800973c <__lshift+0xd4>)
 8009698:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800969c:	f001 fb18 	bl	800acd0 <__assert_func>
 80096a0:	3101      	adds	r1, #1
 80096a2:	005b      	lsls	r3, r3, #1
 80096a4:	e7ee      	b.n	8009684 <__lshift+0x1c>
 80096a6:	2300      	movs	r3, #0
 80096a8:	f100 0114 	add.w	r1, r0, #20
 80096ac:	f100 0210 	add.w	r2, r0, #16
 80096b0:	4618      	mov	r0, r3
 80096b2:	4553      	cmp	r3, sl
 80096b4:	db33      	blt.n	800971e <__lshift+0xb6>
 80096b6:	6920      	ldr	r0, [r4, #16]
 80096b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096bc:	f104 0314 	add.w	r3, r4, #20
 80096c0:	f019 091f 	ands.w	r9, r9, #31
 80096c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096cc:	d02b      	beq.n	8009726 <__lshift+0xbe>
 80096ce:	f1c9 0e20 	rsb	lr, r9, #32
 80096d2:	468a      	mov	sl, r1
 80096d4:	2200      	movs	r2, #0
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	fa00 f009 	lsl.w	r0, r0, r9
 80096dc:	4310      	orrs	r0, r2
 80096de:	f84a 0b04 	str.w	r0, [sl], #4
 80096e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096e6:	459c      	cmp	ip, r3
 80096e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80096ec:	d8f3      	bhi.n	80096d6 <__lshift+0x6e>
 80096ee:	ebac 0304 	sub.w	r3, ip, r4
 80096f2:	3b15      	subs	r3, #21
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	3304      	adds	r3, #4
 80096fa:	f104 0015 	add.w	r0, r4, #21
 80096fe:	4584      	cmp	ip, r0
 8009700:	bf38      	it	cc
 8009702:	2304      	movcc	r3, #4
 8009704:	50ca      	str	r2, [r1, r3]
 8009706:	b10a      	cbz	r2, 800970c <__lshift+0xa4>
 8009708:	f108 0602 	add.w	r6, r8, #2
 800970c:	3e01      	subs	r6, #1
 800970e:	4638      	mov	r0, r7
 8009710:	612e      	str	r6, [r5, #16]
 8009712:	4621      	mov	r1, r4
 8009714:	f7ff fd90 	bl	8009238 <_Bfree>
 8009718:	4628      	mov	r0, r5
 800971a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009722:	3301      	adds	r3, #1
 8009724:	e7c5      	b.n	80096b2 <__lshift+0x4a>
 8009726:	3904      	subs	r1, #4
 8009728:	f853 2b04 	ldr.w	r2, [r3], #4
 800972c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009730:	459c      	cmp	ip, r3
 8009732:	d8f9      	bhi.n	8009728 <__lshift+0xc0>
 8009734:	e7ea      	b.n	800970c <__lshift+0xa4>
 8009736:	bf00      	nop
 8009738:	0800bac5 	.word	0x0800bac5
 800973c:	0800bad6 	.word	0x0800bad6

08009740 <__mcmp>:
 8009740:	690a      	ldr	r2, [r1, #16]
 8009742:	4603      	mov	r3, r0
 8009744:	6900      	ldr	r0, [r0, #16]
 8009746:	1a80      	subs	r0, r0, r2
 8009748:	b530      	push	{r4, r5, lr}
 800974a:	d10e      	bne.n	800976a <__mcmp+0x2a>
 800974c:	3314      	adds	r3, #20
 800974e:	3114      	adds	r1, #20
 8009750:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009754:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800975c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009760:	4295      	cmp	r5, r2
 8009762:	d003      	beq.n	800976c <__mcmp+0x2c>
 8009764:	d205      	bcs.n	8009772 <__mcmp+0x32>
 8009766:	f04f 30ff 	mov.w	r0, #4294967295
 800976a:	bd30      	pop	{r4, r5, pc}
 800976c:	42a3      	cmp	r3, r4
 800976e:	d3f3      	bcc.n	8009758 <__mcmp+0x18>
 8009770:	e7fb      	b.n	800976a <__mcmp+0x2a>
 8009772:	2001      	movs	r0, #1
 8009774:	e7f9      	b.n	800976a <__mcmp+0x2a>
	...

08009778 <__mdiff>:
 8009778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	4689      	mov	r9, r1
 800977e:	4606      	mov	r6, r0
 8009780:	4611      	mov	r1, r2
 8009782:	4648      	mov	r0, r9
 8009784:	4614      	mov	r4, r2
 8009786:	f7ff ffdb 	bl	8009740 <__mcmp>
 800978a:	1e05      	subs	r5, r0, #0
 800978c:	d112      	bne.n	80097b4 <__mdiff+0x3c>
 800978e:	4629      	mov	r1, r5
 8009790:	4630      	mov	r0, r6
 8009792:	f7ff fd11 	bl	80091b8 <_Balloc>
 8009796:	4602      	mov	r2, r0
 8009798:	b928      	cbnz	r0, 80097a6 <__mdiff+0x2e>
 800979a:	4b3f      	ldr	r3, [pc, #252]	@ (8009898 <__mdiff+0x120>)
 800979c:	f240 2137 	movw	r1, #567	@ 0x237
 80097a0:	483e      	ldr	r0, [pc, #248]	@ (800989c <__mdiff+0x124>)
 80097a2:	f001 fa95 	bl	800acd0 <__assert_func>
 80097a6:	2301      	movs	r3, #1
 80097a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80097ac:	4610      	mov	r0, r2
 80097ae:	b003      	add	sp, #12
 80097b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b4:	bfbc      	itt	lt
 80097b6:	464b      	movlt	r3, r9
 80097b8:	46a1      	movlt	r9, r4
 80097ba:	4630      	mov	r0, r6
 80097bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097c0:	bfba      	itte	lt
 80097c2:	461c      	movlt	r4, r3
 80097c4:	2501      	movlt	r5, #1
 80097c6:	2500      	movge	r5, #0
 80097c8:	f7ff fcf6 	bl	80091b8 <_Balloc>
 80097cc:	4602      	mov	r2, r0
 80097ce:	b918      	cbnz	r0, 80097d8 <__mdiff+0x60>
 80097d0:	4b31      	ldr	r3, [pc, #196]	@ (8009898 <__mdiff+0x120>)
 80097d2:	f240 2145 	movw	r1, #581	@ 0x245
 80097d6:	e7e3      	b.n	80097a0 <__mdiff+0x28>
 80097d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097dc:	6926      	ldr	r6, [r4, #16]
 80097de:	60c5      	str	r5, [r0, #12]
 80097e0:	f109 0310 	add.w	r3, r9, #16
 80097e4:	f109 0514 	add.w	r5, r9, #20
 80097e8:	f104 0e14 	add.w	lr, r4, #20
 80097ec:	f100 0b14 	add.w	fp, r0, #20
 80097f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	46d9      	mov	r9, fp
 80097fc:	f04f 0c00 	mov.w	ip, #0
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009806:	f853 af04 	ldr.w	sl, [r3, #4]!
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	fa1f f38a 	uxth.w	r3, sl
 8009810:	4619      	mov	r1, r3
 8009812:	b283      	uxth	r3, r0
 8009814:	1acb      	subs	r3, r1, r3
 8009816:	0c00      	lsrs	r0, r0, #16
 8009818:	4463      	add	r3, ip
 800981a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800981e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009822:	b29b      	uxth	r3, r3
 8009824:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009828:	4576      	cmp	r6, lr
 800982a:	f849 3b04 	str.w	r3, [r9], #4
 800982e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009832:	d8e5      	bhi.n	8009800 <__mdiff+0x88>
 8009834:	1b33      	subs	r3, r6, r4
 8009836:	3b15      	subs	r3, #21
 8009838:	f023 0303 	bic.w	r3, r3, #3
 800983c:	3415      	adds	r4, #21
 800983e:	3304      	adds	r3, #4
 8009840:	42a6      	cmp	r6, r4
 8009842:	bf38      	it	cc
 8009844:	2304      	movcc	r3, #4
 8009846:	441d      	add	r5, r3
 8009848:	445b      	add	r3, fp
 800984a:	461e      	mov	r6, r3
 800984c:	462c      	mov	r4, r5
 800984e:	4544      	cmp	r4, r8
 8009850:	d30e      	bcc.n	8009870 <__mdiff+0xf8>
 8009852:	f108 0103 	add.w	r1, r8, #3
 8009856:	1b49      	subs	r1, r1, r5
 8009858:	f021 0103 	bic.w	r1, r1, #3
 800985c:	3d03      	subs	r5, #3
 800985e:	45a8      	cmp	r8, r5
 8009860:	bf38      	it	cc
 8009862:	2100      	movcc	r1, #0
 8009864:	440b      	add	r3, r1
 8009866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800986a:	b191      	cbz	r1, 8009892 <__mdiff+0x11a>
 800986c:	6117      	str	r7, [r2, #16]
 800986e:	e79d      	b.n	80097ac <__mdiff+0x34>
 8009870:	f854 1b04 	ldr.w	r1, [r4], #4
 8009874:	46e6      	mov	lr, ip
 8009876:	0c08      	lsrs	r0, r1, #16
 8009878:	fa1c fc81 	uxtah	ip, ip, r1
 800987c:	4471      	add	r1, lr
 800987e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009882:	b289      	uxth	r1, r1
 8009884:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009888:	f846 1b04 	str.w	r1, [r6], #4
 800988c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009890:	e7dd      	b.n	800984e <__mdiff+0xd6>
 8009892:	3f01      	subs	r7, #1
 8009894:	e7e7      	b.n	8009866 <__mdiff+0xee>
 8009896:	bf00      	nop
 8009898:	0800bac5 	.word	0x0800bac5
 800989c:	0800bad6 	.word	0x0800bad6

080098a0 <__ulp>:
 80098a0:	b082      	sub	sp, #8
 80098a2:	ed8d 0b00 	vstr	d0, [sp]
 80098a6:	9a01      	ldr	r2, [sp, #4]
 80098a8:	4b0f      	ldr	r3, [pc, #60]	@ (80098e8 <__ulp+0x48>)
 80098aa:	4013      	ands	r3, r2
 80098ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	dc08      	bgt.n	80098c6 <__ulp+0x26>
 80098b4:	425b      	negs	r3, r3
 80098b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80098ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80098be:	da04      	bge.n	80098ca <__ulp+0x2a>
 80098c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80098c4:	4113      	asrs	r3, r2
 80098c6:	2200      	movs	r2, #0
 80098c8:	e008      	b.n	80098dc <__ulp+0x3c>
 80098ca:	f1a2 0314 	sub.w	r3, r2, #20
 80098ce:	2b1e      	cmp	r3, #30
 80098d0:	bfda      	itte	le
 80098d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80098d6:	40da      	lsrle	r2, r3
 80098d8:	2201      	movgt	r2, #1
 80098da:	2300      	movs	r3, #0
 80098dc:	4619      	mov	r1, r3
 80098de:	4610      	mov	r0, r2
 80098e0:	ec41 0b10 	vmov	d0, r0, r1
 80098e4:	b002      	add	sp, #8
 80098e6:	4770      	bx	lr
 80098e8:	7ff00000 	.word	0x7ff00000

080098ec <__b2d>:
 80098ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098f0:	6906      	ldr	r6, [r0, #16]
 80098f2:	f100 0814 	add.w	r8, r0, #20
 80098f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80098fa:	1f37      	subs	r7, r6, #4
 80098fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009900:	4610      	mov	r0, r2
 8009902:	f7ff fd4b 	bl	800939c <__hi0bits>
 8009906:	f1c0 0320 	rsb	r3, r0, #32
 800990a:	280a      	cmp	r0, #10
 800990c:	600b      	str	r3, [r1, #0]
 800990e:	491b      	ldr	r1, [pc, #108]	@ (800997c <__b2d+0x90>)
 8009910:	dc15      	bgt.n	800993e <__b2d+0x52>
 8009912:	f1c0 0c0b 	rsb	ip, r0, #11
 8009916:	fa22 f30c 	lsr.w	r3, r2, ip
 800991a:	45b8      	cmp	r8, r7
 800991c:	ea43 0501 	orr.w	r5, r3, r1
 8009920:	bf34      	ite	cc
 8009922:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009926:	2300      	movcs	r3, #0
 8009928:	3015      	adds	r0, #21
 800992a:	fa02 f000 	lsl.w	r0, r2, r0
 800992e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009932:	4303      	orrs	r3, r0
 8009934:	461c      	mov	r4, r3
 8009936:	ec45 4b10 	vmov	d0, r4, r5
 800993a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993e:	45b8      	cmp	r8, r7
 8009940:	bf3a      	itte	cc
 8009942:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009946:	f1a6 0708 	subcc.w	r7, r6, #8
 800994a:	2300      	movcs	r3, #0
 800994c:	380b      	subs	r0, #11
 800994e:	d012      	beq.n	8009976 <__b2d+0x8a>
 8009950:	f1c0 0120 	rsb	r1, r0, #32
 8009954:	fa23 f401 	lsr.w	r4, r3, r1
 8009958:	4082      	lsls	r2, r0
 800995a:	4322      	orrs	r2, r4
 800995c:	4547      	cmp	r7, r8
 800995e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009962:	bf8c      	ite	hi
 8009964:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009968:	2200      	movls	r2, #0
 800996a:	4083      	lsls	r3, r0
 800996c:	40ca      	lsrs	r2, r1
 800996e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009972:	4313      	orrs	r3, r2
 8009974:	e7de      	b.n	8009934 <__b2d+0x48>
 8009976:	ea42 0501 	orr.w	r5, r2, r1
 800997a:	e7db      	b.n	8009934 <__b2d+0x48>
 800997c:	3ff00000 	.word	0x3ff00000

08009980 <__d2b>:
 8009980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009984:	460f      	mov	r7, r1
 8009986:	2101      	movs	r1, #1
 8009988:	ec59 8b10 	vmov	r8, r9, d0
 800998c:	4616      	mov	r6, r2
 800998e:	f7ff fc13 	bl	80091b8 <_Balloc>
 8009992:	4604      	mov	r4, r0
 8009994:	b930      	cbnz	r0, 80099a4 <__d2b+0x24>
 8009996:	4602      	mov	r2, r0
 8009998:	4b23      	ldr	r3, [pc, #140]	@ (8009a28 <__d2b+0xa8>)
 800999a:	4824      	ldr	r0, [pc, #144]	@ (8009a2c <__d2b+0xac>)
 800999c:	f240 310f 	movw	r1, #783	@ 0x30f
 80099a0:	f001 f996 	bl	800acd0 <__assert_func>
 80099a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099ac:	b10d      	cbz	r5, 80099b2 <__d2b+0x32>
 80099ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099b2:	9301      	str	r3, [sp, #4]
 80099b4:	f1b8 0300 	subs.w	r3, r8, #0
 80099b8:	d023      	beq.n	8009a02 <__d2b+0x82>
 80099ba:	4668      	mov	r0, sp
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	f7ff fd0c 	bl	80093da <__lo0bits>
 80099c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099c6:	b1d0      	cbz	r0, 80099fe <__d2b+0x7e>
 80099c8:	f1c0 0320 	rsb	r3, r0, #32
 80099cc:	fa02 f303 	lsl.w	r3, r2, r3
 80099d0:	430b      	orrs	r3, r1
 80099d2:	40c2      	lsrs	r2, r0
 80099d4:	6163      	str	r3, [r4, #20]
 80099d6:	9201      	str	r2, [sp, #4]
 80099d8:	9b01      	ldr	r3, [sp, #4]
 80099da:	61a3      	str	r3, [r4, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	bf0c      	ite	eq
 80099e0:	2201      	moveq	r2, #1
 80099e2:	2202      	movne	r2, #2
 80099e4:	6122      	str	r2, [r4, #16]
 80099e6:	b1a5      	cbz	r5, 8009a12 <__d2b+0x92>
 80099e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099ec:	4405      	add	r5, r0
 80099ee:	603d      	str	r5, [r7, #0]
 80099f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099f4:	6030      	str	r0, [r6, #0]
 80099f6:	4620      	mov	r0, r4
 80099f8:	b003      	add	sp, #12
 80099fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099fe:	6161      	str	r1, [r4, #20]
 8009a00:	e7ea      	b.n	80099d8 <__d2b+0x58>
 8009a02:	a801      	add	r0, sp, #4
 8009a04:	f7ff fce9 	bl	80093da <__lo0bits>
 8009a08:	9b01      	ldr	r3, [sp, #4]
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	3020      	adds	r0, #32
 8009a0e:	2201      	movs	r2, #1
 8009a10:	e7e8      	b.n	80099e4 <__d2b+0x64>
 8009a12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a1a:	6038      	str	r0, [r7, #0]
 8009a1c:	6918      	ldr	r0, [r3, #16]
 8009a1e:	f7ff fcbd 	bl	800939c <__hi0bits>
 8009a22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a26:	e7e5      	b.n	80099f4 <__d2b+0x74>
 8009a28:	0800bac5 	.word	0x0800bac5
 8009a2c:	0800bad6 	.word	0x0800bad6

08009a30 <__ratio>:
 8009a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a34:	b085      	sub	sp, #20
 8009a36:	e9cd 1000 	strd	r1, r0, [sp]
 8009a3a:	a902      	add	r1, sp, #8
 8009a3c:	f7ff ff56 	bl	80098ec <__b2d>
 8009a40:	9800      	ldr	r0, [sp, #0]
 8009a42:	a903      	add	r1, sp, #12
 8009a44:	ec55 4b10 	vmov	r4, r5, d0
 8009a48:	f7ff ff50 	bl	80098ec <__b2d>
 8009a4c:	9b01      	ldr	r3, [sp, #4]
 8009a4e:	6919      	ldr	r1, [r3, #16]
 8009a50:	9b00      	ldr	r3, [sp, #0]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	1ac9      	subs	r1, r1, r3
 8009a56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	ec5b ab10 	vmov	sl, fp, d0
 8009a60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	bfce      	itee	gt
 8009a68:	462a      	movgt	r2, r5
 8009a6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a6e:	465a      	movle	r2, fp
 8009a70:	462f      	mov	r7, r5
 8009a72:	46d9      	mov	r9, fp
 8009a74:	bfcc      	ite	gt
 8009a76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009a7e:	464b      	mov	r3, r9
 8009a80:	4652      	mov	r2, sl
 8009a82:	4620      	mov	r0, r4
 8009a84:	4639      	mov	r1, r7
 8009a86:	f7f6 fee9 	bl	800085c <__aeabi_ddiv>
 8009a8a:	ec41 0b10 	vmov	d0, r0, r1
 8009a8e:	b005      	add	sp, #20
 8009a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a94 <__copybits>:
 8009a94:	3901      	subs	r1, #1
 8009a96:	b570      	push	{r4, r5, r6, lr}
 8009a98:	1149      	asrs	r1, r1, #5
 8009a9a:	6914      	ldr	r4, [r2, #16]
 8009a9c:	3101      	adds	r1, #1
 8009a9e:	f102 0314 	add.w	r3, r2, #20
 8009aa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009aa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009aaa:	1f05      	subs	r5, r0, #4
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	d30c      	bcc.n	8009aca <__copybits+0x36>
 8009ab0:	1aa3      	subs	r3, r4, r2
 8009ab2:	3b11      	subs	r3, #17
 8009ab4:	f023 0303 	bic.w	r3, r3, #3
 8009ab8:	3211      	adds	r2, #17
 8009aba:	42a2      	cmp	r2, r4
 8009abc:	bf88      	it	hi
 8009abe:	2300      	movhi	r3, #0
 8009ac0:	4418      	add	r0, r3
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	4288      	cmp	r0, r1
 8009ac6:	d305      	bcc.n	8009ad4 <__copybits+0x40>
 8009ac8:	bd70      	pop	{r4, r5, r6, pc}
 8009aca:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ace:	f845 6f04 	str.w	r6, [r5, #4]!
 8009ad2:	e7eb      	b.n	8009aac <__copybits+0x18>
 8009ad4:	f840 3b04 	str.w	r3, [r0], #4
 8009ad8:	e7f4      	b.n	8009ac4 <__copybits+0x30>

08009ada <__any_on>:
 8009ada:	f100 0214 	add.w	r2, r0, #20
 8009ade:	6900      	ldr	r0, [r0, #16]
 8009ae0:	114b      	asrs	r3, r1, #5
 8009ae2:	4298      	cmp	r0, r3
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	db11      	blt.n	8009b0c <__any_on+0x32>
 8009ae8:	dd0a      	ble.n	8009b00 <__any_on+0x26>
 8009aea:	f011 011f 	ands.w	r1, r1, #31
 8009aee:	d007      	beq.n	8009b00 <__any_on+0x26>
 8009af0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009af4:	fa24 f001 	lsr.w	r0, r4, r1
 8009af8:	fa00 f101 	lsl.w	r1, r0, r1
 8009afc:	428c      	cmp	r4, r1
 8009afe:	d10b      	bne.n	8009b18 <__any_on+0x3e>
 8009b00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d803      	bhi.n	8009b10 <__any_on+0x36>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	bd10      	pop	{r4, pc}
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	e7f7      	b.n	8009b00 <__any_on+0x26>
 8009b10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b14:	2900      	cmp	r1, #0
 8009b16:	d0f5      	beq.n	8009b04 <__any_on+0x2a>
 8009b18:	2001      	movs	r0, #1
 8009b1a:	e7f6      	b.n	8009b0a <__any_on+0x30>

08009b1c <sulp>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	4604      	mov	r4, r0
 8009b20:	460d      	mov	r5, r1
 8009b22:	ec45 4b10 	vmov	d0, r4, r5
 8009b26:	4616      	mov	r6, r2
 8009b28:	f7ff feba 	bl	80098a0 <__ulp>
 8009b2c:	ec51 0b10 	vmov	r0, r1, d0
 8009b30:	b17e      	cbz	r6, 8009b52 <sulp+0x36>
 8009b32:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009b36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	dd09      	ble.n	8009b52 <sulp+0x36>
 8009b3e:	051b      	lsls	r3, r3, #20
 8009b40:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009b44:	2400      	movs	r4, #0
 8009b46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	f7f6 fd5b 	bl	8000608 <__aeabi_dmul>
 8009b52:	ec41 0b10 	vmov	d0, r0, r1
 8009b56:	bd70      	pop	{r4, r5, r6, pc}

08009b58 <_strtod_l>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	b09f      	sub	sp, #124	@ 0x7c
 8009b5e:	460c      	mov	r4, r1
 8009b60:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009b62:	2200      	movs	r2, #0
 8009b64:	921a      	str	r2, [sp, #104]	@ 0x68
 8009b66:	9005      	str	r0, [sp, #20]
 8009b68:	f04f 0a00 	mov.w	sl, #0
 8009b6c:	f04f 0b00 	mov.w	fp, #0
 8009b70:	460a      	mov	r2, r1
 8009b72:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b74:	7811      	ldrb	r1, [r2, #0]
 8009b76:	292b      	cmp	r1, #43	@ 0x2b
 8009b78:	d04a      	beq.n	8009c10 <_strtod_l+0xb8>
 8009b7a:	d838      	bhi.n	8009bee <_strtod_l+0x96>
 8009b7c:	290d      	cmp	r1, #13
 8009b7e:	d832      	bhi.n	8009be6 <_strtod_l+0x8e>
 8009b80:	2908      	cmp	r1, #8
 8009b82:	d832      	bhi.n	8009bea <_strtod_l+0x92>
 8009b84:	2900      	cmp	r1, #0
 8009b86:	d03b      	beq.n	8009c00 <_strtod_l+0xa8>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b8c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009b8e:	782a      	ldrb	r2, [r5, #0]
 8009b90:	2a30      	cmp	r2, #48	@ 0x30
 8009b92:	f040 80b3 	bne.w	8009cfc <_strtod_l+0x1a4>
 8009b96:	786a      	ldrb	r2, [r5, #1]
 8009b98:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b9c:	2a58      	cmp	r2, #88	@ 0x58
 8009b9e:	d16e      	bne.n	8009c7e <_strtod_l+0x126>
 8009ba0:	9302      	str	r3, [sp, #8]
 8009ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	ab1a      	add	r3, sp, #104	@ 0x68
 8009ba8:	9300      	str	r3, [sp, #0]
 8009baa:	4a8e      	ldr	r2, [pc, #568]	@ (8009de4 <_strtod_l+0x28c>)
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009bb0:	a919      	add	r1, sp, #100	@ 0x64
 8009bb2:	f001 f927 	bl	800ae04 <__gethex>
 8009bb6:	f010 060f 	ands.w	r6, r0, #15
 8009bba:	4604      	mov	r4, r0
 8009bbc:	d005      	beq.n	8009bca <_strtod_l+0x72>
 8009bbe:	2e06      	cmp	r6, #6
 8009bc0:	d128      	bne.n	8009c14 <_strtod_l+0xbc>
 8009bc2:	3501      	adds	r5, #1
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9519      	str	r5, [sp, #100]	@ 0x64
 8009bc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f040 858e 	bne.w	800a6ee <_strtod_l+0xb96>
 8009bd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bd4:	b1cb      	cbz	r3, 8009c0a <_strtod_l+0xb2>
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009bdc:	ec43 2b10 	vmov	d0, r2, r3
 8009be0:	b01f      	add	sp, #124	@ 0x7c
 8009be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be6:	2920      	cmp	r1, #32
 8009be8:	d1ce      	bne.n	8009b88 <_strtod_l+0x30>
 8009bea:	3201      	adds	r2, #1
 8009bec:	e7c1      	b.n	8009b72 <_strtod_l+0x1a>
 8009bee:	292d      	cmp	r1, #45	@ 0x2d
 8009bf0:	d1ca      	bne.n	8009b88 <_strtod_l+0x30>
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009bf6:	1c51      	adds	r1, r2, #1
 8009bf8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009bfa:	7852      	ldrb	r2, [r2, #1]
 8009bfc:	2a00      	cmp	r2, #0
 8009bfe:	d1c5      	bne.n	8009b8c <_strtod_l+0x34>
 8009c00:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009c02:	9419      	str	r4, [sp, #100]	@ 0x64
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 8570 	bne.w	800a6ea <_strtod_l+0xb92>
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	465b      	mov	r3, fp
 8009c0e:	e7e5      	b.n	8009bdc <_strtod_l+0x84>
 8009c10:	2100      	movs	r1, #0
 8009c12:	e7ef      	b.n	8009bf4 <_strtod_l+0x9c>
 8009c14:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c16:	b13a      	cbz	r2, 8009c28 <_strtod_l+0xd0>
 8009c18:	2135      	movs	r1, #53	@ 0x35
 8009c1a:	a81c      	add	r0, sp, #112	@ 0x70
 8009c1c:	f7ff ff3a 	bl	8009a94 <__copybits>
 8009c20:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c22:	9805      	ldr	r0, [sp, #20]
 8009c24:	f7ff fb08 	bl	8009238 <_Bfree>
 8009c28:	3e01      	subs	r6, #1
 8009c2a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009c2c:	2e04      	cmp	r6, #4
 8009c2e:	d806      	bhi.n	8009c3e <_strtod_l+0xe6>
 8009c30:	e8df f006 	tbb	[pc, r6]
 8009c34:	201d0314 	.word	0x201d0314
 8009c38:	14          	.byte	0x14
 8009c39:	00          	.byte	0x00
 8009c3a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009c3e:	05e1      	lsls	r1, r4, #23
 8009c40:	bf48      	it	mi
 8009c42:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009c46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c4a:	0d1b      	lsrs	r3, r3, #20
 8009c4c:	051b      	lsls	r3, r3, #20
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1bb      	bne.n	8009bca <_strtod_l+0x72>
 8009c52:	f7fe fb31 	bl	80082b8 <__errno>
 8009c56:	2322      	movs	r3, #34	@ 0x22
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	e7b6      	b.n	8009bca <_strtod_l+0x72>
 8009c5c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009c60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009c64:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c68:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c6c:	e7e7      	b.n	8009c3e <_strtod_l+0xe6>
 8009c6e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009dec <_strtod_l+0x294>
 8009c72:	e7e4      	b.n	8009c3e <_strtod_l+0xe6>
 8009c74:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009c78:	f04f 3aff 	mov.w	sl, #4294967295
 8009c7c:	e7df      	b.n	8009c3e <_strtod_l+0xe6>
 8009c7e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c80:	1c5a      	adds	r2, r3, #1
 8009c82:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c84:	785b      	ldrb	r3, [r3, #1]
 8009c86:	2b30      	cmp	r3, #48	@ 0x30
 8009c88:	d0f9      	beq.n	8009c7e <_strtod_l+0x126>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d09d      	beq.n	8009bca <_strtod_l+0x72>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c94:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c96:	2300      	movs	r3, #0
 8009c98:	9308      	str	r3, [sp, #32]
 8009c9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c9c:	461f      	mov	r7, r3
 8009c9e:	220a      	movs	r2, #10
 8009ca0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009ca2:	7805      	ldrb	r5, [r0, #0]
 8009ca4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009ca8:	b2d9      	uxtb	r1, r3
 8009caa:	2909      	cmp	r1, #9
 8009cac:	d928      	bls.n	8009d00 <_strtod_l+0x1a8>
 8009cae:	494e      	ldr	r1, [pc, #312]	@ (8009de8 <_strtod_l+0x290>)
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f000 ffd5 	bl	800ac60 <strncmp>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d032      	beq.n	8009d20 <_strtod_l+0x1c8>
 8009cba:	2000      	movs	r0, #0
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	4681      	mov	r9, r0
 8009cc0:	463d      	mov	r5, r7
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2a65      	cmp	r2, #101	@ 0x65
 8009cc6:	d001      	beq.n	8009ccc <_strtod_l+0x174>
 8009cc8:	2a45      	cmp	r2, #69	@ 0x45
 8009cca:	d114      	bne.n	8009cf6 <_strtod_l+0x19e>
 8009ccc:	b91d      	cbnz	r5, 8009cd6 <_strtod_l+0x17e>
 8009cce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cd0:	4302      	orrs	r2, r0
 8009cd2:	d095      	beq.n	8009c00 <_strtod_l+0xa8>
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009cd8:	1c62      	adds	r2, r4, #1
 8009cda:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cdc:	7862      	ldrb	r2, [r4, #1]
 8009cde:	2a2b      	cmp	r2, #43	@ 0x2b
 8009ce0:	d077      	beq.n	8009dd2 <_strtod_l+0x27a>
 8009ce2:	2a2d      	cmp	r2, #45	@ 0x2d
 8009ce4:	d07b      	beq.n	8009dde <_strtod_l+0x286>
 8009ce6:	f04f 0c00 	mov.w	ip, #0
 8009cea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009cee:	2909      	cmp	r1, #9
 8009cf0:	f240 8082 	bls.w	8009df8 <_strtod_l+0x2a0>
 8009cf4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009cf6:	f04f 0800 	mov.w	r8, #0
 8009cfa:	e0a2      	b.n	8009e42 <_strtod_l+0x2ea>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e7c7      	b.n	8009c90 <_strtod_l+0x138>
 8009d00:	2f08      	cmp	r7, #8
 8009d02:	bfd5      	itete	le
 8009d04:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009d06:	9908      	ldrgt	r1, [sp, #32]
 8009d08:	fb02 3301 	mlale	r3, r2, r1, r3
 8009d0c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009d10:	f100 0001 	add.w	r0, r0, #1
 8009d14:	bfd4      	ite	le
 8009d16:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009d18:	9308      	strgt	r3, [sp, #32]
 8009d1a:	3701      	adds	r7, #1
 8009d1c:	9019      	str	r0, [sp, #100]	@ 0x64
 8009d1e:	e7bf      	b.n	8009ca0 <_strtod_l+0x148>
 8009d20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d26:	785a      	ldrb	r2, [r3, #1]
 8009d28:	b37f      	cbz	r7, 8009d8a <_strtod_l+0x232>
 8009d2a:	4681      	mov	r9, r0
 8009d2c:	463d      	mov	r5, r7
 8009d2e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d912      	bls.n	8009d5c <_strtod_l+0x204>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e7c4      	b.n	8009cc4 <_strtod_l+0x16c>
 8009d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d40:	785a      	ldrb	r2, [r3, #1]
 8009d42:	3001      	adds	r0, #1
 8009d44:	2a30      	cmp	r2, #48	@ 0x30
 8009d46:	d0f8      	beq.n	8009d3a <_strtod_l+0x1e2>
 8009d48:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	f200 84d3 	bhi.w	800a6f8 <_strtod_l+0xba0>
 8009d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d54:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d56:	4681      	mov	r9, r0
 8009d58:	2000      	movs	r0, #0
 8009d5a:	4605      	mov	r5, r0
 8009d5c:	3a30      	subs	r2, #48	@ 0x30
 8009d5e:	f100 0301 	add.w	r3, r0, #1
 8009d62:	d02a      	beq.n	8009dba <_strtod_l+0x262>
 8009d64:	4499      	add	r9, r3
 8009d66:	eb00 0c05 	add.w	ip, r0, r5
 8009d6a:	462b      	mov	r3, r5
 8009d6c:	210a      	movs	r1, #10
 8009d6e:	4563      	cmp	r3, ip
 8009d70:	d10d      	bne.n	8009d8e <_strtod_l+0x236>
 8009d72:	1c69      	adds	r1, r5, #1
 8009d74:	4401      	add	r1, r0
 8009d76:	4428      	add	r0, r5
 8009d78:	2808      	cmp	r0, #8
 8009d7a:	dc16      	bgt.n	8009daa <_strtod_l+0x252>
 8009d7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d7e:	230a      	movs	r3, #10
 8009d80:	fb03 2300 	mla	r3, r3, r0, r2
 8009d84:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d86:	2300      	movs	r3, #0
 8009d88:	e018      	b.n	8009dbc <_strtod_l+0x264>
 8009d8a:	4638      	mov	r0, r7
 8009d8c:	e7da      	b.n	8009d44 <_strtod_l+0x1ec>
 8009d8e:	2b08      	cmp	r3, #8
 8009d90:	f103 0301 	add.w	r3, r3, #1
 8009d94:	dc03      	bgt.n	8009d9e <_strtod_l+0x246>
 8009d96:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009d98:	434e      	muls	r6, r1
 8009d9a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009d9c:	e7e7      	b.n	8009d6e <_strtod_l+0x216>
 8009d9e:	2b10      	cmp	r3, #16
 8009da0:	bfde      	ittt	le
 8009da2:	9e08      	ldrle	r6, [sp, #32]
 8009da4:	434e      	mulle	r6, r1
 8009da6:	9608      	strle	r6, [sp, #32]
 8009da8:	e7e1      	b.n	8009d6e <_strtod_l+0x216>
 8009daa:	280f      	cmp	r0, #15
 8009dac:	dceb      	bgt.n	8009d86 <_strtod_l+0x22e>
 8009dae:	9808      	ldr	r0, [sp, #32]
 8009db0:	230a      	movs	r3, #10
 8009db2:	fb03 2300 	mla	r3, r3, r0, r2
 8009db6:	9308      	str	r3, [sp, #32]
 8009db8:	e7e5      	b.n	8009d86 <_strtod_l+0x22e>
 8009dba:	4629      	mov	r1, r5
 8009dbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dbe:	1c50      	adds	r0, r2, #1
 8009dc0:	9019      	str	r0, [sp, #100]	@ 0x64
 8009dc2:	7852      	ldrb	r2, [r2, #1]
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	e7b1      	b.n	8009d2e <_strtod_l+0x1d6>
 8009dca:	f04f 0900 	mov.w	r9, #0
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e77d      	b.n	8009cce <_strtod_l+0x176>
 8009dd2:	f04f 0c00 	mov.w	ip, #0
 8009dd6:	1ca2      	adds	r2, r4, #2
 8009dd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dda:	78a2      	ldrb	r2, [r4, #2]
 8009ddc:	e785      	b.n	8009cea <_strtod_l+0x192>
 8009dde:	f04f 0c01 	mov.w	ip, #1
 8009de2:	e7f8      	b.n	8009dd6 <_strtod_l+0x27e>
 8009de4:	0800bc48 	.word	0x0800bc48
 8009de8:	0800bc30 	.word	0x0800bc30
 8009dec:	7ff00000 	.word	0x7ff00000
 8009df0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009df2:	1c51      	adds	r1, r2, #1
 8009df4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009df6:	7852      	ldrb	r2, [r2, #1]
 8009df8:	2a30      	cmp	r2, #48	@ 0x30
 8009dfa:	d0f9      	beq.n	8009df0 <_strtod_l+0x298>
 8009dfc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009e00:	2908      	cmp	r1, #8
 8009e02:	f63f af78 	bhi.w	8009cf6 <_strtod_l+0x19e>
 8009e06:	3a30      	subs	r2, #48	@ 0x30
 8009e08:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e0a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e0c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009e0e:	f04f 080a 	mov.w	r8, #10
 8009e12:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009e14:	1c56      	adds	r6, r2, #1
 8009e16:	9619      	str	r6, [sp, #100]	@ 0x64
 8009e18:	7852      	ldrb	r2, [r2, #1]
 8009e1a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009e1e:	f1be 0f09 	cmp.w	lr, #9
 8009e22:	d939      	bls.n	8009e98 <_strtod_l+0x340>
 8009e24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009e26:	1a76      	subs	r6, r6, r1
 8009e28:	2e08      	cmp	r6, #8
 8009e2a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009e2e:	dc03      	bgt.n	8009e38 <_strtod_l+0x2e0>
 8009e30:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e32:	4588      	cmp	r8, r1
 8009e34:	bfa8      	it	ge
 8009e36:	4688      	movge	r8, r1
 8009e38:	f1bc 0f00 	cmp.w	ip, #0
 8009e3c:	d001      	beq.n	8009e42 <_strtod_l+0x2ea>
 8009e3e:	f1c8 0800 	rsb	r8, r8, #0
 8009e42:	2d00      	cmp	r5, #0
 8009e44:	d14e      	bne.n	8009ee4 <_strtod_l+0x38c>
 8009e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e48:	4308      	orrs	r0, r1
 8009e4a:	f47f aebe 	bne.w	8009bca <_strtod_l+0x72>
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	f47f aed6 	bne.w	8009c00 <_strtod_l+0xa8>
 8009e54:	2a69      	cmp	r2, #105	@ 0x69
 8009e56:	d028      	beq.n	8009eaa <_strtod_l+0x352>
 8009e58:	dc25      	bgt.n	8009ea6 <_strtod_l+0x34e>
 8009e5a:	2a49      	cmp	r2, #73	@ 0x49
 8009e5c:	d025      	beq.n	8009eaa <_strtod_l+0x352>
 8009e5e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009e60:	f47f aece 	bne.w	8009c00 <_strtod_l+0xa8>
 8009e64:	499b      	ldr	r1, [pc, #620]	@ (800a0d4 <_strtod_l+0x57c>)
 8009e66:	a819      	add	r0, sp, #100	@ 0x64
 8009e68:	f001 f9ee 	bl	800b248 <__match>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f43f aec7 	beq.w	8009c00 <_strtod_l+0xa8>
 8009e72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	2b28      	cmp	r3, #40	@ 0x28
 8009e78:	d12e      	bne.n	8009ed8 <_strtod_l+0x380>
 8009e7a:	4997      	ldr	r1, [pc, #604]	@ (800a0d8 <_strtod_l+0x580>)
 8009e7c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e7e:	a819      	add	r0, sp, #100	@ 0x64
 8009e80:	f001 f9f6 	bl	800b270 <__hexnan>
 8009e84:	2805      	cmp	r0, #5
 8009e86:	d127      	bne.n	8009ed8 <_strtod_l+0x380>
 8009e88:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e8a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009e8e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009e92:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009e96:	e698      	b.n	8009bca <_strtod_l+0x72>
 8009e98:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e9a:	fb08 2101 	mla	r1, r8, r1, r2
 8009e9e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009ea2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ea4:	e7b5      	b.n	8009e12 <_strtod_l+0x2ba>
 8009ea6:	2a6e      	cmp	r2, #110	@ 0x6e
 8009ea8:	e7da      	b.n	8009e60 <_strtod_l+0x308>
 8009eaa:	498c      	ldr	r1, [pc, #560]	@ (800a0dc <_strtod_l+0x584>)
 8009eac:	a819      	add	r0, sp, #100	@ 0x64
 8009eae:	f001 f9cb 	bl	800b248 <__match>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	f43f aea4 	beq.w	8009c00 <_strtod_l+0xa8>
 8009eb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eba:	4989      	ldr	r1, [pc, #548]	@ (800a0e0 <_strtod_l+0x588>)
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	a819      	add	r0, sp, #100	@ 0x64
 8009ec0:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ec2:	f001 f9c1 	bl	800b248 <__match>
 8009ec6:	b910      	cbnz	r0, 8009ece <_strtod_l+0x376>
 8009ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eca:	3301      	adds	r3, #1
 8009ecc:	9319      	str	r3, [sp, #100]	@ 0x64
 8009ece:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a0f0 <_strtod_l+0x598>
 8009ed2:	f04f 0a00 	mov.w	sl, #0
 8009ed6:	e678      	b.n	8009bca <_strtod_l+0x72>
 8009ed8:	4882      	ldr	r0, [pc, #520]	@ (800a0e4 <_strtod_l+0x58c>)
 8009eda:	f000 fef1 	bl	800acc0 <nan>
 8009ede:	ec5b ab10 	vmov	sl, fp, d0
 8009ee2:	e672      	b.n	8009bca <_strtod_l+0x72>
 8009ee4:	eba8 0309 	sub.w	r3, r8, r9
 8009ee8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009eea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eec:	2f00      	cmp	r7, #0
 8009eee:	bf08      	it	eq
 8009ef0:	462f      	moveq	r7, r5
 8009ef2:	2d10      	cmp	r5, #16
 8009ef4:	462c      	mov	r4, r5
 8009ef6:	bfa8      	it	ge
 8009ef8:	2410      	movge	r4, #16
 8009efa:	f7f6 fb0b 	bl	8000514 <__aeabi_ui2d>
 8009efe:	2d09      	cmp	r5, #9
 8009f00:	4682      	mov	sl, r0
 8009f02:	468b      	mov	fp, r1
 8009f04:	dc13      	bgt.n	8009f2e <_strtod_l+0x3d6>
 8009f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f43f ae5e 	beq.w	8009bca <_strtod_l+0x72>
 8009f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f10:	dd78      	ble.n	800a004 <_strtod_l+0x4ac>
 8009f12:	2b16      	cmp	r3, #22
 8009f14:	dc5f      	bgt.n	8009fd6 <_strtod_l+0x47e>
 8009f16:	4974      	ldr	r1, [pc, #464]	@ (800a0e8 <_strtod_l+0x590>)
 8009f18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f20:	4652      	mov	r2, sl
 8009f22:	465b      	mov	r3, fp
 8009f24:	f7f6 fb70 	bl	8000608 <__aeabi_dmul>
 8009f28:	4682      	mov	sl, r0
 8009f2a:	468b      	mov	fp, r1
 8009f2c:	e64d      	b.n	8009bca <_strtod_l+0x72>
 8009f2e:	4b6e      	ldr	r3, [pc, #440]	@ (800a0e8 <_strtod_l+0x590>)
 8009f30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009f38:	f7f6 fb66 	bl	8000608 <__aeabi_dmul>
 8009f3c:	4682      	mov	sl, r0
 8009f3e:	9808      	ldr	r0, [sp, #32]
 8009f40:	468b      	mov	fp, r1
 8009f42:	f7f6 fae7 	bl	8000514 <__aeabi_ui2d>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	4659      	mov	r1, fp
 8009f4e:	f7f6 f9a5 	bl	800029c <__adddf3>
 8009f52:	2d0f      	cmp	r5, #15
 8009f54:	4682      	mov	sl, r0
 8009f56:	468b      	mov	fp, r1
 8009f58:	ddd5      	ble.n	8009f06 <_strtod_l+0x3ae>
 8009f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5c:	1b2c      	subs	r4, r5, r4
 8009f5e:	441c      	add	r4, r3
 8009f60:	2c00      	cmp	r4, #0
 8009f62:	f340 8096 	ble.w	800a092 <_strtod_l+0x53a>
 8009f66:	f014 030f 	ands.w	r3, r4, #15
 8009f6a:	d00a      	beq.n	8009f82 <_strtod_l+0x42a>
 8009f6c:	495e      	ldr	r1, [pc, #376]	@ (800a0e8 <_strtod_l+0x590>)
 8009f6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f72:	4652      	mov	r2, sl
 8009f74:	465b      	mov	r3, fp
 8009f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f7a:	f7f6 fb45 	bl	8000608 <__aeabi_dmul>
 8009f7e:	4682      	mov	sl, r0
 8009f80:	468b      	mov	fp, r1
 8009f82:	f034 040f 	bics.w	r4, r4, #15
 8009f86:	d073      	beq.n	800a070 <_strtod_l+0x518>
 8009f88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009f8c:	dd48      	ble.n	800a020 <_strtod_l+0x4c8>
 8009f8e:	2400      	movs	r4, #0
 8009f90:	46a0      	mov	r8, r4
 8009f92:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f94:	46a1      	mov	r9, r4
 8009f96:	9a05      	ldr	r2, [sp, #20]
 8009f98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a0f0 <_strtod_l+0x598>
 8009f9c:	2322      	movs	r3, #34	@ 0x22
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	f04f 0a00 	mov.w	sl, #0
 8009fa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f43f ae0f 	beq.w	8009bca <_strtod_l+0x72>
 8009fac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009fae:	9805      	ldr	r0, [sp, #20]
 8009fb0:	f7ff f942 	bl	8009238 <_Bfree>
 8009fb4:	9805      	ldr	r0, [sp, #20]
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	f7ff f93e 	bl	8009238 <_Bfree>
 8009fbc:	9805      	ldr	r0, [sp, #20]
 8009fbe:	4641      	mov	r1, r8
 8009fc0:	f7ff f93a 	bl	8009238 <_Bfree>
 8009fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009fc6:	9805      	ldr	r0, [sp, #20]
 8009fc8:	f7ff f936 	bl	8009238 <_Bfree>
 8009fcc:	9805      	ldr	r0, [sp, #20]
 8009fce:	4621      	mov	r1, r4
 8009fd0:	f7ff f932 	bl	8009238 <_Bfree>
 8009fd4:	e5f9      	b.n	8009bca <_strtod_l+0x72>
 8009fd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	dbbc      	blt.n	8009f5a <_strtod_l+0x402>
 8009fe0:	4c41      	ldr	r4, [pc, #260]	@ (800a0e8 <_strtod_l+0x590>)
 8009fe2:	f1c5 050f 	rsb	r5, r5, #15
 8009fe6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009fea:	4652      	mov	r2, sl
 8009fec:	465b      	mov	r3, fp
 8009fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff2:	f7f6 fb09 	bl	8000608 <__aeabi_dmul>
 8009ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff8:	1b5d      	subs	r5, r3, r5
 8009ffa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ffe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a002:	e78f      	b.n	8009f24 <_strtod_l+0x3cc>
 800a004:	3316      	adds	r3, #22
 800a006:	dba8      	blt.n	8009f5a <_strtod_l+0x402>
 800a008:	4b37      	ldr	r3, [pc, #220]	@ (800a0e8 <_strtod_l+0x590>)
 800a00a:	eba9 0808 	sub.w	r8, r9, r8
 800a00e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a012:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a016:	4650      	mov	r0, sl
 800a018:	4659      	mov	r1, fp
 800a01a:	f7f6 fc1f 	bl	800085c <__aeabi_ddiv>
 800a01e:	e783      	b.n	8009f28 <_strtod_l+0x3d0>
 800a020:	4b32      	ldr	r3, [pc, #200]	@ (800a0ec <_strtod_l+0x594>)
 800a022:	9308      	str	r3, [sp, #32]
 800a024:	2300      	movs	r3, #0
 800a026:	1124      	asrs	r4, r4, #4
 800a028:	4650      	mov	r0, sl
 800a02a:	4659      	mov	r1, fp
 800a02c:	461e      	mov	r6, r3
 800a02e:	2c01      	cmp	r4, #1
 800a030:	dc21      	bgt.n	800a076 <_strtod_l+0x51e>
 800a032:	b10b      	cbz	r3, 800a038 <_strtod_l+0x4e0>
 800a034:	4682      	mov	sl, r0
 800a036:	468b      	mov	fp, r1
 800a038:	492c      	ldr	r1, [pc, #176]	@ (800a0ec <_strtod_l+0x594>)
 800a03a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a03e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a042:	4652      	mov	r2, sl
 800a044:	465b      	mov	r3, fp
 800a046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a04a:	f7f6 fadd 	bl	8000608 <__aeabi_dmul>
 800a04e:	4b28      	ldr	r3, [pc, #160]	@ (800a0f0 <_strtod_l+0x598>)
 800a050:	460a      	mov	r2, r1
 800a052:	400b      	ands	r3, r1
 800a054:	4927      	ldr	r1, [pc, #156]	@ (800a0f4 <_strtod_l+0x59c>)
 800a056:	428b      	cmp	r3, r1
 800a058:	4682      	mov	sl, r0
 800a05a:	d898      	bhi.n	8009f8e <_strtod_l+0x436>
 800a05c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a060:	428b      	cmp	r3, r1
 800a062:	bf86      	itte	hi
 800a064:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a0f8 <_strtod_l+0x5a0>
 800a068:	f04f 3aff 	movhi.w	sl, #4294967295
 800a06c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a070:	2300      	movs	r3, #0
 800a072:	9308      	str	r3, [sp, #32]
 800a074:	e07a      	b.n	800a16c <_strtod_l+0x614>
 800a076:	07e2      	lsls	r2, r4, #31
 800a078:	d505      	bpl.n	800a086 <_strtod_l+0x52e>
 800a07a:	9b08      	ldr	r3, [sp, #32]
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	f7f6 fac2 	bl	8000608 <__aeabi_dmul>
 800a084:	2301      	movs	r3, #1
 800a086:	9a08      	ldr	r2, [sp, #32]
 800a088:	3208      	adds	r2, #8
 800a08a:	3601      	adds	r6, #1
 800a08c:	1064      	asrs	r4, r4, #1
 800a08e:	9208      	str	r2, [sp, #32]
 800a090:	e7cd      	b.n	800a02e <_strtod_l+0x4d6>
 800a092:	d0ed      	beq.n	800a070 <_strtod_l+0x518>
 800a094:	4264      	negs	r4, r4
 800a096:	f014 020f 	ands.w	r2, r4, #15
 800a09a:	d00a      	beq.n	800a0b2 <_strtod_l+0x55a>
 800a09c:	4b12      	ldr	r3, [pc, #72]	@ (800a0e8 <_strtod_l+0x590>)
 800a09e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	4659      	mov	r1, fp
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 fbd7 	bl	800085c <__aeabi_ddiv>
 800a0ae:	4682      	mov	sl, r0
 800a0b0:	468b      	mov	fp, r1
 800a0b2:	1124      	asrs	r4, r4, #4
 800a0b4:	d0dc      	beq.n	800a070 <_strtod_l+0x518>
 800a0b6:	2c1f      	cmp	r4, #31
 800a0b8:	dd20      	ble.n	800a0fc <_strtod_l+0x5a4>
 800a0ba:	2400      	movs	r4, #0
 800a0bc:	46a0      	mov	r8, r4
 800a0be:	940a      	str	r4, [sp, #40]	@ 0x28
 800a0c0:	46a1      	mov	r9, r4
 800a0c2:	9a05      	ldr	r2, [sp, #20]
 800a0c4:	2322      	movs	r3, #34	@ 0x22
 800a0c6:	f04f 0a00 	mov.w	sl, #0
 800a0ca:	f04f 0b00 	mov.w	fp, #0
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	e768      	b.n	8009fa4 <_strtod_l+0x44c>
 800a0d2:	bf00      	nop
 800a0d4:	0800ba1d 	.word	0x0800ba1d
 800a0d8:	0800bc34 	.word	0x0800bc34
 800a0dc:	0800ba15 	.word	0x0800ba15
 800a0e0:	0800ba4c 	.word	0x0800ba4c
 800a0e4:	0800bddd 	.word	0x0800bddd
 800a0e8:	0800bb68 	.word	0x0800bb68
 800a0ec:	0800bb40 	.word	0x0800bb40
 800a0f0:	7ff00000 	.word	0x7ff00000
 800a0f4:	7ca00000 	.word	0x7ca00000
 800a0f8:	7fefffff 	.word	0x7fefffff
 800a0fc:	f014 0310 	ands.w	r3, r4, #16
 800a100:	bf18      	it	ne
 800a102:	236a      	movne	r3, #106	@ 0x6a
 800a104:	4ea9      	ldr	r6, [pc, #676]	@ (800a3ac <_strtod_l+0x854>)
 800a106:	9308      	str	r3, [sp, #32]
 800a108:	4650      	mov	r0, sl
 800a10a:	4659      	mov	r1, fp
 800a10c:	2300      	movs	r3, #0
 800a10e:	07e2      	lsls	r2, r4, #31
 800a110:	d504      	bpl.n	800a11c <_strtod_l+0x5c4>
 800a112:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a116:	f7f6 fa77 	bl	8000608 <__aeabi_dmul>
 800a11a:	2301      	movs	r3, #1
 800a11c:	1064      	asrs	r4, r4, #1
 800a11e:	f106 0608 	add.w	r6, r6, #8
 800a122:	d1f4      	bne.n	800a10e <_strtod_l+0x5b6>
 800a124:	b10b      	cbz	r3, 800a12a <_strtod_l+0x5d2>
 800a126:	4682      	mov	sl, r0
 800a128:	468b      	mov	fp, r1
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	b1b3      	cbz	r3, 800a15c <_strtod_l+0x604>
 800a12e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a132:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a136:	2b00      	cmp	r3, #0
 800a138:	4659      	mov	r1, fp
 800a13a:	dd0f      	ble.n	800a15c <_strtod_l+0x604>
 800a13c:	2b1f      	cmp	r3, #31
 800a13e:	dd55      	ble.n	800a1ec <_strtod_l+0x694>
 800a140:	2b34      	cmp	r3, #52	@ 0x34
 800a142:	bfde      	ittt	le
 800a144:	f04f 33ff 	movle.w	r3, #4294967295
 800a148:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a14c:	4093      	lslle	r3, r2
 800a14e:	f04f 0a00 	mov.w	sl, #0
 800a152:	bfcc      	ite	gt
 800a154:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a158:	ea03 0b01 	andle.w	fp, r3, r1
 800a15c:	2200      	movs	r2, #0
 800a15e:	2300      	movs	r3, #0
 800a160:	4650      	mov	r0, sl
 800a162:	4659      	mov	r1, fp
 800a164:	f7f6 fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d1a6      	bne.n	800a0ba <_strtod_l+0x562>
 800a16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a172:	9805      	ldr	r0, [sp, #20]
 800a174:	462b      	mov	r3, r5
 800a176:	463a      	mov	r2, r7
 800a178:	f7ff f8c6 	bl	8009308 <__s2b>
 800a17c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a17e:	2800      	cmp	r0, #0
 800a180:	f43f af05 	beq.w	8009f8e <_strtod_l+0x436>
 800a184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a186:	2a00      	cmp	r2, #0
 800a188:	eba9 0308 	sub.w	r3, r9, r8
 800a18c:	bfa8      	it	ge
 800a18e:	2300      	movge	r3, #0
 800a190:	9312      	str	r3, [sp, #72]	@ 0x48
 800a192:	2400      	movs	r4, #0
 800a194:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a198:	9316      	str	r3, [sp, #88]	@ 0x58
 800a19a:	46a0      	mov	r8, r4
 800a19c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a19e:	9805      	ldr	r0, [sp, #20]
 800a1a0:	6859      	ldr	r1, [r3, #4]
 800a1a2:	f7ff f809 	bl	80091b8 <_Balloc>
 800a1a6:	4681      	mov	r9, r0
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f43f aef4 	beq.w	8009f96 <_strtod_l+0x43e>
 800a1ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1b0:	691a      	ldr	r2, [r3, #16]
 800a1b2:	3202      	adds	r2, #2
 800a1b4:	f103 010c 	add.w	r1, r3, #12
 800a1b8:	0092      	lsls	r2, r2, #2
 800a1ba:	300c      	adds	r0, #12
 800a1bc:	f000 fd72 	bl	800aca4 <memcpy>
 800a1c0:	ec4b ab10 	vmov	d0, sl, fp
 800a1c4:	9805      	ldr	r0, [sp, #20]
 800a1c6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a1c8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a1ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a1ce:	f7ff fbd7 	bl	8009980 <__d2b>
 800a1d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	f43f aede 	beq.w	8009f96 <_strtod_l+0x43e>
 800a1da:	9805      	ldr	r0, [sp, #20]
 800a1dc:	2101      	movs	r1, #1
 800a1de:	f7ff f929 	bl	8009434 <__i2b>
 800a1e2:	4680      	mov	r8, r0
 800a1e4:	b948      	cbnz	r0, 800a1fa <_strtod_l+0x6a2>
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	e6d4      	b.n	8009f96 <_strtod_l+0x43e>
 800a1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f4:	ea03 0a0a 	and.w	sl, r3, sl
 800a1f8:	e7b0      	b.n	800a15c <_strtod_l+0x604>
 800a1fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a1fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a1fe:	2d00      	cmp	r5, #0
 800a200:	bfab      	itete	ge
 800a202:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a204:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a206:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a208:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a20a:	bfac      	ite	ge
 800a20c:	18ef      	addge	r7, r5, r3
 800a20e:	1b5e      	sublt	r6, r3, r5
 800a210:	9b08      	ldr	r3, [sp, #32]
 800a212:	1aed      	subs	r5, r5, r3
 800a214:	4415      	add	r5, r2
 800a216:	4b66      	ldr	r3, [pc, #408]	@ (800a3b0 <_strtod_l+0x858>)
 800a218:	3d01      	subs	r5, #1
 800a21a:	429d      	cmp	r5, r3
 800a21c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a220:	da50      	bge.n	800a2c4 <_strtod_l+0x76c>
 800a222:	1b5b      	subs	r3, r3, r5
 800a224:	2b1f      	cmp	r3, #31
 800a226:	eba2 0203 	sub.w	r2, r2, r3
 800a22a:	f04f 0101 	mov.w	r1, #1
 800a22e:	dc3d      	bgt.n	800a2ac <_strtod_l+0x754>
 800a230:	fa01 f303 	lsl.w	r3, r1, r3
 800a234:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a236:	2300      	movs	r3, #0
 800a238:	9310      	str	r3, [sp, #64]	@ 0x40
 800a23a:	18bd      	adds	r5, r7, r2
 800a23c:	9b08      	ldr	r3, [sp, #32]
 800a23e:	42af      	cmp	r7, r5
 800a240:	4416      	add	r6, r2
 800a242:	441e      	add	r6, r3
 800a244:	463b      	mov	r3, r7
 800a246:	bfa8      	it	ge
 800a248:	462b      	movge	r3, r5
 800a24a:	42b3      	cmp	r3, r6
 800a24c:	bfa8      	it	ge
 800a24e:	4633      	movge	r3, r6
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfc2      	ittt	gt
 800a254:	1aed      	subgt	r5, r5, r3
 800a256:	1af6      	subgt	r6, r6, r3
 800a258:	1aff      	subgt	r7, r7, r3
 800a25a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dd16      	ble.n	800a28e <_strtod_l+0x736>
 800a260:	4641      	mov	r1, r8
 800a262:	9805      	ldr	r0, [sp, #20]
 800a264:	461a      	mov	r2, r3
 800a266:	f7ff f9a5 	bl	80095b4 <__pow5mult>
 800a26a:	4680      	mov	r8, r0
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d0ba      	beq.n	800a1e6 <_strtod_l+0x68e>
 800a270:	4601      	mov	r1, r0
 800a272:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a274:	9805      	ldr	r0, [sp, #20]
 800a276:	f7ff f8f3 	bl	8009460 <__multiply>
 800a27a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a27c:	2800      	cmp	r0, #0
 800a27e:	f43f ae8a 	beq.w	8009f96 <_strtod_l+0x43e>
 800a282:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a284:	9805      	ldr	r0, [sp, #20]
 800a286:	f7fe ffd7 	bl	8009238 <_Bfree>
 800a28a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a28c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a28e:	2d00      	cmp	r5, #0
 800a290:	dc1d      	bgt.n	800a2ce <_strtod_l+0x776>
 800a292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd23      	ble.n	800a2e0 <_strtod_l+0x788>
 800a298:	4649      	mov	r1, r9
 800a29a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a29c:	9805      	ldr	r0, [sp, #20]
 800a29e:	f7ff f989 	bl	80095b4 <__pow5mult>
 800a2a2:	4681      	mov	r9, r0
 800a2a4:	b9e0      	cbnz	r0, 800a2e0 <_strtod_l+0x788>
 800a2a6:	f04f 0900 	mov.w	r9, #0
 800a2aa:	e674      	b.n	8009f96 <_strtod_l+0x43e>
 800a2ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a2b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a2b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a2b8:	35e2      	adds	r5, #226	@ 0xe2
 800a2ba:	fa01 f305 	lsl.w	r3, r1, r5
 800a2be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a2c2:	e7ba      	b.n	800a23a <_strtod_l+0x6e2>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a2cc:	e7b5      	b.n	800a23a <_strtod_l+0x6e2>
 800a2ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2d0:	9805      	ldr	r0, [sp, #20]
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	f7ff f9c8 	bl	8009668 <__lshift>
 800a2d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d1d9      	bne.n	800a292 <_strtod_l+0x73a>
 800a2de:	e65a      	b.n	8009f96 <_strtod_l+0x43e>
 800a2e0:	2e00      	cmp	r6, #0
 800a2e2:	dd07      	ble.n	800a2f4 <_strtod_l+0x79c>
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	9805      	ldr	r0, [sp, #20]
 800a2e8:	4632      	mov	r2, r6
 800a2ea:	f7ff f9bd 	bl	8009668 <__lshift>
 800a2ee:	4681      	mov	r9, r0
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	d0d8      	beq.n	800a2a6 <_strtod_l+0x74e>
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	dd08      	ble.n	800a30a <_strtod_l+0x7b2>
 800a2f8:	4641      	mov	r1, r8
 800a2fa:	9805      	ldr	r0, [sp, #20]
 800a2fc:	463a      	mov	r2, r7
 800a2fe:	f7ff f9b3 	bl	8009668 <__lshift>
 800a302:	4680      	mov	r8, r0
 800a304:	2800      	cmp	r0, #0
 800a306:	f43f ae46 	beq.w	8009f96 <_strtod_l+0x43e>
 800a30a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a30c:	9805      	ldr	r0, [sp, #20]
 800a30e:	464a      	mov	r2, r9
 800a310:	f7ff fa32 	bl	8009778 <__mdiff>
 800a314:	4604      	mov	r4, r0
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f ae3d 	beq.w	8009f96 <_strtod_l+0x43e>
 800a31c:	68c3      	ldr	r3, [r0, #12]
 800a31e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a320:	2300      	movs	r3, #0
 800a322:	60c3      	str	r3, [r0, #12]
 800a324:	4641      	mov	r1, r8
 800a326:	f7ff fa0b 	bl	8009740 <__mcmp>
 800a32a:	2800      	cmp	r0, #0
 800a32c:	da46      	bge.n	800a3bc <_strtod_l+0x864>
 800a32e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a330:	ea53 030a 	orrs.w	r3, r3, sl
 800a334:	d16c      	bne.n	800a410 <_strtod_l+0x8b8>
 800a336:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d168      	bne.n	800a410 <_strtod_l+0x8b8>
 800a33e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a342:	0d1b      	lsrs	r3, r3, #20
 800a344:	051b      	lsls	r3, r3, #20
 800a346:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a34a:	d961      	bls.n	800a410 <_strtod_l+0x8b8>
 800a34c:	6963      	ldr	r3, [r4, #20]
 800a34e:	b913      	cbnz	r3, 800a356 <_strtod_l+0x7fe>
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	2b01      	cmp	r3, #1
 800a354:	dd5c      	ble.n	800a410 <_strtod_l+0x8b8>
 800a356:	4621      	mov	r1, r4
 800a358:	2201      	movs	r2, #1
 800a35a:	9805      	ldr	r0, [sp, #20]
 800a35c:	f7ff f984 	bl	8009668 <__lshift>
 800a360:	4641      	mov	r1, r8
 800a362:	4604      	mov	r4, r0
 800a364:	f7ff f9ec 	bl	8009740 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dd51      	ble.n	800a410 <_strtod_l+0x8b8>
 800a36c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a370:	9a08      	ldr	r2, [sp, #32]
 800a372:	0d1b      	lsrs	r3, r3, #20
 800a374:	051b      	lsls	r3, r3, #20
 800a376:	2a00      	cmp	r2, #0
 800a378:	d06b      	beq.n	800a452 <_strtod_l+0x8fa>
 800a37a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a37e:	d868      	bhi.n	800a452 <_strtod_l+0x8fa>
 800a380:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a384:	f67f ae9d 	bls.w	800a0c2 <_strtod_l+0x56a>
 800a388:	4b0a      	ldr	r3, [pc, #40]	@ (800a3b4 <_strtod_l+0x85c>)
 800a38a:	4650      	mov	r0, sl
 800a38c:	4659      	mov	r1, fp
 800a38e:	2200      	movs	r2, #0
 800a390:	f7f6 f93a 	bl	8000608 <__aeabi_dmul>
 800a394:	4b08      	ldr	r3, [pc, #32]	@ (800a3b8 <_strtod_l+0x860>)
 800a396:	400b      	ands	r3, r1
 800a398:	4682      	mov	sl, r0
 800a39a:	468b      	mov	fp, r1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	f47f ae05 	bne.w	8009fac <_strtod_l+0x454>
 800a3a2:	9a05      	ldr	r2, [sp, #20]
 800a3a4:	2322      	movs	r3, #34	@ 0x22
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	e600      	b.n	8009fac <_strtod_l+0x454>
 800a3aa:	bf00      	nop
 800a3ac:	0800bc60 	.word	0x0800bc60
 800a3b0:	fffffc02 	.word	0xfffffc02
 800a3b4:	39500000 	.word	0x39500000
 800a3b8:	7ff00000 	.word	0x7ff00000
 800a3bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a3c0:	d165      	bne.n	800a48e <_strtod_l+0x936>
 800a3c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a3c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3c8:	b35a      	cbz	r2, 800a422 <_strtod_l+0x8ca>
 800a3ca:	4a9f      	ldr	r2, [pc, #636]	@ (800a648 <_strtod_l+0xaf0>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d12b      	bne.n	800a428 <_strtod_l+0x8d0>
 800a3d0:	9b08      	ldr	r3, [sp, #32]
 800a3d2:	4651      	mov	r1, sl
 800a3d4:	b303      	cbz	r3, 800a418 <_strtod_l+0x8c0>
 800a3d6:	4b9d      	ldr	r3, [pc, #628]	@ (800a64c <_strtod_l+0xaf4>)
 800a3d8:	465a      	mov	r2, fp
 800a3da:	4013      	ands	r3, r2
 800a3dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e4:	d81b      	bhi.n	800a41e <_strtod_l+0x8c6>
 800a3e6:	0d1b      	lsrs	r3, r3, #20
 800a3e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f0:	4299      	cmp	r1, r3
 800a3f2:	d119      	bne.n	800a428 <_strtod_l+0x8d0>
 800a3f4:	4b96      	ldr	r3, [pc, #600]	@ (800a650 <_strtod_l+0xaf8>)
 800a3f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d102      	bne.n	800a402 <_strtod_l+0x8aa>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	f43f adca 	beq.w	8009f96 <_strtod_l+0x43e>
 800a402:	4b92      	ldr	r3, [pc, #584]	@ (800a64c <_strtod_l+0xaf4>)
 800a404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a406:	401a      	ands	r2, r3
 800a408:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a40c:	f04f 0a00 	mov.w	sl, #0
 800a410:	9b08      	ldr	r3, [sp, #32]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d1b8      	bne.n	800a388 <_strtod_l+0x830>
 800a416:	e5c9      	b.n	8009fac <_strtod_l+0x454>
 800a418:	f04f 33ff 	mov.w	r3, #4294967295
 800a41c:	e7e8      	b.n	800a3f0 <_strtod_l+0x898>
 800a41e:	4613      	mov	r3, r2
 800a420:	e7e6      	b.n	800a3f0 <_strtod_l+0x898>
 800a422:	ea53 030a 	orrs.w	r3, r3, sl
 800a426:	d0a1      	beq.n	800a36c <_strtod_l+0x814>
 800a428:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a42a:	b1db      	cbz	r3, 800a464 <_strtod_l+0x90c>
 800a42c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a42e:	4213      	tst	r3, r2
 800a430:	d0ee      	beq.n	800a410 <_strtod_l+0x8b8>
 800a432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a434:	9a08      	ldr	r2, [sp, #32]
 800a436:	4650      	mov	r0, sl
 800a438:	4659      	mov	r1, fp
 800a43a:	b1bb      	cbz	r3, 800a46c <_strtod_l+0x914>
 800a43c:	f7ff fb6e 	bl	8009b1c <sulp>
 800a440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a444:	ec53 2b10 	vmov	r2, r3, d0
 800a448:	f7f5 ff28 	bl	800029c <__adddf3>
 800a44c:	4682      	mov	sl, r0
 800a44e:	468b      	mov	fp, r1
 800a450:	e7de      	b.n	800a410 <_strtod_l+0x8b8>
 800a452:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a456:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a45a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a45e:	f04f 3aff 	mov.w	sl, #4294967295
 800a462:	e7d5      	b.n	800a410 <_strtod_l+0x8b8>
 800a464:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a466:	ea13 0f0a 	tst.w	r3, sl
 800a46a:	e7e1      	b.n	800a430 <_strtod_l+0x8d8>
 800a46c:	f7ff fb56 	bl	8009b1c <sulp>
 800a470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a474:	ec53 2b10 	vmov	r2, r3, d0
 800a478:	f7f5 ff0e 	bl	8000298 <__aeabi_dsub>
 800a47c:	2200      	movs	r2, #0
 800a47e:	2300      	movs	r3, #0
 800a480:	4682      	mov	sl, r0
 800a482:	468b      	mov	fp, r1
 800a484:	f7f6 fb28 	bl	8000ad8 <__aeabi_dcmpeq>
 800a488:	2800      	cmp	r0, #0
 800a48a:	d0c1      	beq.n	800a410 <_strtod_l+0x8b8>
 800a48c:	e619      	b.n	800a0c2 <_strtod_l+0x56a>
 800a48e:	4641      	mov	r1, r8
 800a490:	4620      	mov	r0, r4
 800a492:	f7ff facd 	bl	8009a30 <__ratio>
 800a496:	ec57 6b10 	vmov	r6, r7, d0
 800a49a:	2200      	movs	r2, #0
 800a49c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	4639      	mov	r1, r7
 800a4a4:	f7f6 fb2c 	bl	8000b00 <__aeabi_dcmple>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d06f      	beq.n	800a58c <_strtod_l+0xa34>
 800a4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d17a      	bne.n	800a5a8 <_strtod_l+0xa50>
 800a4b2:	f1ba 0f00 	cmp.w	sl, #0
 800a4b6:	d158      	bne.n	800a56a <_strtod_l+0xa12>
 800a4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d15a      	bne.n	800a578 <_strtod_l+0xa20>
 800a4c2:	4b64      	ldr	r3, [pc, #400]	@ (800a654 <_strtod_l+0xafc>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	4639      	mov	r1, r7
 800a4ca:	f7f6 fb0f 	bl	8000aec <__aeabi_dcmplt>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d159      	bne.n	800a586 <_strtod_l+0xa2e>
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	4639      	mov	r1, r7
 800a4d6:	4b60      	ldr	r3, [pc, #384]	@ (800a658 <_strtod_l+0xb00>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f7f6 f895 	bl	8000608 <__aeabi_dmul>
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a4e6:	9606      	str	r6, [sp, #24]
 800a4e8:	9307      	str	r3, [sp, #28]
 800a4ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4ee:	4d57      	ldr	r5, [pc, #348]	@ (800a64c <_strtod_l+0xaf4>)
 800a4f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f6:	401d      	ands	r5, r3
 800a4f8:	4b58      	ldr	r3, [pc, #352]	@ (800a65c <_strtod_l+0xb04>)
 800a4fa:	429d      	cmp	r5, r3
 800a4fc:	f040 80b2 	bne.w	800a664 <_strtod_l+0xb0c>
 800a500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a502:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a506:	ec4b ab10 	vmov	d0, sl, fp
 800a50a:	f7ff f9c9 	bl	80098a0 <__ulp>
 800a50e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a512:	ec51 0b10 	vmov	r0, r1, d0
 800a516:	f7f6 f877 	bl	8000608 <__aeabi_dmul>
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	f7f5 febd 	bl	800029c <__adddf3>
 800a522:	460b      	mov	r3, r1
 800a524:	4949      	ldr	r1, [pc, #292]	@ (800a64c <_strtod_l+0xaf4>)
 800a526:	4a4e      	ldr	r2, [pc, #312]	@ (800a660 <_strtod_l+0xb08>)
 800a528:	4019      	ands	r1, r3
 800a52a:	4291      	cmp	r1, r2
 800a52c:	4682      	mov	sl, r0
 800a52e:	d942      	bls.n	800a5b6 <_strtod_l+0xa5e>
 800a530:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a532:	4b47      	ldr	r3, [pc, #284]	@ (800a650 <_strtod_l+0xaf8>)
 800a534:	429a      	cmp	r2, r3
 800a536:	d103      	bne.n	800a540 <_strtod_l+0x9e8>
 800a538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a53a:	3301      	adds	r3, #1
 800a53c:	f43f ad2b 	beq.w	8009f96 <_strtod_l+0x43e>
 800a540:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a650 <_strtod_l+0xaf8>
 800a544:	f04f 3aff 	mov.w	sl, #4294967295
 800a548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a54a:	9805      	ldr	r0, [sp, #20]
 800a54c:	f7fe fe74 	bl	8009238 <_Bfree>
 800a550:	9805      	ldr	r0, [sp, #20]
 800a552:	4649      	mov	r1, r9
 800a554:	f7fe fe70 	bl	8009238 <_Bfree>
 800a558:	9805      	ldr	r0, [sp, #20]
 800a55a:	4641      	mov	r1, r8
 800a55c:	f7fe fe6c 	bl	8009238 <_Bfree>
 800a560:	9805      	ldr	r0, [sp, #20]
 800a562:	4621      	mov	r1, r4
 800a564:	f7fe fe68 	bl	8009238 <_Bfree>
 800a568:	e618      	b.n	800a19c <_strtod_l+0x644>
 800a56a:	f1ba 0f01 	cmp.w	sl, #1
 800a56e:	d103      	bne.n	800a578 <_strtod_l+0xa20>
 800a570:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a572:	2b00      	cmp	r3, #0
 800a574:	f43f ada5 	beq.w	800a0c2 <_strtod_l+0x56a>
 800a578:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a628 <_strtod_l+0xad0>
 800a57c:	4f35      	ldr	r7, [pc, #212]	@ (800a654 <_strtod_l+0xafc>)
 800a57e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a582:	2600      	movs	r6, #0
 800a584:	e7b1      	b.n	800a4ea <_strtod_l+0x992>
 800a586:	4f34      	ldr	r7, [pc, #208]	@ (800a658 <_strtod_l+0xb00>)
 800a588:	2600      	movs	r6, #0
 800a58a:	e7aa      	b.n	800a4e2 <_strtod_l+0x98a>
 800a58c:	4b32      	ldr	r3, [pc, #200]	@ (800a658 <_strtod_l+0xb00>)
 800a58e:	4630      	mov	r0, r6
 800a590:	4639      	mov	r1, r7
 800a592:	2200      	movs	r2, #0
 800a594:	f7f6 f838 	bl	8000608 <__aeabi_dmul>
 800a598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a59a:	4606      	mov	r6, r0
 800a59c:	460f      	mov	r7, r1
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d09f      	beq.n	800a4e2 <_strtod_l+0x98a>
 800a5a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a5a6:	e7a0      	b.n	800a4ea <_strtod_l+0x992>
 800a5a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a630 <_strtod_l+0xad8>
 800a5ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a5b0:	ec57 6b17 	vmov	r6, r7, d7
 800a5b4:	e799      	b.n	800a4ea <_strtod_l+0x992>
 800a5b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a5ba:	9b08      	ldr	r3, [sp, #32]
 800a5bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1c1      	bne.n	800a548 <_strtod_l+0x9f0>
 800a5c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5c8:	0d1b      	lsrs	r3, r3, #20
 800a5ca:	051b      	lsls	r3, r3, #20
 800a5cc:	429d      	cmp	r5, r3
 800a5ce:	d1bb      	bne.n	800a548 <_strtod_l+0x9f0>
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	4639      	mov	r1, r7
 800a5d4:	f7f6 fb78 	bl	8000cc8 <__aeabi_d2lz>
 800a5d8:	f7f5 ffe8 	bl	80005ac <__aeabi_l2d>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a5f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a5f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5f6:	ea46 060a 	orr.w	r6, r6, sl
 800a5fa:	431e      	orrs	r6, r3
 800a5fc:	d06f      	beq.n	800a6de <_strtod_l+0xb86>
 800a5fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800a638 <_strtod_l+0xae0>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	f7f6 fa72 	bl	8000aec <__aeabi_dcmplt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	f47f accf 	bne.w	8009fac <_strtod_l+0x454>
 800a60e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a640 <_strtod_l+0xae8>)
 800a610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a618:	f7f6 fa86 	bl	8000b28 <__aeabi_dcmpgt>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d093      	beq.n	800a548 <_strtod_l+0x9f0>
 800a620:	e4c4      	b.n	8009fac <_strtod_l+0x454>
 800a622:	bf00      	nop
 800a624:	f3af 8000 	nop.w
 800a628:	00000000 	.word	0x00000000
 800a62c:	bff00000 	.word	0xbff00000
 800a630:	00000000 	.word	0x00000000
 800a634:	3ff00000 	.word	0x3ff00000
 800a638:	94a03595 	.word	0x94a03595
 800a63c:	3fdfffff 	.word	0x3fdfffff
 800a640:	35afe535 	.word	0x35afe535
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	000fffff 	.word	0x000fffff
 800a64c:	7ff00000 	.word	0x7ff00000
 800a650:	7fefffff 	.word	0x7fefffff
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	7fe00000 	.word	0x7fe00000
 800a660:	7c9fffff 	.word	0x7c9fffff
 800a664:	9b08      	ldr	r3, [sp, #32]
 800a666:	b323      	cbz	r3, 800a6b2 <_strtod_l+0xb5a>
 800a668:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a66c:	d821      	bhi.n	800a6b2 <_strtod_l+0xb5a>
 800a66e:	a328      	add	r3, pc, #160	@ (adr r3, 800a710 <_strtod_l+0xbb8>)
 800a670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	f7f6 fa42 	bl	8000b00 <__aeabi_dcmple>
 800a67c:	b1a0      	cbz	r0, 800a6a8 <_strtod_l+0xb50>
 800a67e:	4639      	mov	r1, r7
 800a680:	4630      	mov	r0, r6
 800a682:	f7f6 fa99 	bl	8000bb8 <__aeabi_d2uiz>
 800a686:	2801      	cmp	r0, #1
 800a688:	bf38      	it	cc
 800a68a:	2001      	movcc	r0, #1
 800a68c:	f7f5 ff42 	bl	8000514 <__aeabi_ui2d>
 800a690:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a692:	4606      	mov	r6, r0
 800a694:	460f      	mov	r7, r1
 800a696:	b9fb      	cbnz	r3, 800a6d8 <_strtod_l+0xb80>
 800a698:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a69c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a69e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a6a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a6a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a6a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a6aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a6ae:	1b5b      	subs	r3, r3, r5
 800a6b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a6b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a6b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a6ba:	f7ff f8f1 	bl	80098a0 <__ulp>
 800a6be:	4650      	mov	r0, sl
 800a6c0:	ec53 2b10 	vmov	r2, r3, d0
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	f7f5 ff9f 	bl	8000608 <__aeabi_dmul>
 800a6ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a6ce:	f7f5 fde5 	bl	800029c <__adddf3>
 800a6d2:	4682      	mov	sl, r0
 800a6d4:	468b      	mov	fp, r1
 800a6d6:	e770      	b.n	800a5ba <_strtod_l+0xa62>
 800a6d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a6dc:	e7e0      	b.n	800a6a0 <_strtod_l+0xb48>
 800a6de:	a30e      	add	r3, pc, #56	@ (adr r3, 800a718 <_strtod_l+0xbc0>)
 800a6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e4:	f7f6 fa02 	bl	8000aec <__aeabi_dcmplt>
 800a6e8:	e798      	b.n	800a61c <_strtod_l+0xac4>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a6f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	f7ff ba6d 	b.w	8009bd2 <_strtod_l+0x7a>
 800a6f8:	2a65      	cmp	r2, #101	@ 0x65
 800a6fa:	f43f ab66 	beq.w	8009dca <_strtod_l+0x272>
 800a6fe:	2a45      	cmp	r2, #69	@ 0x45
 800a700:	f43f ab63 	beq.w	8009dca <_strtod_l+0x272>
 800a704:	2301      	movs	r3, #1
 800a706:	f7ff bb9e 	b.w	8009e46 <_strtod_l+0x2ee>
 800a70a:	bf00      	nop
 800a70c:	f3af 8000 	nop.w
 800a710:	ffc00000 	.word	0xffc00000
 800a714:	41dfffff 	.word	0x41dfffff
 800a718:	94a03595 	.word	0x94a03595
 800a71c:	3fcfffff 	.word	0x3fcfffff

0800a720 <_strtod_r>:
 800a720:	4b01      	ldr	r3, [pc, #4]	@ (800a728 <_strtod_r+0x8>)
 800a722:	f7ff ba19 	b.w	8009b58 <_strtod_l>
 800a726:	bf00      	nop
 800a728:	2000006c 	.word	0x2000006c

0800a72c <_strtol_l.constprop.0>:
 800a72c:	2b24      	cmp	r3, #36	@ 0x24
 800a72e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a732:	4686      	mov	lr, r0
 800a734:	4690      	mov	r8, r2
 800a736:	d801      	bhi.n	800a73c <_strtol_l.constprop.0+0x10>
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d106      	bne.n	800a74a <_strtol_l.constprop.0+0x1e>
 800a73c:	f7fd fdbc 	bl	80082b8 <__errno>
 800a740:	2316      	movs	r3, #22
 800a742:	6003      	str	r3, [r0, #0]
 800a744:	2000      	movs	r0, #0
 800a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a74a:	4834      	ldr	r0, [pc, #208]	@ (800a81c <_strtol_l.constprop.0+0xf0>)
 800a74c:	460d      	mov	r5, r1
 800a74e:	462a      	mov	r2, r5
 800a750:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a754:	5d06      	ldrb	r6, [r0, r4]
 800a756:	f016 0608 	ands.w	r6, r6, #8
 800a75a:	d1f8      	bne.n	800a74e <_strtol_l.constprop.0+0x22>
 800a75c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a75e:	d12d      	bne.n	800a7bc <_strtol_l.constprop.0+0x90>
 800a760:	782c      	ldrb	r4, [r5, #0]
 800a762:	2601      	movs	r6, #1
 800a764:	1c95      	adds	r5, r2, #2
 800a766:	f033 0210 	bics.w	r2, r3, #16
 800a76a:	d109      	bne.n	800a780 <_strtol_l.constprop.0+0x54>
 800a76c:	2c30      	cmp	r4, #48	@ 0x30
 800a76e:	d12a      	bne.n	800a7c6 <_strtol_l.constprop.0+0x9a>
 800a770:	782a      	ldrb	r2, [r5, #0]
 800a772:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a776:	2a58      	cmp	r2, #88	@ 0x58
 800a778:	d125      	bne.n	800a7c6 <_strtol_l.constprop.0+0x9a>
 800a77a:	786c      	ldrb	r4, [r5, #1]
 800a77c:	2310      	movs	r3, #16
 800a77e:	3502      	adds	r5, #2
 800a780:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a784:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a788:	2200      	movs	r2, #0
 800a78a:	fbbc f9f3 	udiv	r9, ip, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	fb03 ca19 	mls	sl, r3, r9, ip
 800a794:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a798:	2f09      	cmp	r7, #9
 800a79a:	d81b      	bhi.n	800a7d4 <_strtol_l.constprop.0+0xa8>
 800a79c:	463c      	mov	r4, r7
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	dd27      	ble.n	800a7f2 <_strtol_l.constprop.0+0xc6>
 800a7a2:	1c57      	adds	r7, r2, #1
 800a7a4:	d007      	beq.n	800a7b6 <_strtol_l.constprop.0+0x8a>
 800a7a6:	4581      	cmp	r9, r0
 800a7a8:	d320      	bcc.n	800a7ec <_strtol_l.constprop.0+0xc0>
 800a7aa:	d101      	bne.n	800a7b0 <_strtol_l.constprop.0+0x84>
 800a7ac:	45a2      	cmp	sl, r4
 800a7ae:	db1d      	blt.n	800a7ec <_strtol_l.constprop.0+0xc0>
 800a7b0:	fb00 4003 	mla	r0, r0, r3, r4
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7ba:	e7eb      	b.n	800a794 <_strtol_l.constprop.0+0x68>
 800a7bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7be:	bf04      	itt	eq
 800a7c0:	782c      	ldrbeq	r4, [r5, #0]
 800a7c2:	1c95      	addeq	r5, r2, #2
 800a7c4:	e7cf      	b.n	800a766 <_strtol_l.constprop.0+0x3a>
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1da      	bne.n	800a780 <_strtol_l.constprop.0+0x54>
 800a7ca:	2c30      	cmp	r4, #48	@ 0x30
 800a7cc:	bf0c      	ite	eq
 800a7ce:	2308      	moveq	r3, #8
 800a7d0:	230a      	movne	r3, #10
 800a7d2:	e7d5      	b.n	800a780 <_strtol_l.constprop.0+0x54>
 800a7d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a7d8:	2f19      	cmp	r7, #25
 800a7da:	d801      	bhi.n	800a7e0 <_strtol_l.constprop.0+0xb4>
 800a7dc:	3c37      	subs	r4, #55	@ 0x37
 800a7de:	e7de      	b.n	800a79e <_strtol_l.constprop.0+0x72>
 800a7e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a7e4:	2f19      	cmp	r7, #25
 800a7e6:	d804      	bhi.n	800a7f2 <_strtol_l.constprop.0+0xc6>
 800a7e8:	3c57      	subs	r4, #87	@ 0x57
 800a7ea:	e7d8      	b.n	800a79e <_strtol_l.constprop.0+0x72>
 800a7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f0:	e7e1      	b.n	800a7b6 <_strtol_l.constprop.0+0x8a>
 800a7f2:	1c53      	adds	r3, r2, #1
 800a7f4:	d108      	bne.n	800a808 <_strtol_l.constprop.0+0xdc>
 800a7f6:	2322      	movs	r3, #34	@ 0x22
 800a7f8:	f8ce 3000 	str.w	r3, [lr]
 800a7fc:	4660      	mov	r0, ip
 800a7fe:	f1b8 0f00 	cmp.w	r8, #0
 800a802:	d0a0      	beq.n	800a746 <_strtol_l.constprop.0+0x1a>
 800a804:	1e69      	subs	r1, r5, #1
 800a806:	e006      	b.n	800a816 <_strtol_l.constprop.0+0xea>
 800a808:	b106      	cbz	r6, 800a80c <_strtol_l.constprop.0+0xe0>
 800a80a:	4240      	negs	r0, r0
 800a80c:	f1b8 0f00 	cmp.w	r8, #0
 800a810:	d099      	beq.n	800a746 <_strtol_l.constprop.0+0x1a>
 800a812:	2a00      	cmp	r2, #0
 800a814:	d1f6      	bne.n	800a804 <_strtol_l.constprop.0+0xd8>
 800a816:	f8c8 1000 	str.w	r1, [r8]
 800a81a:	e794      	b.n	800a746 <_strtol_l.constprop.0+0x1a>
 800a81c:	0800bc89 	.word	0x0800bc89

0800a820 <_strtol_r>:
 800a820:	f7ff bf84 	b.w	800a72c <_strtol_l.constprop.0>

0800a824 <__ssputs_r>:
 800a824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a828:	688e      	ldr	r6, [r1, #8]
 800a82a:	461f      	mov	r7, r3
 800a82c:	42be      	cmp	r6, r7
 800a82e:	680b      	ldr	r3, [r1, #0]
 800a830:	4682      	mov	sl, r0
 800a832:	460c      	mov	r4, r1
 800a834:	4690      	mov	r8, r2
 800a836:	d82d      	bhi.n	800a894 <__ssputs_r+0x70>
 800a838:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a83c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a840:	d026      	beq.n	800a890 <__ssputs_r+0x6c>
 800a842:	6965      	ldr	r5, [r4, #20]
 800a844:	6909      	ldr	r1, [r1, #16]
 800a846:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a84a:	eba3 0901 	sub.w	r9, r3, r1
 800a84e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a852:	1c7b      	adds	r3, r7, #1
 800a854:	444b      	add	r3, r9
 800a856:	106d      	asrs	r5, r5, #1
 800a858:	429d      	cmp	r5, r3
 800a85a:	bf38      	it	cc
 800a85c:	461d      	movcc	r5, r3
 800a85e:	0553      	lsls	r3, r2, #21
 800a860:	d527      	bpl.n	800a8b2 <__ssputs_r+0x8e>
 800a862:	4629      	mov	r1, r5
 800a864:	f7fe fc1c 	bl	80090a0 <_malloc_r>
 800a868:	4606      	mov	r6, r0
 800a86a:	b360      	cbz	r0, 800a8c6 <__ssputs_r+0xa2>
 800a86c:	6921      	ldr	r1, [r4, #16]
 800a86e:	464a      	mov	r2, r9
 800a870:	f000 fa18 	bl	800aca4 <memcpy>
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a87a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	6126      	str	r6, [r4, #16]
 800a882:	6165      	str	r5, [r4, #20]
 800a884:	444e      	add	r6, r9
 800a886:	eba5 0509 	sub.w	r5, r5, r9
 800a88a:	6026      	str	r6, [r4, #0]
 800a88c:	60a5      	str	r5, [r4, #8]
 800a88e:	463e      	mov	r6, r7
 800a890:	42be      	cmp	r6, r7
 800a892:	d900      	bls.n	800a896 <__ssputs_r+0x72>
 800a894:	463e      	mov	r6, r7
 800a896:	6820      	ldr	r0, [r4, #0]
 800a898:	4632      	mov	r2, r6
 800a89a:	4641      	mov	r1, r8
 800a89c:	f000 f9c6 	bl	800ac2c <memmove>
 800a8a0:	68a3      	ldr	r3, [r4, #8]
 800a8a2:	1b9b      	subs	r3, r3, r6
 800a8a4:	60a3      	str	r3, [r4, #8]
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	4433      	add	r3, r6
 800a8aa:	6023      	str	r3, [r4, #0]
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b2:	462a      	mov	r2, r5
 800a8b4:	f000 fd89 	bl	800b3ca <_realloc_r>
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	2800      	cmp	r0, #0
 800a8bc:	d1e0      	bne.n	800a880 <__ssputs_r+0x5c>
 800a8be:	6921      	ldr	r1, [r4, #16]
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	f7fe fb79 	bl	8008fb8 <_free_r>
 800a8c6:	230c      	movs	r3, #12
 800a8c8:	f8ca 3000 	str.w	r3, [sl]
 800a8cc:	89a3      	ldrh	r3, [r4, #12]
 800a8ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	e7e9      	b.n	800a8ae <__ssputs_r+0x8a>
	...

0800a8dc <_svfiprintf_r>:
 800a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	4698      	mov	r8, r3
 800a8e2:	898b      	ldrh	r3, [r1, #12]
 800a8e4:	061b      	lsls	r3, r3, #24
 800a8e6:	b09d      	sub	sp, #116	@ 0x74
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	d510      	bpl.n	800a912 <_svfiprintf_r+0x36>
 800a8f0:	690b      	ldr	r3, [r1, #16]
 800a8f2:	b973      	cbnz	r3, 800a912 <_svfiprintf_r+0x36>
 800a8f4:	2140      	movs	r1, #64	@ 0x40
 800a8f6:	f7fe fbd3 	bl	80090a0 <_malloc_r>
 800a8fa:	6028      	str	r0, [r5, #0]
 800a8fc:	6128      	str	r0, [r5, #16]
 800a8fe:	b930      	cbnz	r0, 800a90e <_svfiprintf_r+0x32>
 800a900:	230c      	movs	r3, #12
 800a902:	603b      	str	r3, [r7, #0]
 800a904:	f04f 30ff 	mov.w	r0, #4294967295
 800a908:	b01d      	add	sp, #116	@ 0x74
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	2340      	movs	r3, #64	@ 0x40
 800a910:	616b      	str	r3, [r5, #20]
 800a912:	2300      	movs	r3, #0
 800a914:	9309      	str	r3, [sp, #36]	@ 0x24
 800a916:	2320      	movs	r3, #32
 800a918:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a91c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a920:	2330      	movs	r3, #48	@ 0x30
 800a922:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aac0 <_svfiprintf_r+0x1e4>
 800a926:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a92a:	f04f 0901 	mov.w	r9, #1
 800a92e:	4623      	mov	r3, r4
 800a930:	469a      	mov	sl, r3
 800a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a936:	b10a      	cbz	r2, 800a93c <_svfiprintf_r+0x60>
 800a938:	2a25      	cmp	r2, #37	@ 0x25
 800a93a:	d1f9      	bne.n	800a930 <_svfiprintf_r+0x54>
 800a93c:	ebba 0b04 	subs.w	fp, sl, r4
 800a940:	d00b      	beq.n	800a95a <_svfiprintf_r+0x7e>
 800a942:	465b      	mov	r3, fp
 800a944:	4622      	mov	r2, r4
 800a946:	4629      	mov	r1, r5
 800a948:	4638      	mov	r0, r7
 800a94a:	f7ff ff6b 	bl	800a824 <__ssputs_r>
 800a94e:	3001      	adds	r0, #1
 800a950:	f000 80a7 	beq.w	800aaa2 <_svfiprintf_r+0x1c6>
 800a954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a956:	445a      	add	r2, fp
 800a958:	9209      	str	r2, [sp, #36]	@ 0x24
 800a95a:	f89a 3000 	ldrb.w	r3, [sl]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 809f 	beq.w	800aaa2 <_svfiprintf_r+0x1c6>
 800a964:	2300      	movs	r3, #0
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a96e:	f10a 0a01 	add.w	sl, sl, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	9307      	str	r3, [sp, #28]
 800a976:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a97a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a97c:	4654      	mov	r4, sl
 800a97e:	2205      	movs	r2, #5
 800a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a984:	484e      	ldr	r0, [pc, #312]	@ (800aac0 <_svfiprintf_r+0x1e4>)
 800a986:	f7f5 fc2b 	bl	80001e0 <memchr>
 800a98a:	9a04      	ldr	r2, [sp, #16]
 800a98c:	b9d8      	cbnz	r0, 800a9c6 <_svfiprintf_r+0xea>
 800a98e:	06d0      	lsls	r0, r2, #27
 800a990:	bf44      	itt	mi
 800a992:	2320      	movmi	r3, #32
 800a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a998:	0711      	lsls	r1, r2, #28
 800a99a:	bf44      	itt	mi
 800a99c:	232b      	movmi	r3, #43	@ 0x2b
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9a8:	d015      	beq.n	800a9d6 <_svfiprintf_r+0xfa>
 800a9aa:	9a07      	ldr	r2, [sp, #28]
 800a9ac:	4654      	mov	r4, sl
 800a9ae:	2000      	movs	r0, #0
 800a9b0:	f04f 0c0a 	mov.w	ip, #10
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ba:	3b30      	subs	r3, #48	@ 0x30
 800a9bc:	2b09      	cmp	r3, #9
 800a9be:	d94b      	bls.n	800aa58 <_svfiprintf_r+0x17c>
 800a9c0:	b1b0      	cbz	r0, 800a9f0 <_svfiprintf_r+0x114>
 800a9c2:	9207      	str	r2, [sp, #28]
 800a9c4:	e014      	b.n	800a9f0 <_svfiprintf_r+0x114>
 800a9c6:	eba0 0308 	sub.w	r3, r0, r8
 800a9ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	9304      	str	r3, [sp, #16]
 800a9d2:	46a2      	mov	sl, r4
 800a9d4:	e7d2      	b.n	800a97c <_svfiprintf_r+0xa0>
 800a9d6:	9b03      	ldr	r3, [sp, #12]
 800a9d8:	1d19      	adds	r1, r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	9103      	str	r1, [sp, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bfbb      	ittet	lt
 800a9e2:	425b      	neglt	r3, r3
 800a9e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9e8:	9307      	strge	r3, [sp, #28]
 800a9ea:	9307      	strlt	r3, [sp, #28]
 800a9ec:	bfb8      	it	lt
 800a9ee:	9204      	strlt	r2, [sp, #16]
 800a9f0:	7823      	ldrb	r3, [r4, #0]
 800a9f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9f4:	d10a      	bne.n	800aa0c <_svfiprintf_r+0x130>
 800a9f6:	7863      	ldrb	r3, [r4, #1]
 800a9f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9fa:	d132      	bne.n	800aa62 <_svfiprintf_r+0x186>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	1d1a      	adds	r2, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	9203      	str	r2, [sp, #12]
 800aa04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa08:	3402      	adds	r4, #2
 800aa0a:	9305      	str	r3, [sp, #20]
 800aa0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aad0 <_svfiprintf_r+0x1f4>
 800aa10:	7821      	ldrb	r1, [r4, #0]
 800aa12:	2203      	movs	r2, #3
 800aa14:	4650      	mov	r0, sl
 800aa16:	f7f5 fbe3 	bl	80001e0 <memchr>
 800aa1a:	b138      	cbz	r0, 800aa2c <_svfiprintf_r+0x150>
 800aa1c:	9b04      	ldr	r3, [sp, #16]
 800aa1e:	eba0 000a 	sub.w	r0, r0, sl
 800aa22:	2240      	movs	r2, #64	@ 0x40
 800aa24:	4082      	lsls	r2, r0
 800aa26:	4313      	orrs	r3, r2
 800aa28:	3401      	adds	r4, #1
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa30:	4824      	ldr	r0, [pc, #144]	@ (800aac4 <_svfiprintf_r+0x1e8>)
 800aa32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa36:	2206      	movs	r2, #6
 800aa38:	f7f5 fbd2 	bl	80001e0 <memchr>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d036      	beq.n	800aaae <_svfiprintf_r+0x1d2>
 800aa40:	4b21      	ldr	r3, [pc, #132]	@ (800aac8 <_svfiprintf_r+0x1ec>)
 800aa42:	bb1b      	cbnz	r3, 800aa8c <_svfiprintf_r+0x1b0>
 800aa44:	9b03      	ldr	r3, [sp, #12]
 800aa46:	3307      	adds	r3, #7
 800aa48:	f023 0307 	bic.w	r3, r3, #7
 800aa4c:	3308      	adds	r3, #8
 800aa4e:	9303      	str	r3, [sp, #12]
 800aa50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa52:	4433      	add	r3, r6
 800aa54:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa56:	e76a      	b.n	800a92e <_svfiprintf_r+0x52>
 800aa58:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa5c:	460c      	mov	r4, r1
 800aa5e:	2001      	movs	r0, #1
 800aa60:	e7a8      	b.n	800a9b4 <_svfiprintf_r+0xd8>
 800aa62:	2300      	movs	r3, #0
 800aa64:	3401      	adds	r4, #1
 800aa66:	9305      	str	r3, [sp, #20]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f04f 0c0a 	mov.w	ip, #10
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa74:	3a30      	subs	r2, #48	@ 0x30
 800aa76:	2a09      	cmp	r2, #9
 800aa78:	d903      	bls.n	800aa82 <_svfiprintf_r+0x1a6>
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0c6      	beq.n	800aa0c <_svfiprintf_r+0x130>
 800aa7e:	9105      	str	r1, [sp, #20]
 800aa80:	e7c4      	b.n	800aa0c <_svfiprintf_r+0x130>
 800aa82:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa86:	4604      	mov	r4, r0
 800aa88:	2301      	movs	r3, #1
 800aa8a:	e7f0      	b.n	800aa6e <_svfiprintf_r+0x192>
 800aa8c:	ab03      	add	r3, sp, #12
 800aa8e:	9300      	str	r3, [sp, #0]
 800aa90:	462a      	mov	r2, r5
 800aa92:	4b0e      	ldr	r3, [pc, #56]	@ (800aacc <_svfiprintf_r+0x1f0>)
 800aa94:	a904      	add	r1, sp, #16
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7fc fc96 	bl	80073c8 <_printf_float>
 800aa9c:	1c42      	adds	r2, r0, #1
 800aa9e:	4606      	mov	r6, r0
 800aaa0:	d1d6      	bne.n	800aa50 <_svfiprintf_r+0x174>
 800aaa2:	89ab      	ldrh	r3, [r5, #12]
 800aaa4:	065b      	lsls	r3, r3, #25
 800aaa6:	f53f af2d 	bmi.w	800a904 <_svfiprintf_r+0x28>
 800aaaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aaac:	e72c      	b.n	800a908 <_svfiprintf_r+0x2c>
 800aaae:	ab03      	add	r3, sp, #12
 800aab0:	9300      	str	r3, [sp, #0]
 800aab2:	462a      	mov	r2, r5
 800aab4:	4b05      	ldr	r3, [pc, #20]	@ (800aacc <_svfiprintf_r+0x1f0>)
 800aab6:	a904      	add	r1, sp, #16
 800aab8:	4638      	mov	r0, r7
 800aaba:	f7fc ff1d 	bl	80078f8 <_printf_i>
 800aabe:	e7ed      	b.n	800aa9c <_svfiprintf_r+0x1c0>
 800aac0:	0800bd89 	.word	0x0800bd89
 800aac4:	0800bd93 	.word	0x0800bd93
 800aac8:	080073c9 	.word	0x080073c9
 800aacc:	0800a825 	.word	0x0800a825
 800aad0:	0800bd8f 	.word	0x0800bd8f

0800aad4 <__sflush_r>:
 800aad4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aadc:	0716      	lsls	r6, r2, #28
 800aade:	4605      	mov	r5, r0
 800aae0:	460c      	mov	r4, r1
 800aae2:	d454      	bmi.n	800ab8e <__sflush_r+0xba>
 800aae4:	684b      	ldr	r3, [r1, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	dc02      	bgt.n	800aaf0 <__sflush_r+0x1c>
 800aaea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dd48      	ble.n	800ab82 <__sflush_r+0xae>
 800aaf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d045      	beq.n	800ab82 <__sflush_r+0xae>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aafc:	682f      	ldr	r7, [r5, #0]
 800aafe:	6a21      	ldr	r1, [r4, #32]
 800ab00:	602b      	str	r3, [r5, #0]
 800ab02:	d030      	beq.n	800ab66 <__sflush_r+0x92>
 800ab04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	0759      	lsls	r1, r3, #29
 800ab0a:	d505      	bpl.n	800ab18 <__sflush_r+0x44>
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	1ad2      	subs	r2, r2, r3
 800ab10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab12:	b10b      	cbz	r3, 800ab18 <__sflush_r+0x44>
 800ab14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab16:	1ad2      	subs	r2, r2, r3
 800ab18:	2300      	movs	r3, #0
 800ab1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab1c:	6a21      	ldr	r1, [r4, #32]
 800ab1e:	4628      	mov	r0, r5
 800ab20:	47b0      	blx	r6
 800ab22:	1c43      	adds	r3, r0, #1
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	d106      	bne.n	800ab36 <__sflush_r+0x62>
 800ab28:	6829      	ldr	r1, [r5, #0]
 800ab2a:	291d      	cmp	r1, #29
 800ab2c:	d82b      	bhi.n	800ab86 <__sflush_r+0xb2>
 800ab2e:	4a2a      	ldr	r2, [pc, #168]	@ (800abd8 <__sflush_r+0x104>)
 800ab30:	410a      	asrs	r2, r1
 800ab32:	07d6      	lsls	r6, r2, #31
 800ab34:	d427      	bmi.n	800ab86 <__sflush_r+0xb2>
 800ab36:	2200      	movs	r2, #0
 800ab38:	6062      	str	r2, [r4, #4]
 800ab3a:	04d9      	lsls	r1, r3, #19
 800ab3c:	6922      	ldr	r2, [r4, #16]
 800ab3e:	6022      	str	r2, [r4, #0]
 800ab40:	d504      	bpl.n	800ab4c <__sflush_r+0x78>
 800ab42:	1c42      	adds	r2, r0, #1
 800ab44:	d101      	bne.n	800ab4a <__sflush_r+0x76>
 800ab46:	682b      	ldr	r3, [r5, #0]
 800ab48:	b903      	cbnz	r3, 800ab4c <__sflush_r+0x78>
 800ab4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab4e:	602f      	str	r7, [r5, #0]
 800ab50:	b1b9      	cbz	r1, 800ab82 <__sflush_r+0xae>
 800ab52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab56:	4299      	cmp	r1, r3
 800ab58:	d002      	beq.n	800ab60 <__sflush_r+0x8c>
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	f7fe fa2c 	bl	8008fb8 <_free_r>
 800ab60:	2300      	movs	r3, #0
 800ab62:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab64:	e00d      	b.n	800ab82 <__sflush_r+0xae>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4628      	mov	r0, r5
 800ab6a:	47b0      	blx	r6
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	1c50      	adds	r0, r2, #1
 800ab70:	d1c9      	bne.n	800ab06 <__sflush_r+0x32>
 800ab72:	682b      	ldr	r3, [r5, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d0c6      	beq.n	800ab06 <__sflush_r+0x32>
 800ab78:	2b1d      	cmp	r3, #29
 800ab7a:	d001      	beq.n	800ab80 <__sflush_r+0xac>
 800ab7c:	2b16      	cmp	r3, #22
 800ab7e:	d11e      	bne.n	800abbe <__sflush_r+0xea>
 800ab80:	602f      	str	r7, [r5, #0]
 800ab82:	2000      	movs	r0, #0
 800ab84:	e022      	b.n	800abcc <__sflush_r+0xf8>
 800ab86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab8a:	b21b      	sxth	r3, r3
 800ab8c:	e01b      	b.n	800abc6 <__sflush_r+0xf2>
 800ab8e:	690f      	ldr	r7, [r1, #16]
 800ab90:	2f00      	cmp	r7, #0
 800ab92:	d0f6      	beq.n	800ab82 <__sflush_r+0xae>
 800ab94:	0793      	lsls	r3, r2, #30
 800ab96:	680e      	ldr	r6, [r1, #0]
 800ab98:	bf08      	it	eq
 800ab9a:	694b      	ldreq	r3, [r1, #20]
 800ab9c:	600f      	str	r7, [r1, #0]
 800ab9e:	bf18      	it	ne
 800aba0:	2300      	movne	r3, #0
 800aba2:	eba6 0807 	sub.w	r8, r6, r7
 800aba6:	608b      	str	r3, [r1, #8]
 800aba8:	f1b8 0f00 	cmp.w	r8, #0
 800abac:	dde9      	ble.n	800ab82 <__sflush_r+0xae>
 800abae:	6a21      	ldr	r1, [r4, #32]
 800abb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800abb2:	4643      	mov	r3, r8
 800abb4:	463a      	mov	r2, r7
 800abb6:	4628      	mov	r0, r5
 800abb8:	47b0      	blx	r6
 800abba:	2800      	cmp	r0, #0
 800abbc:	dc08      	bgt.n	800abd0 <__sflush_r+0xfc>
 800abbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	f04f 30ff 	mov.w	r0, #4294967295
 800abcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd0:	4407      	add	r7, r0
 800abd2:	eba8 0800 	sub.w	r8, r8, r0
 800abd6:	e7e7      	b.n	800aba8 <__sflush_r+0xd4>
 800abd8:	dfbffffe 	.word	0xdfbffffe

0800abdc <_fflush_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	690b      	ldr	r3, [r1, #16]
 800abe0:	4605      	mov	r5, r0
 800abe2:	460c      	mov	r4, r1
 800abe4:	b913      	cbnz	r3, 800abec <_fflush_r+0x10>
 800abe6:	2500      	movs	r5, #0
 800abe8:	4628      	mov	r0, r5
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	b118      	cbz	r0, 800abf6 <_fflush_r+0x1a>
 800abee:	6a03      	ldr	r3, [r0, #32]
 800abf0:	b90b      	cbnz	r3, 800abf6 <_fflush_r+0x1a>
 800abf2:	f7fd fa41 	bl	8008078 <__sinit>
 800abf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0f3      	beq.n	800abe6 <_fflush_r+0xa>
 800abfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac00:	07d0      	lsls	r0, r2, #31
 800ac02:	d404      	bmi.n	800ac0e <_fflush_r+0x32>
 800ac04:	0599      	lsls	r1, r3, #22
 800ac06:	d402      	bmi.n	800ac0e <_fflush_r+0x32>
 800ac08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac0a:	f7fd fb80 	bl	800830e <__retarget_lock_acquire_recursive>
 800ac0e:	4628      	mov	r0, r5
 800ac10:	4621      	mov	r1, r4
 800ac12:	f7ff ff5f 	bl	800aad4 <__sflush_r>
 800ac16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac18:	07da      	lsls	r2, r3, #31
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	d4e4      	bmi.n	800abe8 <_fflush_r+0xc>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	059b      	lsls	r3, r3, #22
 800ac22:	d4e1      	bmi.n	800abe8 <_fflush_r+0xc>
 800ac24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac26:	f7fd fb73 	bl	8008310 <__retarget_lock_release_recursive>
 800ac2a:	e7dd      	b.n	800abe8 <_fflush_r+0xc>

0800ac2c <memmove>:
 800ac2c:	4288      	cmp	r0, r1
 800ac2e:	b510      	push	{r4, lr}
 800ac30:	eb01 0402 	add.w	r4, r1, r2
 800ac34:	d902      	bls.n	800ac3c <memmove+0x10>
 800ac36:	4284      	cmp	r4, r0
 800ac38:	4623      	mov	r3, r4
 800ac3a:	d807      	bhi.n	800ac4c <memmove+0x20>
 800ac3c:	1e43      	subs	r3, r0, #1
 800ac3e:	42a1      	cmp	r1, r4
 800ac40:	d008      	beq.n	800ac54 <memmove+0x28>
 800ac42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac46:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac4a:	e7f8      	b.n	800ac3e <memmove+0x12>
 800ac4c:	4402      	add	r2, r0
 800ac4e:	4601      	mov	r1, r0
 800ac50:	428a      	cmp	r2, r1
 800ac52:	d100      	bne.n	800ac56 <memmove+0x2a>
 800ac54:	bd10      	pop	{r4, pc}
 800ac56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac5e:	e7f7      	b.n	800ac50 <memmove+0x24>

0800ac60 <strncmp>:
 800ac60:	b510      	push	{r4, lr}
 800ac62:	b16a      	cbz	r2, 800ac80 <strncmp+0x20>
 800ac64:	3901      	subs	r1, #1
 800ac66:	1884      	adds	r4, r0, r2
 800ac68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d103      	bne.n	800ac7c <strncmp+0x1c>
 800ac74:	42a0      	cmp	r0, r4
 800ac76:	d001      	beq.n	800ac7c <strncmp+0x1c>
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	d1f5      	bne.n	800ac68 <strncmp+0x8>
 800ac7c:	1ad0      	subs	r0, r2, r3
 800ac7e:	bd10      	pop	{r4, pc}
 800ac80:	4610      	mov	r0, r2
 800ac82:	e7fc      	b.n	800ac7e <strncmp+0x1e>

0800ac84 <_sbrk_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d06      	ldr	r5, [pc, #24]	@ (800aca0 <_sbrk_r+0x1c>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	602b      	str	r3, [r5, #0]
 800ac90:	f7f6 fe50 	bl	8001934 <_sbrk>
 800ac94:	1c43      	adds	r3, r0, #1
 800ac96:	d102      	bne.n	800ac9e <_sbrk_r+0x1a>
 800ac98:	682b      	ldr	r3, [r5, #0]
 800ac9a:	b103      	cbz	r3, 800ac9e <_sbrk_r+0x1a>
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	bd38      	pop	{r3, r4, r5, pc}
 800aca0:	20000514 	.word	0x20000514

0800aca4 <memcpy>:
 800aca4:	440a      	add	r2, r1
 800aca6:	4291      	cmp	r1, r2
 800aca8:	f100 33ff 	add.w	r3, r0, #4294967295
 800acac:	d100      	bne.n	800acb0 <memcpy+0xc>
 800acae:	4770      	bx	lr
 800acb0:	b510      	push	{r4, lr}
 800acb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acba:	4291      	cmp	r1, r2
 800acbc:	d1f9      	bne.n	800acb2 <memcpy+0xe>
 800acbe:	bd10      	pop	{r4, pc}

0800acc0 <nan>:
 800acc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800acc8 <nan+0x8>
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	00000000 	.word	0x00000000
 800accc:	7ff80000 	.word	0x7ff80000

0800acd0 <__assert_func>:
 800acd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acd2:	4614      	mov	r4, r2
 800acd4:	461a      	mov	r2, r3
 800acd6:	4b09      	ldr	r3, [pc, #36]	@ (800acfc <__assert_func+0x2c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4605      	mov	r5, r0
 800acdc:	68d8      	ldr	r0, [r3, #12]
 800acde:	b954      	cbnz	r4, 800acf6 <__assert_func+0x26>
 800ace0:	4b07      	ldr	r3, [pc, #28]	@ (800ad00 <__assert_func+0x30>)
 800ace2:	461c      	mov	r4, r3
 800ace4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ace8:	9100      	str	r1, [sp, #0]
 800acea:	462b      	mov	r3, r5
 800acec:	4905      	ldr	r1, [pc, #20]	@ (800ad04 <__assert_func+0x34>)
 800acee:	f000 fba7 	bl	800b440 <fiprintf>
 800acf2:	f000 fbb7 	bl	800b464 <abort>
 800acf6:	4b04      	ldr	r3, [pc, #16]	@ (800ad08 <__assert_func+0x38>)
 800acf8:	e7f4      	b.n	800ace4 <__assert_func+0x14>
 800acfa:	bf00      	nop
 800acfc:	2000001c 	.word	0x2000001c
 800ad00:	0800bddd 	.word	0x0800bddd
 800ad04:	0800bdaf 	.word	0x0800bdaf
 800ad08:	0800bda2 	.word	0x0800bda2

0800ad0c <_calloc_r>:
 800ad0c:	b570      	push	{r4, r5, r6, lr}
 800ad0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ad12:	b93c      	cbnz	r4, 800ad24 <_calloc_r+0x18>
 800ad14:	4629      	mov	r1, r5
 800ad16:	f7fe f9c3 	bl	80090a0 <_malloc_r>
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	b928      	cbnz	r0, 800ad2a <_calloc_r+0x1e>
 800ad1e:	2600      	movs	r6, #0
 800ad20:	4630      	mov	r0, r6
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	220c      	movs	r2, #12
 800ad26:	6002      	str	r2, [r0, #0]
 800ad28:	e7f9      	b.n	800ad1e <_calloc_r+0x12>
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	f7fd fa70 	bl	8008212 <memset>
 800ad32:	e7f5      	b.n	800ad20 <_calloc_r+0x14>

0800ad34 <rshift>:
 800ad34:	6903      	ldr	r3, [r0, #16]
 800ad36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ad3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ad42:	f100 0414 	add.w	r4, r0, #20
 800ad46:	dd45      	ble.n	800add4 <rshift+0xa0>
 800ad48:	f011 011f 	ands.w	r1, r1, #31
 800ad4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ad50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ad54:	d10c      	bne.n	800ad70 <rshift+0x3c>
 800ad56:	f100 0710 	add.w	r7, r0, #16
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	42b1      	cmp	r1, r6
 800ad5e:	d334      	bcc.n	800adca <rshift+0x96>
 800ad60:	1a9b      	subs	r3, r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	1eea      	subs	r2, r5, #3
 800ad66:	4296      	cmp	r6, r2
 800ad68:	bf38      	it	cc
 800ad6a:	2300      	movcc	r3, #0
 800ad6c:	4423      	add	r3, r4
 800ad6e:	e015      	b.n	800ad9c <rshift+0x68>
 800ad70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ad74:	f1c1 0820 	rsb	r8, r1, #32
 800ad78:	40cf      	lsrs	r7, r1
 800ad7a:	f105 0e04 	add.w	lr, r5, #4
 800ad7e:	46a1      	mov	r9, r4
 800ad80:	4576      	cmp	r6, lr
 800ad82:	46f4      	mov	ip, lr
 800ad84:	d815      	bhi.n	800adb2 <rshift+0x7e>
 800ad86:	1a9a      	subs	r2, r3, r2
 800ad88:	0092      	lsls	r2, r2, #2
 800ad8a:	3a04      	subs	r2, #4
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	42ae      	cmp	r6, r5
 800ad90:	bf38      	it	cc
 800ad92:	2200      	movcc	r2, #0
 800ad94:	18a3      	adds	r3, r4, r2
 800ad96:	50a7      	str	r7, [r4, r2]
 800ad98:	b107      	cbz	r7, 800ad9c <rshift+0x68>
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	1b1a      	subs	r2, r3, r4
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ada4:	bf08      	it	eq
 800ada6:	2300      	moveq	r3, #0
 800ada8:	6102      	str	r2, [r0, #16]
 800adaa:	bf08      	it	eq
 800adac:	6143      	streq	r3, [r0, #20]
 800adae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adb2:	f8dc c000 	ldr.w	ip, [ip]
 800adb6:	fa0c fc08 	lsl.w	ip, ip, r8
 800adba:	ea4c 0707 	orr.w	r7, ip, r7
 800adbe:	f849 7b04 	str.w	r7, [r9], #4
 800adc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800adc6:	40cf      	lsrs	r7, r1
 800adc8:	e7da      	b.n	800ad80 <rshift+0x4c>
 800adca:	f851 cb04 	ldr.w	ip, [r1], #4
 800adce:	f847 cf04 	str.w	ip, [r7, #4]!
 800add2:	e7c3      	b.n	800ad5c <rshift+0x28>
 800add4:	4623      	mov	r3, r4
 800add6:	e7e1      	b.n	800ad9c <rshift+0x68>

0800add8 <__hexdig_fun>:
 800add8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800addc:	2b09      	cmp	r3, #9
 800adde:	d802      	bhi.n	800ade6 <__hexdig_fun+0xe>
 800ade0:	3820      	subs	r0, #32
 800ade2:	b2c0      	uxtb	r0, r0
 800ade4:	4770      	bx	lr
 800ade6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800adea:	2b05      	cmp	r3, #5
 800adec:	d801      	bhi.n	800adf2 <__hexdig_fun+0x1a>
 800adee:	3847      	subs	r0, #71	@ 0x47
 800adf0:	e7f7      	b.n	800ade2 <__hexdig_fun+0xa>
 800adf2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800adf6:	2b05      	cmp	r3, #5
 800adf8:	d801      	bhi.n	800adfe <__hexdig_fun+0x26>
 800adfa:	3827      	subs	r0, #39	@ 0x27
 800adfc:	e7f1      	b.n	800ade2 <__hexdig_fun+0xa>
 800adfe:	2000      	movs	r0, #0
 800ae00:	4770      	bx	lr
	...

0800ae04 <__gethex>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	b085      	sub	sp, #20
 800ae0a:	468a      	mov	sl, r1
 800ae0c:	9302      	str	r3, [sp, #8]
 800ae0e:	680b      	ldr	r3, [r1, #0]
 800ae10:	9001      	str	r0, [sp, #4]
 800ae12:	4690      	mov	r8, r2
 800ae14:	1c9c      	adds	r4, r3, #2
 800ae16:	46a1      	mov	r9, r4
 800ae18:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ae1c:	2830      	cmp	r0, #48	@ 0x30
 800ae1e:	d0fa      	beq.n	800ae16 <__gethex+0x12>
 800ae20:	eba9 0303 	sub.w	r3, r9, r3
 800ae24:	f1a3 0b02 	sub.w	fp, r3, #2
 800ae28:	f7ff ffd6 	bl	800add8 <__hexdig_fun>
 800ae2c:	4605      	mov	r5, r0
 800ae2e:	2800      	cmp	r0, #0
 800ae30:	d168      	bne.n	800af04 <__gethex+0x100>
 800ae32:	49a0      	ldr	r1, [pc, #640]	@ (800b0b4 <__gethex+0x2b0>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	4648      	mov	r0, r9
 800ae38:	f7ff ff12 	bl	800ac60 <strncmp>
 800ae3c:	4607      	mov	r7, r0
 800ae3e:	2800      	cmp	r0, #0
 800ae40:	d167      	bne.n	800af12 <__gethex+0x10e>
 800ae42:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ae46:	4626      	mov	r6, r4
 800ae48:	f7ff ffc6 	bl	800add8 <__hexdig_fun>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	d062      	beq.n	800af16 <__gethex+0x112>
 800ae50:	4623      	mov	r3, r4
 800ae52:	7818      	ldrb	r0, [r3, #0]
 800ae54:	2830      	cmp	r0, #48	@ 0x30
 800ae56:	4699      	mov	r9, r3
 800ae58:	f103 0301 	add.w	r3, r3, #1
 800ae5c:	d0f9      	beq.n	800ae52 <__gethex+0x4e>
 800ae5e:	f7ff ffbb 	bl	800add8 <__hexdig_fun>
 800ae62:	fab0 f580 	clz	r5, r0
 800ae66:	096d      	lsrs	r5, r5, #5
 800ae68:	f04f 0b01 	mov.w	fp, #1
 800ae6c:	464a      	mov	r2, r9
 800ae6e:	4616      	mov	r6, r2
 800ae70:	3201      	adds	r2, #1
 800ae72:	7830      	ldrb	r0, [r6, #0]
 800ae74:	f7ff ffb0 	bl	800add8 <__hexdig_fun>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d1f8      	bne.n	800ae6e <__gethex+0x6a>
 800ae7c:	498d      	ldr	r1, [pc, #564]	@ (800b0b4 <__gethex+0x2b0>)
 800ae7e:	2201      	movs	r2, #1
 800ae80:	4630      	mov	r0, r6
 800ae82:	f7ff feed 	bl	800ac60 <strncmp>
 800ae86:	2800      	cmp	r0, #0
 800ae88:	d13f      	bne.n	800af0a <__gethex+0x106>
 800ae8a:	b944      	cbnz	r4, 800ae9e <__gethex+0x9a>
 800ae8c:	1c74      	adds	r4, r6, #1
 800ae8e:	4622      	mov	r2, r4
 800ae90:	4616      	mov	r6, r2
 800ae92:	3201      	adds	r2, #1
 800ae94:	7830      	ldrb	r0, [r6, #0]
 800ae96:	f7ff ff9f 	bl	800add8 <__hexdig_fun>
 800ae9a:	2800      	cmp	r0, #0
 800ae9c:	d1f8      	bne.n	800ae90 <__gethex+0x8c>
 800ae9e:	1ba4      	subs	r4, r4, r6
 800aea0:	00a7      	lsls	r7, r4, #2
 800aea2:	7833      	ldrb	r3, [r6, #0]
 800aea4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aea8:	2b50      	cmp	r3, #80	@ 0x50
 800aeaa:	d13e      	bne.n	800af2a <__gethex+0x126>
 800aeac:	7873      	ldrb	r3, [r6, #1]
 800aeae:	2b2b      	cmp	r3, #43	@ 0x2b
 800aeb0:	d033      	beq.n	800af1a <__gethex+0x116>
 800aeb2:	2b2d      	cmp	r3, #45	@ 0x2d
 800aeb4:	d034      	beq.n	800af20 <__gethex+0x11c>
 800aeb6:	1c71      	adds	r1, r6, #1
 800aeb8:	2400      	movs	r4, #0
 800aeba:	7808      	ldrb	r0, [r1, #0]
 800aebc:	f7ff ff8c 	bl	800add8 <__hexdig_fun>
 800aec0:	1e43      	subs	r3, r0, #1
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b18      	cmp	r3, #24
 800aec6:	d830      	bhi.n	800af2a <__gethex+0x126>
 800aec8:	f1a0 0210 	sub.w	r2, r0, #16
 800aecc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aed0:	f7ff ff82 	bl	800add8 <__hexdig_fun>
 800aed4:	f100 3cff 	add.w	ip, r0, #4294967295
 800aed8:	fa5f fc8c 	uxtb.w	ip, ip
 800aedc:	f1bc 0f18 	cmp.w	ip, #24
 800aee0:	f04f 030a 	mov.w	r3, #10
 800aee4:	d91e      	bls.n	800af24 <__gethex+0x120>
 800aee6:	b104      	cbz	r4, 800aeea <__gethex+0xe6>
 800aee8:	4252      	negs	r2, r2
 800aeea:	4417      	add	r7, r2
 800aeec:	f8ca 1000 	str.w	r1, [sl]
 800aef0:	b1ed      	cbz	r5, 800af2e <__gethex+0x12a>
 800aef2:	f1bb 0f00 	cmp.w	fp, #0
 800aef6:	bf0c      	ite	eq
 800aef8:	2506      	moveq	r5, #6
 800aefa:	2500      	movne	r5, #0
 800aefc:	4628      	mov	r0, r5
 800aefe:	b005      	add	sp, #20
 800af00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af04:	2500      	movs	r5, #0
 800af06:	462c      	mov	r4, r5
 800af08:	e7b0      	b.n	800ae6c <__gethex+0x68>
 800af0a:	2c00      	cmp	r4, #0
 800af0c:	d1c7      	bne.n	800ae9e <__gethex+0x9a>
 800af0e:	4627      	mov	r7, r4
 800af10:	e7c7      	b.n	800aea2 <__gethex+0x9e>
 800af12:	464e      	mov	r6, r9
 800af14:	462f      	mov	r7, r5
 800af16:	2501      	movs	r5, #1
 800af18:	e7c3      	b.n	800aea2 <__gethex+0x9e>
 800af1a:	2400      	movs	r4, #0
 800af1c:	1cb1      	adds	r1, r6, #2
 800af1e:	e7cc      	b.n	800aeba <__gethex+0xb6>
 800af20:	2401      	movs	r4, #1
 800af22:	e7fb      	b.n	800af1c <__gethex+0x118>
 800af24:	fb03 0002 	mla	r0, r3, r2, r0
 800af28:	e7ce      	b.n	800aec8 <__gethex+0xc4>
 800af2a:	4631      	mov	r1, r6
 800af2c:	e7de      	b.n	800aeec <__gethex+0xe8>
 800af2e:	eba6 0309 	sub.w	r3, r6, r9
 800af32:	3b01      	subs	r3, #1
 800af34:	4629      	mov	r1, r5
 800af36:	2b07      	cmp	r3, #7
 800af38:	dc0a      	bgt.n	800af50 <__gethex+0x14c>
 800af3a:	9801      	ldr	r0, [sp, #4]
 800af3c:	f7fe f93c 	bl	80091b8 <_Balloc>
 800af40:	4604      	mov	r4, r0
 800af42:	b940      	cbnz	r0, 800af56 <__gethex+0x152>
 800af44:	4b5c      	ldr	r3, [pc, #368]	@ (800b0b8 <__gethex+0x2b4>)
 800af46:	4602      	mov	r2, r0
 800af48:	21e4      	movs	r1, #228	@ 0xe4
 800af4a:	485c      	ldr	r0, [pc, #368]	@ (800b0bc <__gethex+0x2b8>)
 800af4c:	f7ff fec0 	bl	800acd0 <__assert_func>
 800af50:	3101      	adds	r1, #1
 800af52:	105b      	asrs	r3, r3, #1
 800af54:	e7ef      	b.n	800af36 <__gethex+0x132>
 800af56:	f100 0a14 	add.w	sl, r0, #20
 800af5a:	2300      	movs	r3, #0
 800af5c:	4655      	mov	r5, sl
 800af5e:	469b      	mov	fp, r3
 800af60:	45b1      	cmp	r9, r6
 800af62:	d337      	bcc.n	800afd4 <__gethex+0x1d0>
 800af64:	f845 bb04 	str.w	fp, [r5], #4
 800af68:	eba5 050a 	sub.w	r5, r5, sl
 800af6c:	10ad      	asrs	r5, r5, #2
 800af6e:	6125      	str	r5, [r4, #16]
 800af70:	4658      	mov	r0, fp
 800af72:	f7fe fa13 	bl	800939c <__hi0bits>
 800af76:	016d      	lsls	r5, r5, #5
 800af78:	f8d8 6000 	ldr.w	r6, [r8]
 800af7c:	1a2d      	subs	r5, r5, r0
 800af7e:	42b5      	cmp	r5, r6
 800af80:	dd54      	ble.n	800b02c <__gethex+0x228>
 800af82:	1bad      	subs	r5, r5, r6
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	f7fe fda7 	bl	8009ada <__any_on>
 800af8c:	4681      	mov	r9, r0
 800af8e:	b178      	cbz	r0, 800afb0 <__gethex+0x1ac>
 800af90:	1e6b      	subs	r3, r5, #1
 800af92:	1159      	asrs	r1, r3, #5
 800af94:	f003 021f 	and.w	r2, r3, #31
 800af98:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800af9c:	f04f 0901 	mov.w	r9, #1
 800afa0:	fa09 f202 	lsl.w	r2, r9, r2
 800afa4:	420a      	tst	r2, r1
 800afa6:	d003      	beq.n	800afb0 <__gethex+0x1ac>
 800afa8:	454b      	cmp	r3, r9
 800afaa:	dc36      	bgt.n	800b01a <__gethex+0x216>
 800afac:	f04f 0902 	mov.w	r9, #2
 800afb0:	4629      	mov	r1, r5
 800afb2:	4620      	mov	r0, r4
 800afb4:	f7ff febe 	bl	800ad34 <rshift>
 800afb8:	442f      	add	r7, r5
 800afba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afbe:	42bb      	cmp	r3, r7
 800afc0:	da42      	bge.n	800b048 <__gethex+0x244>
 800afc2:	9801      	ldr	r0, [sp, #4]
 800afc4:	4621      	mov	r1, r4
 800afc6:	f7fe f937 	bl	8009238 <_Bfree>
 800afca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afcc:	2300      	movs	r3, #0
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	25a3      	movs	r5, #163	@ 0xa3
 800afd2:	e793      	b.n	800aefc <__gethex+0xf8>
 800afd4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800afd8:	2a2e      	cmp	r2, #46	@ 0x2e
 800afda:	d012      	beq.n	800b002 <__gethex+0x1fe>
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d104      	bne.n	800afea <__gethex+0x1e6>
 800afe0:	f845 bb04 	str.w	fp, [r5], #4
 800afe4:	f04f 0b00 	mov.w	fp, #0
 800afe8:	465b      	mov	r3, fp
 800afea:	7830      	ldrb	r0, [r6, #0]
 800afec:	9303      	str	r3, [sp, #12]
 800afee:	f7ff fef3 	bl	800add8 <__hexdig_fun>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	f000 000f 	and.w	r0, r0, #15
 800aff8:	4098      	lsls	r0, r3
 800affa:	ea4b 0b00 	orr.w	fp, fp, r0
 800affe:	3304      	adds	r3, #4
 800b000:	e7ae      	b.n	800af60 <__gethex+0x15c>
 800b002:	45b1      	cmp	r9, r6
 800b004:	d8ea      	bhi.n	800afdc <__gethex+0x1d8>
 800b006:	492b      	ldr	r1, [pc, #172]	@ (800b0b4 <__gethex+0x2b0>)
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	2201      	movs	r2, #1
 800b00c:	4630      	mov	r0, r6
 800b00e:	f7ff fe27 	bl	800ac60 <strncmp>
 800b012:	9b03      	ldr	r3, [sp, #12]
 800b014:	2800      	cmp	r0, #0
 800b016:	d1e1      	bne.n	800afdc <__gethex+0x1d8>
 800b018:	e7a2      	b.n	800af60 <__gethex+0x15c>
 800b01a:	1ea9      	subs	r1, r5, #2
 800b01c:	4620      	mov	r0, r4
 800b01e:	f7fe fd5c 	bl	8009ada <__any_on>
 800b022:	2800      	cmp	r0, #0
 800b024:	d0c2      	beq.n	800afac <__gethex+0x1a8>
 800b026:	f04f 0903 	mov.w	r9, #3
 800b02a:	e7c1      	b.n	800afb0 <__gethex+0x1ac>
 800b02c:	da09      	bge.n	800b042 <__gethex+0x23e>
 800b02e:	1b75      	subs	r5, r6, r5
 800b030:	4621      	mov	r1, r4
 800b032:	9801      	ldr	r0, [sp, #4]
 800b034:	462a      	mov	r2, r5
 800b036:	f7fe fb17 	bl	8009668 <__lshift>
 800b03a:	1b7f      	subs	r7, r7, r5
 800b03c:	4604      	mov	r4, r0
 800b03e:	f100 0a14 	add.w	sl, r0, #20
 800b042:	f04f 0900 	mov.w	r9, #0
 800b046:	e7b8      	b.n	800afba <__gethex+0x1b6>
 800b048:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b04c:	42bd      	cmp	r5, r7
 800b04e:	dd6f      	ble.n	800b130 <__gethex+0x32c>
 800b050:	1bed      	subs	r5, r5, r7
 800b052:	42ae      	cmp	r6, r5
 800b054:	dc34      	bgt.n	800b0c0 <__gethex+0x2bc>
 800b056:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d022      	beq.n	800b0a4 <__gethex+0x2a0>
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d024      	beq.n	800b0ac <__gethex+0x2a8>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d115      	bne.n	800b092 <__gethex+0x28e>
 800b066:	42ae      	cmp	r6, r5
 800b068:	d113      	bne.n	800b092 <__gethex+0x28e>
 800b06a:	2e01      	cmp	r6, #1
 800b06c:	d10b      	bne.n	800b086 <__gethex+0x282>
 800b06e:	9a02      	ldr	r2, [sp, #8]
 800b070:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	2301      	movs	r3, #1
 800b078:	6123      	str	r3, [r4, #16]
 800b07a:	f8ca 3000 	str.w	r3, [sl]
 800b07e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b080:	2562      	movs	r5, #98	@ 0x62
 800b082:	601c      	str	r4, [r3, #0]
 800b084:	e73a      	b.n	800aefc <__gethex+0xf8>
 800b086:	1e71      	subs	r1, r6, #1
 800b088:	4620      	mov	r0, r4
 800b08a:	f7fe fd26 	bl	8009ada <__any_on>
 800b08e:	2800      	cmp	r0, #0
 800b090:	d1ed      	bne.n	800b06e <__gethex+0x26a>
 800b092:	9801      	ldr	r0, [sp, #4]
 800b094:	4621      	mov	r1, r4
 800b096:	f7fe f8cf 	bl	8009238 <_Bfree>
 800b09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b09c:	2300      	movs	r3, #0
 800b09e:	6013      	str	r3, [r2, #0]
 800b0a0:	2550      	movs	r5, #80	@ 0x50
 800b0a2:	e72b      	b.n	800aefc <__gethex+0xf8>
 800b0a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f3      	bne.n	800b092 <__gethex+0x28e>
 800b0aa:	e7e0      	b.n	800b06e <__gethex+0x26a>
 800b0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d1dd      	bne.n	800b06e <__gethex+0x26a>
 800b0b2:	e7ee      	b.n	800b092 <__gethex+0x28e>
 800b0b4:	0800bc30 	.word	0x0800bc30
 800b0b8:	0800bac5 	.word	0x0800bac5
 800b0bc:	0800bdde 	.word	0x0800bdde
 800b0c0:	1e6f      	subs	r7, r5, #1
 800b0c2:	f1b9 0f00 	cmp.w	r9, #0
 800b0c6:	d130      	bne.n	800b12a <__gethex+0x326>
 800b0c8:	b127      	cbz	r7, 800b0d4 <__gethex+0x2d0>
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7fe fd04 	bl	8009ada <__any_on>
 800b0d2:	4681      	mov	r9, r0
 800b0d4:	117a      	asrs	r2, r7, #5
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b0dc:	f007 071f 	and.w	r7, r7, #31
 800b0e0:	40bb      	lsls	r3, r7
 800b0e2:	4213      	tst	r3, r2
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	4620      	mov	r0, r4
 800b0e8:	bf18      	it	ne
 800b0ea:	f049 0902 	orrne.w	r9, r9, #2
 800b0ee:	f7ff fe21 	bl	800ad34 <rshift>
 800b0f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b0f6:	1b76      	subs	r6, r6, r5
 800b0f8:	2502      	movs	r5, #2
 800b0fa:	f1b9 0f00 	cmp.w	r9, #0
 800b0fe:	d047      	beq.n	800b190 <__gethex+0x38c>
 800b100:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b104:	2b02      	cmp	r3, #2
 800b106:	d015      	beq.n	800b134 <__gethex+0x330>
 800b108:	2b03      	cmp	r3, #3
 800b10a:	d017      	beq.n	800b13c <__gethex+0x338>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d109      	bne.n	800b124 <__gethex+0x320>
 800b110:	f019 0f02 	tst.w	r9, #2
 800b114:	d006      	beq.n	800b124 <__gethex+0x320>
 800b116:	f8da 3000 	ldr.w	r3, [sl]
 800b11a:	ea49 0903 	orr.w	r9, r9, r3
 800b11e:	f019 0f01 	tst.w	r9, #1
 800b122:	d10e      	bne.n	800b142 <__gethex+0x33e>
 800b124:	f045 0510 	orr.w	r5, r5, #16
 800b128:	e032      	b.n	800b190 <__gethex+0x38c>
 800b12a:	f04f 0901 	mov.w	r9, #1
 800b12e:	e7d1      	b.n	800b0d4 <__gethex+0x2d0>
 800b130:	2501      	movs	r5, #1
 800b132:	e7e2      	b.n	800b0fa <__gethex+0x2f6>
 800b134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b136:	f1c3 0301 	rsb	r3, r3, #1
 800b13a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0f0      	beq.n	800b124 <__gethex+0x320>
 800b142:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b146:	f104 0314 	add.w	r3, r4, #20
 800b14a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b14e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b152:	f04f 0c00 	mov.w	ip, #0
 800b156:	4618      	mov	r0, r3
 800b158:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b160:	d01b      	beq.n	800b19a <__gethex+0x396>
 800b162:	3201      	adds	r2, #1
 800b164:	6002      	str	r2, [r0, #0]
 800b166:	2d02      	cmp	r5, #2
 800b168:	f104 0314 	add.w	r3, r4, #20
 800b16c:	d13c      	bne.n	800b1e8 <__gethex+0x3e4>
 800b16e:	f8d8 2000 	ldr.w	r2, [r8]
 800b172:	3a01      	subs	r2, #1
 800b174:	42b2      	cmp	r2, r6
 800b176:	d109      	bne.n	800b18c <__gethex+0x388>
 800b178:	1171      	asrs	r1, r6, #5
 800b17a:	2201      	movs	r2, #1
 800b17c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b180:	f006 061f 	and.w	r6, r6, #31
 800b184:	fa02 f606 	lsl.w	r6, r2, r6
 800b188:	421e      	tst	r6, r3
 800b18a:	d13a      	bne.n	800b202 <__gethex+0x3fe>
 800b18c:	f045 0520 	orr.w	r5, r5, #32
 800b190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b192:	601c      	str	r4, [r3, #0]
 800b194:	9b02      	ldr	r3, [sp, #8]
 800b196:	601f      	str	r7, [r3, #0]
 800b198:	e6b0      	b.n	800aefc <__gethex+0xf8>
 800b19a:	4299      	cmp	r1, r3
 800b19c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b1a0:	d8d9      	bhi.n	800b156 <__gethex+0x352>
 800b1a2:	68a3      	ldr	r3, [r4, #8]
 800b1a4:	459b      	cmp	fp, r3
 800b1a6:	db17      	blt.n	800b1d8 <__gethex+0x3d4>
 800b1a8:	6861      	ldr	r1, [r4, #4]
 800b1aa:	9801      	ldr	r0, [sp, #4]
 800b1ac:	3101      	adds	r1, #1
 800b1ae:	f7fe f803 	bl	80091b8 <_Balloc>
 800b1b2:	4681      	mov	r9, r0
 800b1b4:	b918      	cbnz	r0, 800b1be <__gethex+0x3ba>
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	@ (800b220 <__gethex+0x41c>)
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	2184      	movs	r1, #132	@ 0x84
 800b1bc:	e6c5      	b.n	800af4a <__gethex+0x146>
 800b1be:	6922      	ldr	r2, [r4, #16]
 800b1c0:	3202      	adds	r2, #2
 800b1c2:	f104 010c 	add.w	r1, r4, #12
 800b1c6:	0092      	lsls	r2, r2, #2
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	f7ff fd6b 	bl	800aca4 <memcpy>
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	9801      	ldr	r0, [sp, #4]
 800b1d2:	f7fe f831 	bl	8009238 <_Bfree>
 800b1d6:	464c      	mov	r4, r9
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	1c5a      	adds	r2, r3, #1
 800b1dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b1e0:	6122      	str	r2, [r4, #16]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	615a      	str	r2, [r3, #20]
 800b1e6:	e7be      	b.n	800b166 <__gethex+0x362>
 800b1e8:	6922      	ldr	r2, [r4, #16]
 800b1ea:	455a      	cmp	r2, fp
 800b1ec:	dd0b      	ble.n	800b206 <__gethex+0x402>
 800b1ee:	2101      	movs	r1, #1
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f7ff fd9f 	bl	800ad34 <rshift>
 800b1f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b1fa:	3701      	adds	r7, #1
 800b1fc:	42bb      	cmp	r3, r7
 800b1fe:	f6ff aee0 	blt.w	800afc2 <__gethex+0x1be>
 800b202:	2501      	movs	r5, #1
 800b204:	e7c2      	b.n	800b18c <__gethex+0x388>
 800b206:	f016 061f 	ands.w	r6, r6, #31
 800b20a:	d0fa      	beq.n	800b202 <__gethex+0x3fe>
 800b20c:	4453      	add	r3, sl
 800b20e:	f1c6 0620 	rsb	r6, r6, #32
 800b212:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b216:	f7fe f8c1 	bl	800939c <__hi0bits>
 800b21a:	42b0      	cmp	r0, r6
 800b21c:	dbe7      	blt.n	800b1ee <__gethex+0x3ea>
 800b21e:	e7f0      	b.n	800b202 <__gethex+0x3fe>
 800b220:	0800bac5 	.word	0x0800bac5

0800b224 <L_shift>:
 800b224:	f1c2 0208 	rsb	r2, r2, #8
 800b228:	0092      	lsls	r2, r2, #2
 800b22a:	b570      	push	{r4, r5, r6, lr}
 800b22c:	f1c2 0620 	rsb	r6, r2, #32
 800b230:	6843      	ldr	r3, [r0, #4]
 800b232:	6804      	ldr	r4, [r0, #0]
 800b234:	fa03 f506 	lsl.w	r5, r3, r6
 800b238:	432c      	orrs	r4, r5
 800b23a:	40d3      	lsrs	r3, r2
 800b23c:	6004      	str	r4, [r0, #0]
 800b23e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b242:	4288      	cmp	r0, r1
 800b244:	d3f4      	bcc.n	800b230 <L_shift+0xc>
 800b246:	bd70      	pop	{r4, r5, r6, pc}

0800b248 <__match>:
 800b248:	b530      	push	{r4, r5, lr}
 800b24a:	6803      	ldr	r3, [r0, #0]
 800b24c:	3301      	adds	r3, #1
 800b24e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b252:	b914      	cbnz	r4, 800b25a <__match+0x12>
 800b254:	6003      	str	r3, [r0, #0]
 800b256:	2001      	movs	r0, #1
 800b258:	bd30      	pop	{r4, r5, pc}
 800b25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b25e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b262:	2d19      	cmp	r5, #25
 800b264:	bf98      	it	ls
 800b266:	3220      	addls	r2, #32
 800b268:	42a2      	cmp	r2, r4
 800b26a:	d0f0      	beq.n	800b24e <__match+0x6>
 800b26c:	2000      	movs	r0, #0
 800b26e:	e7f3      	b.n	800b258 <__match+0x10>

0800b270 <__hexnan>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	680b      	ldr	r3, [r1, #0]
 800b276:	6801      	ldr	r1, [r0, #0]
 800b278:	115e      	asrs	r6, r3, #5
 800b27a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b27e:	f013 031f 	ands.w	r3, r3, #31
 800b282:	b087      	sub	sp, #28
 800b284:	bf18      	it	ne
 800b286:	3604      	addne	r6, #4
 800b288:	2500      	movs	r5, #0
 800b28a:	1f37      	subs	r7, r6, #4
 800b28c:	4682      	mov	sl, r0
 800b28e:	4690      	mov	r8, r2
 800b290:	9301      	str	r3, [sp, #4]
 800b292:	f846 5c04 	str.w	r5, [r6, #-4]
 800b296:	46b9      	mov	r9, r7
 800b298:	463c      	mov	r4, r7
 800b29a:	9502      	str	r5, [sp, #8]
 800b29c:	46ab      	mov	fp, r5
 800b29e:	784a      	ldrb	r2, [r1, #1]
 800b2a0:	1c4b      	adds	r3, r1, #1
 800b2a2:	9303      	str	r3, [sp, #12]
 800b2a4:	b342      	cbz	r2, 800b2f8 <__hexnan+0x88>
 800b2a6:	4610      	mov	r0, r2
 800b2a8:	9105      	str	r1, [sp, #20]
 800b2aa:	9204      	str	r2, [sp, #16]
 800b2ac:	f7ff fd94 	bl	800add8 <__hexdig_fun>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	d151      	bne.n	800b358 <__hexnan+0xe8>
 800b2b4:	9a04      	ldr	r2, [sp, #16]
 800b2b6:	9905      	ldr	r1, [sp, #20]
 800b2b8:	2a20      	cmp	r2, #32
 800b2ba:	d818      	bhi.n	800b2ee <__hexnan+0x7e>
 800b2bc:	9b02      	ldr	r3, [sp, #8]
 800b2be:	459b      	cmp	fp, r3
 800b2c0:	dd13      	ble.n	800b2ea <__hexnan+0x7a>
 800b2c2:	454c      	cmp	r4, r9
 800b2c4:	d206      	bcs.n	800b2d4 <__hexnan+0x64>
 800b2c6:	2d07      	cmp	r5, #7
 800b2c8:	dc04      	bgt.n	800b2d4 <__hexnan+0x64>
 800b2ca:	462a      	mov	r2, r5
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	4620      	mov	r0, r4
 800b2d0:	f7ff ffa8 	bl	800b224 <L_shift>
 800b2d4:	4544      	cmp	r4, r8
 800b2d6:	d952      	bls.n	800b37e <__hexnan+0x10e>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	f1a4 0904 	sub.w	r9, r4, #4
 800b2de:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2e2:	f8cd b008 	str.w	fp, [sp, #8]
 800b2e6:	464c      	mov	r4, r9
 800b2e8:	461d      	mov	r5, r3
 800b2ea:	9903      	ldr	r1, [sp, #12]
 800b2ec:	e7d7      	b.n	800b29e <__hexnan+0x2e>
 800b2ee:	2a29      	cmp	r2, #41	@ 0x29
 800b2f0:	d157      	bne.n	800b3a2 <__hexnan+0x132>
 800b2f2:	3102      	adds	r1, #2
 800b2f4:	f8ca 1000 	str.w	r1, [sl]
 800b2f8:	f1bb 0f00 	cmp.w	fp, #0
 800b2fc:	d051      	beq.n	800b3a2 <__hexnan+0x132>
 800b2fe:	454c      	cmp	r4, r9
 800b300:	d206      	bcs.n	800b310 <__hexnan+0xa0>
 800b302:	2d07      	cmp	r5, #7
 800b304:	dc04      	bgt.n	800b310 <__hexnan+0xa0>
 800b306:	462a      	mov	r2, r5
 800b308:	4649      	mov	r1, r9
 800b30a:	4620      	mov	r0, r4
 800b30c:	f7ff ff8a 	bl	800b224 <L_shift>
 800b310:	4544      	cmp	r4, r8
 800b312:	d936      	bls.n	800b382 <__hexnan+0x112>
 800b314:	f1a8 0204 	sub.w	r2, r8, #4
 800b318:	4623      	mov	r3, r4
 800b31a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b31e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b322:	429f      	cmp	r7, r3
 800b324:	d2f9      	bcs.n	800b31a <__hexnan+0xaa>
 800b326:	1b3b      	subs	r3, r7, r4
 800b328:	f023 0303 	bic.w	r3, r3, #3
 800b32c:	3304      	adds	r3, #4
 800b32e:	3401      	adds	r4, #1
 800b330:	3e03      	subs	r6, #3
 800b332:	42b4      	cmp	r4, r6
 800b334:	bf88      	it	hi
 800b336:	2304      	movhi	r3, #4
 800b338:	4443      	add	r3, r8
 800b33a:	2200      	movs	r2, #0
 800b33c:	f843 2b04 	str.w	r2, [r3], #4
 800b340:	429f      	cmp	r7, r3
 800b342:	d2fb      	bcs.n	800b33c <__hexnan+0xcc>
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	b91b      	cbnz	r3, 800b350 <__hexnan+0xe0>
 800b348:	4547      	cmp	r7, r8
 800b34a:	d128      	bne.n	800b39e <__hexnan+0x12e>
 800b34c:	2301      	movs	r3, #1
 800b34e:	603b      	str	r3, [r7, #0]
 800b350:	2005      	movs	r0, #5
 800b352:	b007      	add	sp, #28
 800b354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b358:	3501      	adds	r5, #1
 800b35a:	2d08      	cmp	r5, #8
 800b35c:	f10b 0b01 	add.w	fp, fp, #1
 800b360:	dd06      	ble.n	800b370 <__hexnan+0x100>
 800b362:	4544      	cmp	r4, r8
 800b364:	d9c1      	bls.n	800b2ea <__hexnan+0x7a>
 800b366:	2300      	movs	r3, #0
 800b368:	f844 3c04 	str.w	r3, [r4, #-4]
 800b36c:	2501      	movs	r5, #1
 800b36e:	3c04      	subs	r4, #4
 800b370:	6822      	ldr	r2, [r4, #0]
 800b372:	f000 000f 	and.w	r0, r0, #15
 800b376:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b37a:	6020      	str	r0, [r4, #0]
 800b37c:	e7b5      	b.n	800b2ea <__hexnan+0x7a>
 800b37e:	2508      	movs	r5, #8
 800b380:	e7b3      	b.n	800b2ea <__hexnan+0x7a>
 800b382:	9b01      	ldr	r3, [sp, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d0dd      	beq.n	800b344 <__hexnan+0xd4>
 800b388:	f1c3 0320 	rsb	r3, r3, #32
 800b38c:	f04f 32ff 	mov.w	r2, #4294967295
 800b390:	40da      	lsrs	r2, r3
 800b392:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b396:	4013      	ands	r3, r2
 800b398:	f846 3c04 	str.w	r3, [r6, #-4]
 800b39c:	e7d2      	b.n	800b344 <__hexnan+0xd4>
 800b39e:	3f04      	subs	r7, #4
 800b3a0:	e7d0      	b.n	800b344 <__hexnan+0xd4>
 800b3a2:	2004      	movs	r0, #4
 800b3a4:	e7d5      	b.n	800b352 <__hexnan+0xe2>

0800b3a6 <__ascii_mbtowc>:
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	b901      	cbnz	r1, 800b3ac <__ascii_mbtowc+0x6>
 800b3aa:	a901      	add	r1, sp, #4
 800b3ac:	b142      	cbz	r2, 800b3c0 <__ascii_mbtowc+0x1a>
 800b3ae:	b14b      	cbz	r3, 800b3c4 <__ascii_mbtowc+0x1e>
 800b3b0:	7813      	ldrb	r3, [r2, #0]
 800b3b2:	600b      	str	r3, [r1, #0]
 800b3b4:	7812      	ldrb	r2, [r2, #0]
 800b3b6:	1e10      	subs	r0, r2, #0
 800b3b8:	bf18      	it	ne
 800b3ba:	2001      	movne	r0, #1
 800b3bc:	b002      	add	sp, #8
 800b3be:	4770      	bx	lr
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	e7fb      	b.n	800b3bc <__ascii_mbtowc+0x16>
 800b3c4:	f06f 0001 	mvn.w	r0, #1
 800b3c8:	e7f8      	b.n	800b3bc <__ascii_mbtowc+0x16>

0800b3ca <_realloc_r>:
 800b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	4680      	mov	r8, r0
 800b3d0:	4615      	mov	r5, r2
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	b921      	cbnz	r1, 800b3e0 <_realloc_r+0x16>
 800b3d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3da:	4611      	mov	r1, r2
 800b3dc:	f7fd be60 	b.w	80090a0 <_malloc_r>
 800b3e0:	b92a      	cbnz	r2, 800b3ee <_realloc_r+0x24>
 800b3e2:	f7fd fde9 	bl	8008fb8 <_free_r>
 800b3e6:	2400      	movs	r4, #0
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3ee:	f000 f840 	bl	800b472 <_malloc_usable_size_r>
 800b3f2:	4285      	cmp	r5, r0
 800b3f4:	4606      	mov	r6, r0
 800b3f6:	d802      	bhi.n	800b3fe <_realloc_r+0x34>
 800b3f8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b3fc:	d8f4      	bhi.n	800b3e8 <_realloc_r+0x1e>
 800b3fe:	4629      	mov	r1, r5
 800b400:	4640      	mov	r0, r8
 800b402:	f7fd fe4d 	bl	80090a0 <_malloc_r>
 800b406:	4607      	mov	r7, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d0ec      	beq.n	800b3e6 <_realloc_r+0x1c>
 800b40c:	42b5      	cmp	r5, r6
 800b40e:	462a      	mov	r2, r5
 800b410:	4621      	mov	r1, r4
 800b412:	bf28      	it	cs
 800b414:	4632      	movcs	r2, r6
 800b416:	f7ff fc45 	bl	800aca4 <memcpy>
 800b41a:	4621      	mov	r1, r4
 800b41c:	4640      	mov	r0, r8
 800b41e:	f7fd fdcb 	bl	8008fb8 <_free_r>
 800b422:	463c      	mov	r4, r7
 800b424:	e7e0      	b.n	800b3e8 <_realloc_r+0x1e>

0800b426 <__ascii_wctomb>:
 800b426:	4603      	mov	r3, r0
 800b428:	4608      	mov	r0, r1
 800b42a:	b141      	cbz	r1, 800b43e <__ascii_wctomb+0x18>
 800b42c:	2aff      	cmp	r2, #255	@ 0xff
 800b42e:	d904      	bls.n	800b43a <__ascii_wctomb+0x14>
 800b430:	228a      	movs	r2, #138	@ 0x8a
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	f04f 30ff 	mov.w	r0, #4294967295
 800b438:	4770      	bx	lr
 800b43a:	700a      	strb	r2, [r1, #0]
 800b43c:	2001      	movs	r0, #1
 800b43e:	4770      	bx	lr

0800b440 <fiprintf>:
 800b440:	b40e      	push	{r1, r2, r3}
 800b442:	b503      	push	{r0, r1, lr}
 800b444:	4601      	mov	r1, r0
 800b446:	ab03      	add	r3, sp, #12
 800b448:	4805      	ldr	r0, [pc, #20]	@ (800b460 <fiprintf+0x20>)
 800b44a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44e:	6800      	ldr	r0, [r0, #0]
 800b450:	9301      	str	r3, [sp, #4]
 800b452:	f000 f83f 	bl	800b4d4 <_vfiprintf_r>
 800b456:	b002      	add	sp, #8
 800b458:	f85d eb04 	ldr.w	lr, [sp], #4
 800b45c:	b003      	add	sp, #12
 800b45e:	4770      	bx	lr
 800b460:	2000001c 	.word	0x2000001c

0800b464 <abort>:
 800b464:	b508      	push	{r3, lr}
 800b466:	2006      	movs	r0, #6
 800b468:	f000 fa08 	bl	800b87c <raise>
 800b46c:	2001      	movs	r0, #1
 800b46e:	f7f6 f9e9 	bl	8001844 <_exit>

0800b472 <_malloc_usable_size_r>:
 800b472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b476:	1f18      	subs	r0, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bfbc      	itt	lt
 800b47c:	580b      	ldrlt	r3, [r1, r0]
 800b47e:	18c0      	addlt	r0, r0, r3
 800b480:	4770      	bx	lr

0800b482 <__sfputc_r>:
 800b482:	6893      	ldr	r3, [r2, #8]
 800b484:	3b01      	subs	r3, #1
 800b486:	2b00      	cmp	r3, #0
 800b488:	b410      	push	{r4}
 800b48a:	6093      	str	r3, [r2, #8]
 800b48c:	da08      	bge.n	800b4a0 <__sfputc_r+0x1e>
 800b48e:	6994      	ldr	r4, [r2, #24]
 800b490:	42a3      	cmp	r3, r4
 800b492:	db01      	blt.n	800b498 <__sfputc_r+0x16>
 800b494:	290a      	cmp	r1, #10
 800b496:	d103      	bne.n	800b4a0 <__sfputc_r+0x1e>
 800b498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b49c:	f000 b932 	b.w	800b704 <__swbuf_r>
 800b4a0:	6813      	ldr	r3, [r2, #0]
 800b4a2:	1c58      	adds	r0, r3, #1
 800b4a4:	6010      	str	r0, [r2, #0]
 800b4a6:	7019      	strb	r1, [r3, #0]
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <__sfputs_r>:
 800b4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4b2:	4606      	mov	r6, r0
 800b4b4:	460f      	mov	r7, r1
 800b4b6:	4614      	mov	r4, r2
 800b4b8:	18d5      	adds	r5, r2, r3
 800b4ba:	42ac      	cmp	r4, r5
 800b4bc:	d101      	bne.n	800b4c2 <__sfputs_r+0x12>
 800b4be:	2000      	movs	r0, #0
 800b4c0:	e007      	b.n	800b4d2 <__sfputs_r+0x22>
 800b4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7ff ffda 	bl	800b482 <__sfputc_r>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	d1f3      	bne.n	800b4ba <__sfputs_r+0xa>
 800b4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4d4 <_vfiprintf_r>:
 800b4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d8:	460d      	mov	r5, r1
 800b4da:	b09d      	sub	sp, #116	@ 0x74
 800b4dc:	4614      	mov	r4, r2
 800b4de:	4698      	mov	r8, r3
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	b118      	cbz	r0, 800b4ec <_vfiprintf_r+0x18>
 800b4e4:	6a03      	ldr	r3, [r0, #32]
 800b4e6:	b90b      	cbnz	r3, 800b4ec <_vfiprintf_r+0x18>
 800b4e8:	f7fc fdc6 	bl	8008078 <__sinit>
 800b4ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4ee:	07d9      	lsls	r1, r3, #31
 800b4f0:	d405      	bmi.n	800b4fe <_vfiprintf_r+0x2a>
 800b4f2:	89ab      	ldrh	r3, [r5, #12]
 800b4f4:	059a      	lsls	r2, r3, #22
 800b4f6:	d402      	bmi.n	800b4fe <_vfiprintf_r+0x2a>
 800b4f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4fa:	f7fc ff08 	bl	800830e <__retarget_lock_acquire_recursive>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	071b      	lsls	r3, r3, #28
 800b502:	d501      	bpl.n	800b508 <_vfiprintf_r+0x34>
 800b504:	692b      	ldr	r3, [r5, #16]
 800b506:	b99b      	cbnz	r3, 800b530 <_vfiprintf_r+0x5c>
 800b508:	4629      	mov	r1, r5
 800b50a:	4630      	mov	r0, r6
 800b50c:	f000 f938 	bl	800b780 <__swsetup_r>
 800b510:	b170      	cbz	r0, 800b530 <_vfiprintf_r+0x5c>
 800b512:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b514:	07dc      	lsls	r4, r3, #31
 800b516:	d504      	bpl.n	800b522 <_vfiprintf_r+0x4e>
 800b518:	f04f 30ff 	mov.w	r0, #4294967295
 800b51c:	b01d      	add	sp, #116	@ 0x74
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	0598      	lsls	r0, r3, #22
 800b526:	d4f7      	bmi.n	800b518 <_vfiprintf_r+0x44>
 800b528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b52a:	f7fc fef1 	bl	8008310 <__retarget_lock_release_recursive>
 800b52e:	e7f3      	b.n	800b518 <_vfiprintf_r+0x44>
 800b530:	2300      	movs	r3, #0
 800b532:	9309      	str	r3, [sp, #36]	@ 0x24
 800b534:	2320      	movs	r3, #32
 800b536:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b53a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b53e:	2330      	movs	r3, #48	@ 0x30
 800b540:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b6f0 <_vfiprintf_r+0x21c>
 800b544:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b548:	f04f 0901 	mov.w	r9, #1
 800b54c:	4623      	mov	r3, r4
 800b54e:	469a      	mov	sl, r3
 800b550:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b554:	b10a      	cbz	r2, 800b55a <_vfiprintf_r+0x86>
 800b556:	2a25      	cmp	r2, #37	@ 0x25
 800b558:	d1f9      	bne.n	800b54e <_vfiprintf_r+0x7a>
 800b55a:	ebba 0b04 	subs.w	fp, sl, r4
 800b55e:	d00b      	beq.n	800b578 <_vfiprintf_r+0xa4>
 800b560:	465b      	mov	r3, fp
 800b562:	4622      	mov	r2, r4
 800b564:	4629      	mov	r1, r5
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ffa2 	bl	800b4b0 <__sfputs_r>
 800b56c:	3001      	adds	r0, #1
 800b56e:	f000 80a7 	beq.w	800b6c0 <_vfiprintf_r+0x1ec>
 800b572:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b574:	445a      	add	r2, fp
 800b576:	9209      	str	r2, [sp, #36]	@ 0x24
 800b578:	f89a 3000 	ldrb.w	r3, [sl]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	f000 809f 	beq.w	800b6c0 <_vfiprintf_r+0x1ec>
 800b582:	2300      	movs	r3, #0
 800b584:	f04f 32ff 	mov.w	r2, #4294967295
 800b588:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b58c:	f10a 0a01 	add.w	sl, sl, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	9307      	str	r3, [sp, #28]
 800b594:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b598:	931a      	str	r3, [sp, #104]	@ 0x68
 800b59a:	4654      	mov	r4, sl
 800b59c:	2205      	movs	r2, #5
 800b59e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a2:	4853      	ldr	r0, [pc, #332]	@ (800b6f0 <_vfiprintf_r+0x21c>)
 800b5a4:	f7f4 fe1c 	bl	80001e0 <memchr>
 800b5a8:	9a04      	ldr	r2, [sp, #16]
 800b5aa:	b9d8      	cbnz	r0, 800b5e4 <_vfiprintf_r+0x110>
 800b5ac:	06d1      	lsls	r1, r2, #27
 800b5ae:	bf44      	itt	mi
 800b5b0:	2320      	movmi	r3, #32
 800b5b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5b6:	0713      	lsls	r3, r2, #28
 800b5b8:	bf44      	itt	mi
 800b5ba:	232b      	movmi	r3, #43	@ 0x2b
 800b5bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5c6:	d015      	beq.n	800b5f4 <_vfiprintf_r+0x120>
 800b5c8:	9a07      	ldr	r2, [sp, #28]
 800b5ca:	4654      	mov	r4, sl
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	f04f 0c0a 	mov.w	ip, #10
 800b5d2:	4621      	mov	r1, r4
 800b5d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5d8:	3b30      	subs	r3, #48	@ 0x30
 800b5da:	2b09      	cmp	r3, #9
 800b5dc:	d94b      	bls.n	800b676 <_vfiprintf_r+0x1a2>
 800b5de:	b1b0      	cbz	r0, 800b60e <_vfiprintf_r+0x13a>
 800b5e0:	9207      	str	r2, [sp, #28]
 800b5e2:	e014      	b.n	800b60e <_vfiprintf_r+0x13a>
 800b5e4:	eba0 0308 	sub.w	r3, r0, r8
 800b5e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	9304      	str	r3, [sp, #16]
 800b5f0:	46a2      	mov	sl, r4
 800b5f2:	e7d2      	b.n	800b59a <_vfiprintf_r+0xc6>
 800b5f4:	9b03      	ldr	r3, [sp, #12]
 800b5f6:	1d19      	adds	r1, r3, #4
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	9103      	str	r1, [sp, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	bfbb      	ittet	lt
 800b600:	425b      	neglt	r3, r3
 800b602:	f042 0202 	orrlt.w	r2, r2, #2
 800b606:	9307      	strge	r3, [sp, #28]
 800b608:	9307      	strlt	r3, [sp, #28]
 800b60a:	bfb8      	it	lt
 800b60c:	9204      	strlt	r2, [sp, #16]
 800b60e:	7823      	ldrb	r3, [r4, #0]
 800b610:	2b2e      	cmp	r3, #46	@ 0x2e
 800b612:	d10a      	bne.n	800b62a <_vfiprintf_r+0x156>
 800b614:	7863      	ldrb	r3, [r4, #1]
 800b616:	2b2a      	cmp	r3, #42	@ 0x2a
 800b618:	d132      	bne.n	800b680 <_vfiprintf_r+0x1ac>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	1d1a      	adds	r2, r3, #4
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	9203      	str	r2, [sp, #12]
 800b622:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b626:	3402      	adds	r4, #2
 800b628:	9305      	str	r3, [sp, #20]
 800b62a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b700 <_vfiprintf_r+0x22c>
 800b62e:	7821      	ldrb	r1, [r4, #0]
 800b630:	2203      	movs	r2, #3
 800b632:	4650      	mov	r0, sl
 800b634:	f7f4 fdd4 	bl	80001e0 <memchr>
 800b638:	b138      	cbz	r0, 800b64a <_vfiprintf_r+0x176>
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	eba0 000a 	sub.w	r0, r0, sl
 800b640:	2240      	movs	r2, #64	@ 0x40
 800b642:	4082      	lsls	r2, r0
 800b644:	4313      	orrs	r3, r2
 800b646:	3401      	adds	r4, #1
 800b648:	9304      	str	r3, [sp, #16]
 800b64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b64e:	4829      	ldr	r0, [pc, #164]	@ (800b6f4 <_vfiprintf_r+0x220>)
 800b650:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b654:	2206      	movs	r2, #6
 800b656:	f7f4 fdc3 	bl	80001e0 <memchr>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d03f      	beq.n	800b6de <_vfiprintf_r+0x20a>
 800b65e:	4b26      	ldr	r3, [pc, #152]	@ (800b6f8 <_vfiprintf_r+0x224>)
 800b660:	bb1b      	cbnz	r3, 800b6aa <_vfiprintf_r+0x1d6>
 800b662:	9b03      	ldr	r3, [sp, #12]
 800b664:	3307      	adds	r3, #7
 800b666:	f023 0307 	bic.w	r3, r3, #7
 800b66a:	3308      	adds	r3, #8
 800b66c:	9303      	str	r3, [sp, #12]
 800b66e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b670:	443b      	add	r3, r7
 800b672:	9309      	str	r3, [sp, #36]	@ 0x24
 800b674:	e76a      	b.n	800b54c <_vfiprintf_r+0x78>
 800b676:	fb0c 3202 	mla	r2, ip, r2, r3
 800b67a:	460c      	mov	r4, r1
 800b67c:	2001      	movs	r0, #1
 800b67e:	e7a8      	b.n	800b5d2 <_vfiprintf_r+0xfe>
 800b680:	2300      	movs	r3, #0
 800b682:	3401      	adds	r4, #1
 800b684:	9305      	str	r3, [sp, #20]
 800b686:	4619      	mov	r1, r3
 800b688:	f04f 0c0a 	mov.w	ip, #10
 800b68c:	4620      	mov	r0, r4
 800b68e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b692:	3a30      	subs	r2, #48	@ 0x30
 800b694:	2a09      	cmp	r2, #9
 800b696:	d903      	bls.n	800b6a0 <_vfiprintf_r+0x1cc>
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d0c6      	beq.n	800b62a <_vfiprintf_r+0x156>
 800b69c:	9105      	str	r1, [sp, #20]
 800b69e:	e7c4      	b.n	800b62a <_vfiprintf_r+0x156>
 800b6a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e7f0      	b.n	800b68c <_vfiprintf_r+0x1b8>
 800b6aa:	ab03      	add	r3, sp, #12
 800b6ac:	9300      	str	r3, [sp, #0]
 800b6ae:	462a      	mov	r2, r5
 800b6b0:	4b12      	ldr	r3, [pc, #72]	@ (800b6fc <_vfiprintf_r+0x228>)
 800b6b2:	a904      	add	r1, sp, #16
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f7fb fe87 	bl	80073c8 <_printf_float>
 800b6ba:	4607      	mov	r7, r0
 800b6bc:	1c78      	adds	r0, r7, #1
 800b6be:	d1d6      	bne.n	800b66e <_vfiprintf_r+0x19a>
 800b6c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6c2:	07d9      	lsls	r1, r3, #31
 800b6c4:	d405      	bmi.n	800b6d2 <_vfiprintf_r+0x1fe>
 800b6c6:	89ab      	ldrh	r3, [r5, #12]
 800b6c8:	059a      	lsls	r2, r3, #22
 800b6ca:	d402      	bmi.n	800b6d2 <_vfiprintf_r+0x1fe>
 800b6cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6ce:	f7fc fe1f 	bl	8008310 <__retarget_lock_release_recursive>
 800b6d2:	89ab      	ldrh	r3, [r5, #12]
 800b6d4:	065b      	lsls	r3, r3, #25
 800b6d6:	f53f af1f 	bmi.w	800b518 <_vfiprintf_r+0x44>
 800b6da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6dc:	e71e      	b.n	800b51c <_vfiprintf_r+0x48>
 800b6de:	ab03      	add	r3, sp, #12
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	462a      	mov	r2, r5
 800b6e4:	4b05      	ldr	r3, [pc, #20]	@ (800b6fc <_vfiprintf_r+0x228>)
 800b6e6:	a904      	add	r1, sp, #16
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7fc f905 	bl	80078f8 <_printf_i>
 800b6ee:	e7e4      	b.n	800b6ba <_vfiprintf_r+0x1e6>
 800b6f0:	0800bd89 	.word	0x0800bd89
 800b6f4:	0800bd93 	.word	0x0800bd93
 800b6f8:	080073c9 	.word	0x080073c9
 800b6fc:	0800b4b1 	.word	0x0800b4b1
 800b700:	0800bd8f 	.word	0x0800bd8f

0800b704 <__swbuf_r>:
 800b704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b706:	460e      	mov	r6, r1
 800b708:	4614      	mov	r4, r2
 800b70a:	4605      	mov	r5, r0
 800b70c:	b118      	cbz	r0, 800b716 <__swbuf_r+0x12>
 800b70e:	6a03      	ldr	r3, [r0, #32]
 800b710:	b90b      	cbnz	r3, 800b716 <__swbuf_r+0x12>
 800b712:	f7fc fcb1 	bl	8008078 <__sinit>
 800b716:	69a3      	ldr	r3, [r4, #24]
 800b718:	60a3      	str	r3, [r4, #8]
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	071a      	lsls	r2, r3, #28
 800b71e:	d501      	bpl.n	800b724 <__swbuf_r+0x20>
 800b720:	6923      	ldr	r3, [r4, #16]
 800b722:	b943      	cbnz	r3, 800b736 <__swbuf_r+0x32>
 800b724:	4621      	mov	r1, r4
 800b726:	4628      	mov	r0, r5
 800b728:	f000 f82a 	bl	800b780 <__swsetup_r>
 800b72c:	b118      	cbz	r0, 800b736 <__swbuf_r+0x32>
 800b72e:	f04f 37ff 	mov.w	r7, #4294967295
 800b732:	4638      	mov	r0, r7
 800b734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b736:	6823      	ldr	r3, [r4, #0]
 800b738:	6922      	ldr	r2, [r4, #16]
 800b73a:	1a98      	subs	r0, r3, r2
 800b73c:	6963      	ldr	r3, [r4, #20]
 800b73e:	b2f6      	uxtb	r6, r6
 800b740:	4283      	cmp	r3, r0
 800b742:	4637      	mov	r7, r6
 800b744:	dc05      	bgt.n	800b752 <__swbuf_r+0x4e>
 800b746:	4621      	mov	r1, r4
 800b748:	4628      	mov	r0, r5
 800b74a:	f7ff fa47 	bl	800abdc <_fflush_r>
 800b74e:	2800      	cmp	r0, #0
 800b750:	d1ed      	bne.n	800b72e <__swbuf_r+0x2a>
 800b752:	68a3      	ldr	r3, [r4, #8]
 800b754:	3b01      	subs	r3, #1
 800b756:	60a3      	str	r3, [r4, #8]
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	6022      	str	r2, [r4, #0]
 800b75e:	701e      	strb	r6, [r3, #0]
 800b760:	6962      	ldr	r2, [r4, #20]
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	429a      	cmp	r2, r3
 800b766:	d004      	beq.n	800b772 <__swbuf_r+0x6e>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	07db      	lsls	r3, r3, #31
 800b76c:	d5e1      	bpl.n	800b732 <__swbuf_r+0x2e>
 800b76e:	2e0a      	cmp	r6, #10
 800b770:	d1df      	bne.n	800b732 <__swbuf_r+0x2e>
 800b772:	4621      	mov	r1, r4
 800b774:	4628      	mov	r0, r5
 800b776:	f7ff fa31 	bl	800abdc <_fflush_r>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d0d9      	beq.n	800b732 <__swbuf_r+0x2e>
 800b77e:	e7d6      	b.n	800b72e <__swbuf_r+0x2a>

0800b780 <__swsetup_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4b29      	ldr	r3, [pc, #164]	@ (800b828 <__swsetup_r+0xa8>)
 800b784:	4605      	mov	r5, r0
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	460c      	mov	r4, r1
 800b78a:	b118      	cbz	r0, 800b794 <__swsetup_r+0x14>
 800b78c:	6a03      	ldr	r3, [r0, #32]
 800b78e:	b90b      	cbnz	r3, 800b794 <__swsetup_r+0x14>
 800b790:	f7fc fc72 	bl	8008078 <__sinit>
 800b794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b798:	0719      	lsls	r1, r3, #28
 800b79a:	d422      	bmi.n	800b7e2 <__swsetup_r+0x62>
 800b79c:	06da      	lsls	r2, r3, #27
 800b79e:	d407      	bmi.n	800b7b0 <__swsetup_r+0x30>
 800b7a0:	2209      	movs	r2, #9
 800b7a2:	602a      	str	r2, [r5, #0]
 800b7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7a8:	81a3      	strh	r3, [r4, #12]
 800b7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ae:	e033      	b.n	800b818 <__swsetup_r+0x98>
 800b7b0:	0758      	lsls	r0, r3, #29
 800b7b2:	d512      	bpl.n	800b7da <__swsetup_r+0x5a>
 800b7b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7b6:	b141      	cbz	r1, 800b7ca <__swsetup_r+0x4a>
 800b7b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7bc:	4299      	cmp	r1, r3
 800b7be:	d002      	beq.n	800b7c6 <__swsetup_r+0x46>
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f7fd fbf9 	bl	8008fb8 <_free_r>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b7d0:	81a3      	strh	r3, [r4, #12]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	6063      	str	r3, [r4, #4]
 800b7d6:	6923      	ldr	r3, [r4, #16]
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f043 0308 	orr.w	r3, r3, #8
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	6923      	ldr	r3, [r4, #16]
 800b7e4:	b94b      	cbnz	r3, 800b7fa <__swsetup_r+0x7a>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b7ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7f0:	d003      	beq.n	800b7fa <__swsetup_r+0x7a>
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	f000 f883 	bl	800b900 <__smakebuf_r>
 800b7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7fe:	f013 0201 	ands.w	r2, r3, #1
 800b802:	d00a      	beq.n	800b81a <__swsetup_r+0x9a>
 800b804:	2200      	movs	r2, #0
 800b806:	60a2      	str	r2, [r4, #8]
 800b808:	6962      	ldr	r2, [r4, #20]
 800b80a:	4252      	negs	r2, r2
 800b80c:	61a2      	str	r2, [r4, #24]
 800b80e:	6922      	ldr	r2, [r4, #16]
 800b810:	b942      	cbnz	r2, 800b824 <__swsetup_r+0xa4>
 800b812:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b816:	d1c5      	bne.n	800b7a4 <__swsetup_r+0x24>
 800b818:	bd38      	pop	{r3, r4, r5, pc}
 800b81a:	0799      	lsls	r1, r3, #30
 800b81c:	bf58      	it	pl
 800b81e:	6962      	ldrpl	r2, [r4, #20]
 800b820:	60a2      	str	r2, [r4, #8]
 800b822:	e7f4      	b.n	800b80e <__swsetup_r+0x8e>
 800b824:	2000      	movs	r0, #0
 800b826:	e7f7      	b.n	800b818 <__swsetup_r+0x98>
 800b828:	2000001c 	.word	0x2000001c

0800b82c <_raise_r>:
 800b82c:	291f      	cmp	r1, #31
 800b82e:	b538      	push	{r3, r4, r5, lr}
 800b830:	4605      	mov	r5, r0
 800b832:	460c      	mov	r4, r1
 800b834:	d904      	bls.n	800b840 <_raise_r+0x14>
 800b836:	2316      	movs	r3, #22
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	f04f 30ff 	mov.w	r0, #4294967295
 800b83e:	bd38      	pop	{r3, r4, r5, pc}
 800b840:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b842:	b112      	cbz	r2, 800b84a <_raise_r+0x1e>
 800b844:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b848:	b94b      	cbnz	r3, 800b85e <_raise_r+0x32>
 800b84a:	4628      	mov	r0, r5
 800b84c:	f000 f830 	bl	800b8b0 <_getpid_r>
 800b850:	4622      	mov	r2, r4
 800b852:	4601      	mov	r1, r0
 800b854:	4628      	mov	r0, r5
 800b856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b85a:	f000 b817 	b.w	800b88c <_kill_r>
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d00a      	beq.n	800b878 <_raise_r+0x4c>
 800b862:	1c59      	adds	r1, r3, #1
 800b864:	d103      	bne.n	800b86e <_raise_r+0x42>
 800b866:	2316      	movs	r3, #22
 800b868:	6003      	str	r3, [r0, #0]
 800b86a:	2001      	movs	r0, #1
 800b86c:	e7e7      	b.n	800b83e <_raise_r+0x12>
 800b86e:	2100      	movs	r1, #0
 800b870:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b874:	4620      	mov	r0, r4
 800b876:	4798      	blx	r3
 800b878:	2000      	movs	r0, #0
 800b87a:	e7e0      	b.n	800b83e <_raise_r+0x12>

0800b87c <raise>:
 800b87c:	4b02      	ldr	r3, [pc, #8]	@ (800b888 <raise+0xc>)
 800b87e:	4601      	mov	r1, r0
 800b880:	6818      	ldr	r0, [r3, #0]
 800b882:	f7ff bfd3 	b.w	800b82c <_raise_r>
 800b886:	bf00      	nop
 800b888:	2000001c 	.word	0x2000001c

0800b88c <_kill_r>:
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4d07      	ldr	r5, [pc, #28]	@ (800b8ac <_kill_r+0x20>)
 800b890:	2300      	movs	r3, #0
 800b892:	4604      	mov	r4, r0
 800b894:	4608      	mov	r0, r1
 800b896:	4611      	mov	r1, r2
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	f7f5 ffc3 	bl	8001824 <_kill>
 800b89e:	1c43      	adds	r3, r0, #1
 800b8a0:	d102      	bne.n	800b8a8 <_kill_r+0x1c>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	b103      	cbz	r3, 800b8a8 <_kill_r+0x1c>
 800b8a6:	6023      	str	r3, [r4, #0]
 800b8a8:	bd38      	pop	{r3, r4, r5, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20000514 	.word	0x20000514

0800b8b0 <_getpid_r>:
 800b8b0:	f7f5 bfb0 	b.w	8001814 <_getpid>

0800b8b4 <__swhatbuf_r>:
 800b8b4:	b570      	push	{r4, r5, r6, lr}
 800b8b6:	460c      	mov	r4, r1
 800b8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8bc:	2900      	cmp	r1, #0
 800b8be:	b096      	sub	sp, #88	@ 0x58
 800b8c0:	4615      	mov	r5, r2
 800b8c2:	461e      	mov	r6, r3
 800b8c4:	da0d      	bge.n	800b8e2 <__swhatbuf_r+0x2e>
 800b8c6:	89a3      	ldrh	r3, [r4, #12]
 800b8c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8cc:	f04f 0100 	mov.w	r1, #0
 800b8d0:	bf14      	ite	ne
 800b8d2:	2340      	movne	r3, #64	@ 0x40
 800b8d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b8d8:	2000      	movs	r0, #0
 800b8da:	6031      	str	r1, [r6, #0]
 800b8dc:	602b      	str	r3, [r5, #0]
 800b8de:	b016      	add	sp, #88	@ 0x58
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
 800b8e2:	466a      	mov	r2, sp
 800b8e4:	f000 f848 	bl	800b978 <_fstat_r>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	dbec      	blt.n	800b8c6 <__swhatbuf_r+0x12>
 800b8ec:	9901      	ldr	r1, [sp, #4]
 800b8ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b8f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b8f6:	4259      	negs	r1, r3
 800b8f8:	4159      	adcs	r1, r3
 800b8fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8fe:	e7eb      	b.n	800b8d8 <__swhatbuf_r+0x24>

0800b900 <__smakebuf_r>:
 800b900:	898b      	ldrh	r3, [r1, #12]
 800b902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b904:	079d      	lsls	r5, r3, #30
 800b906:	4606      	mov	r6, r0
 800b908:	460c      	mov	r4, r1
 800b90a:	d507      	bpl.n	800b91c <__smakebuf_r+0x1c>
 800b90c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b910:	6023      	str	r3, [r4, #0]
 800b912:	6123      	str	r3, [r4, #16]
 800b914:	2301      	movs	r3, #1
 800b916:	6163      	str	r3, [r4, #20]
 800b918:	b003      	add	sp, #12
 800b91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b91c:	ab01      	add	r3, sp, #4
 800b91e:	466a      	mov	r2, sp
 800b920:	f7ff ffc8 	bl	800b8b4 <__swhatbuf_r>
 800b924:	9f00      	ldr	r7, [sp, #0]
 800b926:	4605      	mov	r5, r0
 800b928:	4639      	mov	r1, r7
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7fd fbb8 	bl	80090a0 <_malloc_r>
 800b930:	b948      	cbnz	r0, 800b946 <__smakebuf_r+0x46>
 800b932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b936:	059a      	lsls	r2, r3, #22
 800b938:	d4ee      	bmi.n	800b918 <__smakebuf_r+0x18>
 800b93a:	f023 0303 	bic.w	r3, r3, #3
 800b93e:	f043 0302 	orr.w	r3, r3, #2
 800b942:	81a3      	strh	r3, [r4, #12]
 800b944:	e7e2      	b.n	800b90c <__smakebuf_r+0xc>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	6020      	str	r0, [r4, #0]
 800b94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b94e:	81a3      	strh	r3, [r4, #12]
 800b950:	9b01      	ldr	r3, [sp, #4]
 800b952:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b956:	b15b      	cbz	r3, 800b970 <__smakebuf_r+0x70>
 800b958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b95c:	4630      	mov	r0, r6
 800b95e:	f000 f81d 	bl	800b99c <_isatty_r>
 800b962:	b128      	cbz	r0, 800b970 <__smakebuf_r+0x70>
 800b964:	89a3      	ldrh	r3, [r4, #12]
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	f043 0301 	orr.w	r3, r3, #1
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	431d      	orrs	r5, r3
 800b974:	81a5      	strh	r5, [r4, #12]
 800b976:	e7cf      	b.n	800b918 <__smakebuf_r+0x18>

0800b978 <_fstat_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d07      	ldr	r5, [pc, #28]	@ (800b998 <_fstat_r+0x20>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	4611      	mov	r1, r2
 800b984:	602b      	str	r3, [r5, #0]
 800b986:	f7f5 ffad 	bl	80018e4 <_fstat>
 800b98a:	1c43      	adds	r3, r0, #1
 800b98c:	d102      	bne.n	800b994 <_fstat_r+0x1c>
 800b98e:	682b      	ldr	r3, [r5, #0]
 800b990:	b103      	cbz	r3, 800b994 <_fstat_r+0x1c>
 800b992:	6023      	str	r3, [r4, #0]
 800b994:	bd38      	pop	{r3, r4, r5, pc}
 800b996:	bf00      	nop
 800b998:	20000514 	.word	0x20000514

0800b99c <_isatty_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d06      	ldr	r5, [pc, #24]	@ (800b9b8 <_isatty_r+0x1c>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	602b      	str	r3, [r5, #0]
 800b9a8:	f7f5 ffac 	bl	8001904 <_isatty>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_isatty_r+0x1a>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_isatty_r+0x1a>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	20000514 	.word	0x20000514

0800b9bc <_init>:
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9be:	bf00      	nop
 800b9c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c2:	bc08      	pop	{r3}
 800b9c4:	469e      	mov	lr, r3
 800b9c6:	4770      	bx	lr

0800b9c8 <_fini>:
 800b9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ca:	bf00      	nop
 800b9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ce:	bc08      	pop	{r3}
 800b9d0:	469e      	mov	lr, r3
 800b9d2:	4770      	bx	lr
