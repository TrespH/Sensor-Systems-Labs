
2c_play_a_song_snap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003058  08003058  00004058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003070  08003070  000050d4  2**0
                  CONTENTS
  4 .ARM          00000008  08003070  08003070  00004070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003078  08003078  000050d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800307c  0800307c  0000407c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08003080  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  200000d4  08003154  000050d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003154  00005184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000050d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bcaa  00000000  00000000  00005104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e0  00000000  00000000  00010dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00012690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000924  00000000  00000000  00013230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015525  00000000  00000000  00013b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbaf  00000000  00000000  00029079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 18 .debug_str    00089a8d  00000000  00000000  00035c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003150  00000000  00000000  000bf6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000c282c  2**0
=======
 18 .debug_str    00089b31  00000000  00000000  00035c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000314c  00000000  00000000  000bf79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a0  00000000  00000000  000c28e8  2**0
>>>>>>> 1ca4d497d0165a01c2473d2fc42c8e676aa37e42
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000d4 	.word	0x200000d4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003040 	.word	0x08003040

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000d8 	.word	0x200000d8
 80001d0:	08003040 	.word	0x08003040

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <playnote>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void playnote(struct note note_playing){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b098      	sub	sp, #96	@ 0x60
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	463b      	mov	r3, r7
 80004cc:	e883 0003 	stmia.w	r3, {r0, r1}

	  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004de:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
	  TIM_OC_InitTypeDef sConfigOC = {0};
 80004e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
 80004f8:	615a      	str	r2, [r3, #20]
 80004fa:	619a      	str	r2, [r3, #24]
	  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2220      	movs	r2, #32
 8000502:	2100      	movs	r1, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f002 fd6f 	bl	8002fe8 <memset>

	  htim1.Instance = TIM1;
 800050a:	4b47      	ldr	r3, [pc, #284]	@ (8000628 <playnote+0x164>)
 800050c:	4a47      	ldr	r2, [pc, #284]	@ (800062c <playnote+0x168>)
 800050e:	601a      	str	r2, [r3, #0]
	  htim1.Init.Prescaler = 99;
 8000510:	4b45      	ldr	r3, [pc, #276]	@ (8000628 <playnote+0x164>)
 8000512:	2263      	movs	r2, #99	@ 0x63
 8000514:	605a      	str	r2, [r3, #4]
	  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000516:	4b44      	ldr	r3, [pc, #272]	@ (8000628 <playnote+0x164>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
	  htim1.Init.Period = note_playing.tone;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	461a      	mov	r2, r3
 8000520:	4b41      	ldr	r3, [pc, #260]	@ (8000628 <playnote+0x164>)
 8000522:	60da      	str	r2, [r3, #12]
	  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000524:	4b40      	ldr	r3, [pc, #256]	@ (8000628 <playnote+0x164>)
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]
	  htim1.Init.RepetitionCounter = 0;
 800052a:	4b3f      	ldr	r3, [pc, #252]	@ (8000628 <playnote+0x164>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
	  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000530:	4b3d      	ldr	r3, [pc, #244]	@ (8000628 <playnote+0x164>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]

	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000536:	483c      	ldr	r0, [pc, #240]	@ (8000628 <playnote+0x164>)
 8000538:	f001 fbb4 	bl	8001ca4 <HAL_TIM_Base_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <playnote+0x82>
	  {
	    Error_Handler();
 8000542:	f000 fa73 	bl	8000a2c <Error_Handler>
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800054a:	653b      	str	r3, [r7, #80]	@ 0x50

	  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800054c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000550:	4619      	mov	r1, r3
 8000552:	4835      	ldr	r0, [pc, #212]	@ (8000628 <playnote+0x164>)
 8000554:	f001 fe24 	bl	80021a0 <HAL_TIM_ConfigClockSource>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <playnote+0x9e>
	  {
	    Error_Handler();
 800055e:	f000 fa65 	bl	8000a2c <Error_Handler>
	  }


	  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000562:	4831      	ldr	r0, [pc, #196]	@ (8000628 <playnote+0x164>)
 8000564:	f001 fbed 	bl	8001d42 <HAL_TIM_PWM_Init>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <playnote+0xae>
	  {
	    Error_Handler();
 800056e:	f000 fa5d 	bl	8000a2c <Error_Handler>
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000572:	2300      	movs	r3, #0
 8000574:	64bb      	str	r3, [r7, #72]	@ 0x48
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000576:	2300      	movs	r3, #0
 8000578:	64fb      	str	r3, [r7, #76]	@ 0x4c

	  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800057a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800057e:	4619      	mov	r1, r3
 8000580:	4829      	ldr	r0, [pc, #164]	@ (8000628 <playnote+0x164>)
 8000582:	f002 f9ad 	bl	80028e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <playnote+0xcc>
	  {
	    Error_Handler();
 800058c:	f000 fa4e 	bl	8000a2c <Error_Handler>
	  }

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000590:	2360      	movs	r3, #96	@ 0x60
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sConfigOC.Pulse = note_playing.tone/2;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	0fda      	lsrs	r2, r3, #31
 8000598:	4413      	add	r3, r2
 800059a:	105b      	asrs	r3, r3, #1
 800059c:	633b      	str	r3, [r7, #48]	@ 0x30
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800059e:	2300      	movs	r3, #0
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005a2:	2300      	movs	r3, #0
 80005a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a6:	2300      	movs	r3, #0
 80005a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	643b      	str	r3, [r7, #64]	@ 0x40
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	647b      	str	r3, [r7, #68]	@ 0x44

	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005b6:	2204      	movs	r2, #4
 80005b8:	4619      	mov	r1, r3
 80005ba:	481b      	ldr	r0, [pc, #108]	@ (8000628 <playnote+0x164>)
 80005bc:	f001 fd2e 	bl	800201c <HAL_TIM_PWM_ConfigChannel>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <playnote+0x106>
	  {
	    Error_Handler();
 80005c6:	f000 fa31 	bl	8000a2c <Error_Handler>
	  }


	  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
	  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
	  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
	  sBreakDeadTimeConfig.DeadTime = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
	  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]
	  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005e2:	623b      	str	r3, [r7, #32]
	  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	@ 0x28

	  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	480e      	ldr	r0, [pc, #56]	@ (8000628 <playnote+0x164>)
 80005f0:	f002 f9e4 	bl	80029bc <HAL_TIMEx_ConfigBreakDeadTime>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <playnote+0x13a>
	  {
	    Error_Handler();
 80005fa:	f000 fa17 	bl	8000a2c <Error_Handler>
	  }

	  /* USER CODE BEGIN TIM1_Init 2 */

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005fe:	2104      	movs	r1, #4
 8000600:	4809      	ldr	r0, [pc, #36]	@ (8000628 <playnote+0x164>)
 8000602:	f001 fbf7 	bl	8001df4 <HAL_TIM_PWM_Start>
	  HAL_Delay(note_playing.duration*TEMPO);
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	4613      	mov	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4413      	add	r3, r2
 800060e:	011a      	lsls	r2, r3, #4
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fbc2 	bl	8000d9c <HAL_Delay>
	  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000618:	2104      	movs	r1, #4
 800061a:	4803      	ldr	r0, [pc, #12]	@ (8000628 <playnote+0x164>)
 800061c:	f001 fc9a 	bl	8001f54 <HAL_TIM_PWM_Stop>

	  /* USER CODE END TIM1_Init 2 */
	  //HAL_TIM_MspPostInit(&htim1);

}
 8000620:	bf00      	nop
 8000622:	3760      	adds	r7, #96	@ 0x60
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000f0 	.word	0x200000f0
 800062c:	40010000 	.word	0x40010000

08000630 <playsong>:

void playsong(){
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

	int length = sizeof(score)/sizeof(score[0]);
 8000636:	2319      	movs	r3, #25
 8000638:	603b      	str	r3, [r7, #0]

	for (int i= 0; i<length; i++){
 800063a:	2300      	movs	r3, #0
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	e00a      	b.n	8000656 <playsong+0x26>
		playnote(score[i]);
 8000640:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <playsong+0x38>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	e893 0003 	ldmia.w	r3, {r0, r1}
 800064c:	f7ff ff3a 	bl	80004c4 <playnote>
	for (int i= 0; i<length; i++){
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	dbf0      	blt.n	8000640 <playsong+0x10>
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin)
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800067c:	d105      	bne.n	800068a <HAL_GPIO_EXTI_Callback+0x1e>
	{
		case GPIO_PIN_8:

			playsong();	//Play the song
 800067e:	f7ff ffd7 	bl	8000630 <playsong>

			__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000682:	4a04      	ldr	r2, [pc, #16]	@ (8000694 <HAL_GPIO_EXTI_Callback+0x28>)
 8000684:	88fb      	ldrh	r3, [r7, #6]
 8000686:	6153      	str	r3, [r2, #20]

			break;
 8000688:	e000      	b.n	800068c <HAL_GPIO_EXTI_Callback+0x20>

		default:

			break;
 800068a:	bf00      	nop
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40013c00 	.word	0x40013c00

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069c:	f000 fb0c 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a0:	f000 f808 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f93e 	bl	8000924 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a8:	f000 f912 	bl	80008d0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80006ac:	f000 f86e 	bl	800078c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <main+0x18>

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fc90 	bl	8002fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b29      	ldr	r3, [pc, #164]	@ (8000784 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a28      	ldr	r2, [pc, #160]	@ (8000784 <SystemClock_Config+0xd0>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000700:	4a21      	ldr	r2, [pc, #132]	@ (8000788 <SystemClock_Config+0xd4>)
 8000702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000728:	2310      	movs	r3, #16
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800072c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000730:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000732:	2304      	movs	r3, #4
 8000734:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000736:	2307      	movs	r3, #7
 8000738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fe18 	bl	8001374 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074a:	f000 f96f 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f001 f87a 	bl	8001864 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000776:	f000 f959 	bl	8000a2c <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	@ 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b096      	sub	sp, #88	@ 0x58
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000792:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
 80007ba:	615a      	str	r2, [r3, #20]
 80007bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2220      	movs	r2, #32
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fc0f 	bl	8002fe8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ca:	4b3f      	ldr	r3, [pc, #252]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007cc:	4a3f      	ldr	r2, [pc, #252]	@ (80008cc <MX_TIM1_Init+0x140>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 80007d0:	4b3d      	ldr	r3, [pc, #244]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007d2:	2263      	movs	r2, #99	@ 0x63
 80007d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b3c      	ldr	r3, [pc, #240]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1909;
 80007dc:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007de:	f240 7275 	movw	r2, #1909	@ 0x775
 80007e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b38      	ldr	r3, [pc, #224]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ea:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b35      	ldr	r3, [pc, #212]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007f6:	4834      	ldr	r0, [pc, #208]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80007f8:	f001 fa54 	bl	8001ca4 <HAL_TIM_Base_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000802:	f000 f913 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000806:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800080a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800080c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000810:	4619      	mov	r1, r3
 8000812:	482d      	ldr	r0, [pc, #180]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 8000814:	f001 fcc4 	bl	80021a0 <HAL_TIM_ConfigClockSource>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800081e:	f000 f905 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000822:	4829      	ldr	r0, [pc, #164]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 8000824:	f001 fa8d 	bl	8001d42 <HAL_TIM_PWM_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800082e:	f000 f8fd 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800083e:	4619      	mov	r1, r3
 8000840:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 8000842:	f002 f84d 	bl	80028e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800084c:	f000 f8ee 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000850:	2360      	movs	r3, #96	@ 0x60
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 954;
 8000854:	f240 33ba 	movw	r3, #954	@ 0x3ba
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800086a:	2300      	movs	r3, #0
 800086c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000872:	2204      	movs	r2, #4
 8000874:	4619      	mov	r1, r3
 8000876:	4814      	ldr	r0, [pc, #80]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 8000878:	f001 fbd0 	bl	800201c <HAL_TIM_PWM_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000882:	f000 f8d3 	bl	8000a2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800089a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800089e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80008aa:	f002 f887 	bl	80029bc <HAL_TIMEx_ConfigBreakDeadTime>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008b4:	f000 f8ba 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b8:	4803      	ldr	r0, [pc, #12]	@ (80008c8 <MX_TIM1_Init+0x13c>)
 80008ba:	f000 f907 	bl	8000acc <HAL_TIM_MspPostInit>

}
 80008be:	bf00      	nop
 80008c0:	3758      	adds	r7, #88	@ 0x58
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200000f0 	.word	0x200000f0
 80008cc:	40010000 	.word	0x40010000

080008d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d4:	4b11      	ldr	r3, [pc, #68]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008d6:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <MX_USART2_UART_Init+0x50>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008da:	4b10      	ldr	r3, [pc, #64]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b08      	ldr	r3, [pc, #32]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000906:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_USART2_UART_Init+0x4c>)
 8000908:	f002 f8aa 	bl	8002a60 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000912:	f000 f88b 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000138 	.word	0x20000138
 8000920:	40004400 	.word	0x40004400

08000924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	@ 0x28
 8000928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	609a      	str	r2, [r3, #8]
 8000936:	60da      	str	r2, [r3, #12]
 8000938:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b38      	ldr	r3, [pc, #224]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a37      	ldr	r2, [pc, #220]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000944:	f043 0304 	orr.w	r3, r3, #4
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b35      	ldr	r3, [pc, #212]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0304 	and.w	r3, r3, #4
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b31      	ldr	r3, [pc, #196]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a30      	ldr	r2, [pc, #192]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000960:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a29      	ldr	r2, [pc, #164]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <MX_GPIO_Init+0xfc>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2120      	movs	r1, #32
 80009ae:	481d      	ldr	r0, [pc, #116]	@ (8000a24 <MX_GPIO_Init+0x100>)
 80009b0:	f000 fcae 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <MX_GPIO_Init+0x104>)
 80009cc:	f000 fb1c 	bl	8001008 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <MX_GPIO_Init+0x100>)
 80009e8:	f000 fb0e 	bl	8001008 <HAL_GPIO_Init>


  /*Configure GPIO pin : PA8 */

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <MX_GPIO_Init+0x100>)
 8000a04:	f000 fb00 	bl	8001008 <HAL_GPIO_Init>

  /* EXTI interrupt init*/

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2017      	movs	r0, #23
 8000a0e:	f000 fac4 	bl	8000f9a <HAL_NVIC_SetPriority>

  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a12:	2017      	movs	r0, #23
 8000a14:	f000 fadd 	bl	8000fd2 <HAL_NVIC_EnableIRQ>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020800 	.word	0x40020800

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8000a76:	2006      	movs	r0, #6
 8000a78:	f000 fa84 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <HAL_TIM_Base_MspInit+0x3c>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d10d      	bne.n	8000ab6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x40>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a09      	ldr	r2, [pc, #36]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x40>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <HAL_TIM_Base_MspInit+0x40>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40010000 	.word	0x40010000
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <HAL_TIM_MspPostInit+0x68>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d11e      	bne.n	8000b2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <HAL_TIM_MspPostInit+0x6c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	@ (8000b38 <HAL_TIM_MspPostInit+0x6c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	@ (8000b38 <HAL_TIM_MspPostInit+0x6c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <HAL_TIM_MspPostInit+0x70>)
 8000b28:	f000 fa6e 	bl	8001008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40010000 	.word	0x40010000
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a19      	ldr	r2, [pc, #100]	@ (8000bc4 <HAL_UART_MspInit+0x84>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d12b      	bne.n	8000bba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b18      	ldr	r3, [pc, #96]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6a:	4a17      	ldr	r2, [pc, #92]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b86:	4a10      	ldr	r2, [pc, #64]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <HAL_UART_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000baa:	2307      	movs	r3, #7
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <HAL_UART_MspInit+0x8c>)
 8000bb6:	f000 fa27 	bl	8001008 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40004400 	.word	0x40004400
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40020000 	.word	0x40020000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 f899 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c32:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000c36:	f000 fb85 	bl	8001344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c68:	f7ff ffea 	bl	8000c40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c6c:	480c      	ldr	r0, [pc, #48]	@ (8000ca0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c6e:	490d      	ldr	r1, [pc, #52]	@ (8000ca4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ca8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c74:	e002      	b.n	8000c7c <LoopCopyDataInit>

08000c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7a:	3304      	adds	r3, #4

08000c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c80:	d3f9      	bcc.n	8000c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c84:	4c0a      	ldr	r4, [pc, #40]	@ (8000cb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c88:	e001      	b.n	8000c8e <LoopFillZerobss>

08000c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c8c:	3204      	adds	r2, #4

08000c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c90:	d3fb      	bcc.n	8000c8a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f002 f9b1 	bl	8002ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fcff 	bl	8000698 <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000ca8:	08003080 	.word	0x08003080
  ldr r2, =_sbss
 8000cac:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000cb0:	20000184 	.word	0x20000184

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	@ (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f94f 	bl	8000f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fea4 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	@ (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f967 	bl	8000fee <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f92f 	bl	8000f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	@ (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000c8 	.word	0x200000c8
 8000d54:	200000d0 	.word	0x200000d0
 8000d58:	200000cc 	.word	0x200000cc

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000d0 	.word	0x200000d0
 8000d80:	20000180 	.word	0x20000180

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000180 	.word	0x20000180

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff ffee 	bl	8000d84 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	@ (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	461a      	mov	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	bf00      	nop
 8000dc4:	f7ff ffde 	bl	8000d84 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000d0 	.word	0x200000d0

08000de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e00:	4013      	ands	r3, r2
 8000e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x44>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e30:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <__NVIC_GetPriorityGrouping+0x18>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	f003 0307 	and.w	r3, r3, #7
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db0b      	blt.n	8000e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	f003 021f 	and.w	r2, r3, #31
 8000e60:	4907      	ldr	r1, [pc, #28]	@ (8000e80 <__NVIC_EnableIRQ+0x38>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	095b      	lsrs	r3, r3, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	490c      	ldr	r1, [pc, #48]	@ (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	4908      	ldr	r1, [pc, #32]	@ (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	3b04      	subs	r3, #4
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	@ 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43da      	mvns	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f30:	4313      	orrs	r3, r2
         );
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3724      	adds	r7, #36	@ 0x24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f50:	d301      	bcc.n	8000f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f52:	2301      	movs	r3, #1
 8000f54:	e00f      	b.n	8000f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f56:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <SysTick_Config+0x40>)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5e:	210f      	movs	r1, #15
 8000f60:	f04f 30ff 	mov.w	r0, #4294967295
 8000f64:	f7ff ff8e 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <SysTick_Config+0x40>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6e:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <SysTick_Config+0x40>)
 8000f70:	2207      	movs	r2, #7
 8000f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff29 	bl	8000de4 <__NVIC_SetPriorityGrouping>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b086      	sub	sp, #24
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	60b9      	str	r1, [r7, #8]
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fac:	f7ff ff3e 	bl	8000e2c <__NVIC_GetPriorityGrouping>
 8000fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	68b9      	ldr	r1, [r7, #8]
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	f7ff ff8e 	bl	8000ed8 <NVIC_EncodePriority>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc2:	4611      	mov	r1, r2
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff5d 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fca:	bf00      	nop
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff31 	bl	8000e48 <__NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ffa2 	bl	8000f40 <SysTick_Config>
 8000ffc:	4603      	mov	r3, r0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	@ 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e159      	b.n	80012d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	429a      	cmp	r2, r3
 800103e:	f040 8148 	bne.w	80012d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d005      	beq.n	800105a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	2b02      	cmp	r3, #2
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d017      	beq.n	80010f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d123      	bne.n	800114c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	f003 0307 	and.w	r3, r3, #7
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	691a      	ldr	r2, [r3, #16]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	08da      	lsrs	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3208      	adds	r2, #8
 8001146:	69b9      	ldr	r1, [r7, #24]
 8001148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0203 	and.w	r2, r3, #3
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a2 	beq.w	80012d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	4b57      	ldr	r3, [pc, #348]	@ (80012f0 <HAL_GPIO_Init+0x2e8>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a56      	ldr	r2, [pc, #344]	@ (80012f0 <HAL_GPIO_Init+0x2e8>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b54      	ldr	r3, [pc, #336]	@ (80012f0 <HAL_GPIO_Init+0x2e8>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011aa:	4a52      	ldr	r2, [pc, #328]	@ (80012f4 <HAL_GPIO_Init+0x2ec>)
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	089b      	lsrs	r3, r3, #2
 80011b0:	3302      	adds	r3, #2
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f003 0303 	and.w	r3, r3, #3
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	220f      	movs	r2, #15
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a49      	ldr	r2, [pc, #292]	@ (80012f8 <HAL_GPIO_Init+0x2f0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d019      	beq.n	800120a <HAL_GPIO_Init+0x202>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a48      	ldr	r2, [pc, #288]	@ (80012fc <HAL_GPIO_Init+0x2f4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d013      	beq.n	8001206 <HAL_GPIO_Init+0x1fe>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a47      	ldr	r2, [pc, #284]	@ (8001300 <HAL_GPIO_Init+0x2f8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_GPIO_Init+0x1fa>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a46      	ldr	r2, [pc, #280]	@ (8001304 <HAL_GPIO_Init+0x2fc>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d007      	beq.n	80011fe <HAL_GPIO_Init+0x1f6>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a45      	ldr	r2, [pc, #276]	@ (8001308 <HAL_GPIO_Init+0x300>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d101      	bne.n	80011fa <HAL_GPIO_Init+0x1f2>
 80011f6:	2304      	movs	r3, #4
 80011f8:	e008      	b.n	800120c <HAL_GPIO_Init+0x204>
 80011fa:	2307      	movs	r3, #7
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x204>
 80011fe:	2303      	movs	r3, #3
 8001200:	e004      	b.n	800120c <HAL_GPIO_Init+0x204>
 8001202:	2302      	movs	r3, #2
 8001204:	e002      	b.n	800120c <HAL_GPIO_Init+0x204>
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_GPIO_Init+0x204>
 800120a:	2300      	movs	r3, #0
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	f002 0203 	and.w	r2, r2, #3
 8001212:	0092      	lsls	r2, r2, #2
 8001214:	4093      	lsls	r3, r2
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800121c:	4935      	ldr	r1, [pc, #212]	@ (80012f4 <HAL_GPIO_Init+0x2ec>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <HAL_GPIO_Init+0x304>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a2f      	ldr	r2, [pc, #188]	@ (800130c <HAL_GPIO_Init+0x304>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_GPIO_Init+0x304>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a24      	ldr	r2, [pc, #144]	@ (800130c <HAL_GPIO_Init+0x304>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800127e:	4b23      	ldr	r3, [pc, #140]	@ (800130c <HAL_GPIO_Init+0x304>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a2:	4a1a      	ldr	r2, [pc, #104]	@ (800130c <HAL_GPIO_Init+0x304>)
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4b18      	ldr	r3, [pc, #96]	@ (800130c <HAL_GPIO_Init+0x304>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012cc:	4a0f      	ldr	r2, [pc, #60]	@ (800130c <HAL_GPIO_Init+0x304>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	2b0f      	cmp	r3, #15
 80012dc:	f67f aea2 	bls.w	8001024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40013800 	.word	0x40013800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020800 	.word	0x40020800
 8001304:	40020c00 	.word	0x40020c00
 8001308:	40021000 	.word	0x40021000
 800130c:	40013c00 	.word	0x40013c00

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	4013      	ands	r3, r2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d006      	beq.n	8001368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff f982 	bl	800066c <HAL_GPIO_EXTI_Callback>
  }
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e267      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d075      	beq.n	800147e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001392:	4b88      	ldr	r3, [pc, #544]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b04      	cmp	r3, #4
 800139c:	d00c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800139e:	4b85      	ldr	r3, [pc, #532]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d112      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013aa:	4b82      	ldr	r3, [pc, #520]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013b6:	d10b      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	4b7e      	ldr	r3, [pc, #504]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d05b      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d157      	bne.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e242      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d8:	d106      	bne.n	80013e8 <HAL_RCC_OscConfig+0x74>
 80013da:	4b76      	ldr	r3, [pc, #472]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a75      	ldr	r2, [pc, #468]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e4:	6013      	str	r3, [r2, #0]
 80013e6:	e01d      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b70      	ldr	r3, [pc, #448]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6f      	ldr	r2, [pc, #444]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80013f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b6d      	ldr	r3, [pc, #436]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6c      	ldr	r2, [pc, #432]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e00b      	b.n	8001424 <HAL_RCC_OscConfig+0xb0>
 800140c:	4b69      	ldr	r3, [pc, #420]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a68      	ldr	r2, [pc, #416]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4b66      	ldr	r3, [pc, #408]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a65      	ldr	r2, [pc, #404]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 800141e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d013      	beq.n	8001454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fcaa 	bl	8000d84 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fca6 	bl	8000d84 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	@ 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e207      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0xc0>
 8001452:	e014      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc96 	bl	8000d84 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc92 	bl	8000d84 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	@ 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e1f3      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	4b51      	ldr	r3, [pc, #324]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1f0      	bne.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e000      	b.n	800147e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d063      	beq.n	8001552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800148a:	4b4a      	ldr	r3, [pc, #296]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00b      	beq.n	80014ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001496:	4b47      	ldr	r3, [pc, #284]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d11c      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014a2:	4b44      	ldr	r3, [pc, #272]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d116      	bne.n	80014dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d001      	beq.n	80014c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e1c7      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c6:	4b3b      	ldr	r3, [pc, #236]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	4937      	ldr	r1, [pc, #220]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014da:	e03a      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d020      	beq.n	8001526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014e4:	4b34      	ldr	r3, [pc, #208]	@ (80015b8 <HAL_RCC_OscConfig+0x244>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fc4b 	bl	8000d84 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fc47 	bl	8000d84 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1a8      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b28      	ldr	r3, [pc, #160]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4925      	ldr	r1, [pc, #148]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <HAL_RCC_OscConfig+0x244>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152c:	f7ff fc2a 	bl	8000d84 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001534:	f7ff fc26 	bl	8000d84 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e187      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d036      	beq.n	80015cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d016      	beq.n	8001594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_RCC_OscConfig+0x248>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fc0a 	bl	8000d84 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001574:	f7ff fc06 	bl	8000d84 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e167      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_RCC_OscConfig+0x240>)
 8001588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0x200>
 8001592:	e01b      	b.n	80015cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001594:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <HAL_RCC_OscConfig+0x248>)
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fbf3 	bl	8000d84 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	e00e      	b.n	80015c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fbef 	bl	8000d84 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d907      	bls.n	80015c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e150      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80015b4:	40023800 	.word	0x40023800
 80015b8:	42470000 	.word	0x42470000
 80015bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	4b88      	ldr	r3, [pc, #544]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1ea      	bne.n	80015a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 8097 	beq.w	8001708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015de:	4b81      	ldr	r3, [pc, #516]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b7d      	ldr	r3, [pc, #500]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a7c      	ldr	r2, [pc, #496]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	4b7a      	ldr	r3, [pc, #488]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001606:	2301      	movs	r3, #1
 8001608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b77      	ldr	r3, [pc, #476]	@ (80017e8 <HAL_RCC_OscConfig+0x474>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d118      	bne.n	8001648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b74      	ldr	r3, [pc, #464]	@ (80017e8 <HAL_RCC_OscConfig+0x474>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a73      	ldr	r2, [pc, #460]	@ (80017e8 <HAL_RCC_OscConfig+0x474>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff fbaf 	bl	8000d84 <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162a:	f7ff fbab 	bl	8000d84 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e10c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_RCC_OscConfig+0x474>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f0      	beq.n	800162a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x2ea>
 8001650:	4b64      	ldr	r3, [pc, #400]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001654:	4a63      	ldr	r2, [pc, #396]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6713      	str	r3, [r2, #112]	@ 0x70
 800165c:	e01c      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x30c>
 8001666:	4b5f      	ldr	r3, [pc, #380]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800166a:	4a5e      	ldr	r2, [pc, #376]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	6713      	str	r3, [r2, #112]	@ 0x70
 8001672:	4b5c      	ldr	r3, [pc, #368]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001676:	4a5b      	ldr	r2, [pc, #364]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	6713      	str	r3, [r2, #112]	@ 0x70
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0x324>
 8001680:	4b58      	ldr	r3, [pc, #352]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001684:	4a57      	ldr	r2, [pc, #348]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	@ 0x70
 800168c:	4b55      	ldr	r3, [pc, #340]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 800168e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001690:	4a54      	ldr	r2, [pc, #336]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 0304 	bic.w	r3, r3, #4
 8001696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d015      	beq.n	80016cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a0:	f7ff fb70 	bl	8000d84 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a6:	e00a      	b.n	80016be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a8:	f7ff fb6c 	bl	8000d84 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e0cb      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016be:	4b49      	ldr	r3, [pc, #292]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0ee      	beq.n	80016a8 <HAL_RCC_OscConfig+0x334>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fb5a 	bl	8000d84 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb56 	bl	8000d84 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0b5      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ea:	4b3e      	ldr	r3, [pc, #248]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ee      	bne.n	80016d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d105      	bne.n	8001708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016fc:	4b39      	ldr	r3, [pc, #228]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	4a38      	ldr	r2, [pc, #224]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80a1 	beq.w	8001854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001712:	4b34      	ldr	r3, [pc, #208]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	d05c      	beq.n	80017d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d141      	bne.n	80017aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <HAL_RCC_OscConfig+0x478>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb2a 	bl	8000d84 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fb26 	bl	8000d84 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e087      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69da      	ldr	r2, [r3, #28]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	491b      	ldr	r1, [pc, #108]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <HAL_RCC_OscConfig+0x478>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff faff 	bl	8000d84 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fafb 	bl	8000d84 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e05c      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179c:	4b11      	ldr	r3, [pc, #68]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x416>
 80017a8:	e054      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <HAL_RCC_OscConfig+0x478>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fae8 	bl	8000d84 <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b8:	f7ff fae4 	bl	8000d84 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e045      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x444>
 80017d6:	e03d      	b.n	8001854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e038      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40007000 	.word	0x40007000
 80017ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <HAL_RCC_OscConfig+0x4ec>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d028      	beq.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d121      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d11a      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001820:	4013      	ands	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001828:	4293      	cmp	r3, r2
 800182a:	d111      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	3b01      	subs	r3, #1
 800183a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d001      	beq.n	8001854 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0cc      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b68      	ldr	r3, [pc, #416]	@ (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d90c      	bls.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b65      	ldr	r3, [pc, #404]	@ (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	b2d2      	uxtb	r2, r2
 800188c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b63      	ldr	r3, [pc, #396]	@ (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0b8      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d020      	beq.n	80018ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b8:	4b59      	ldr	r3, [pc, #356]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a58      	ldr	r2, [pc, #352]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018d0:	4b53      	ldr	r3, [pc, #332]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	4a52      	ldr	r2, [pc, #328]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018dc:	4b50      	ldr	r3, [pc, #320]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	494d      	ldr	r1, [pc, #308]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d044      	beq.n	8001984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001902:	4b47      	ldr	r3, [pc, #284]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d119      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e07f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800191e:	2b03      	cmp	r3, #3
 8001920:	d107      	bne.n	8001932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001922:	4b3f      	ldr	r3, [pc, #252]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d109      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001932:	4b3b      	ldr	r3, [pc, #236]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e067      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4b37      	ldr	r3, [pc, #220]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f023 0203 	bic.w	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	4934      	ldr	r1, [pc, #208]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	4313      	orrs	r3, r2
 8001952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001954:	f7ff fa16 	bl	8000d84 <HAL_GetTick>
 8001958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800195a:	e00a      	b.n	8001972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800195c:	f7ff fa12 	bl	8000d84 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e04f      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 020c 	and.w	r2, r3, #12
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	429a      	cmp	r2, r3
 8001982:	d1eb      	bne.n	800195c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001984:	4b25      	ldr	r3, [pc, #148]	@ (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d20c      	bcs.n	80019ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b22      	ldr	r3, [pc, #136]	@ (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <HAL_RCC_ClockConfig+0x1b8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d001      	beq.n	80019ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e032      	b.n	8001a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4916      	ldr	r1, [pc, #88]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d009      	beq.n	80019ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019d6:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	490e      	ldr	r1, [pc, #56]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ea:	f000 f821 	bl	8001a30 <HAL_RCC_GetSysClockFreq>
 80019ee:	4602      	mov	r2, r0
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	490a      	ldr	r1, [pc, #40]	@ (8001a24 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	5ccb      	ldrb	r3, [r1, r3]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a06:	4b09      	ldr	r3, [pc, #36]	@ (8001a2c <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff f976 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	40023800 	.word	0x40023800
 8001a24:	08003058 	.word	0x08003058
 8001a28:	200000c8 	.word	0x200000c8
 8001a2c:	200000cc 	.word	0x200000cc

08001a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a34:	b094      	sub	sp, #80	@ 0x50
 8001a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a48:	4b79      	ldr	r3, [pc, #484]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d00d      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x40>
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	f200 80e1 	bhi.w	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_RCC_GetSysClockFreq+0x34>
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a62:	e0db      	b.n	8001c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a64:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a68:	e0db      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a6a:	4b73      	ldr	r3, [pc, #460]	@ (8001c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a6e:	e0d8      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a70:	4b6f      	ldr	r3, [pc, #444]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d063      	beq.n	8001b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a86:	4b6a      	ldr	r3, [pc, #424]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001aa2:	4622      	mov	r2, r4
 8001aa4:	462b      	mov	r3, r5
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	0159      	lsls	r1, r3, #5
 8001ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ab4:	0150      	lsls	r0, r2, #5
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4621      	mov	r1, r4
 8001abc:	1a51      	subs	r1, r2, r1
 8001abe:	6139      	str	r1, [r7, #16]
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	f04f 0300 	mov.w	r3, #0
 8001ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ad4:	4659      	mov	r1, fp
 8001ad6:	018b      	lsls	r3, r1, #6
 8001ad8:	4651      	mov	r1, sl
 8001ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ade:	4651      	mov	r1, sl
 8001ae0:	018a      	lsls	r2, r1, #6
 8001ae2:	4651      	mov	r1, sl
 8001ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ae8:	4659      	mov	r1, fp
 8001aea:	eb63 0901 	sbc.w	r9, r3, r1
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	eb18 0303 	adds.w	r3, r8, r3
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	462b      	mov	r3, r5
 8001b10:	eb49 0303 	adc.w	r3, r9, r3
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b22:	4629      	mov	r1, r5
 8001b24:	024b      	lsls	r3, r1, #9
 8001b26:	4621      	mov	r1, r4
 8001b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b2c:	4621      	mov	r1, r4
 8001b2e:	024a      	lsls	r2, r1, #9
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b36:	2200      	movs	r2, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b40:	f7fe fb48 	bl	80001d4 <__aeabi_uldivmod>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b4c:	e058      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	099b      	lsrs	r3, r3, #6
 8001b54:	2200      	movs	r2, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	4611      	mov	r1, r2
 8001b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b68:	4642      	mov	r2, r8
 8001b6a:	464b      	mov	r3, r9
 8001b6c:	f04f 0000 	mov.w	r0, #0
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	0159      	lsls	r1, r3, #5
 8001b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b7a:	0150      	lsls	r0, r2, #5
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4641      	mov	r1, r8
 8001b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b86:	4649      	mov	r1, r9
 8001b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8001ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	f04f 0300 	mov.w	r3, #0
 8001bb0:	00eb      	lsls	r3, r5, #3
 8001bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb6:	00e2      	lsls	r2, r4, #3
 8001bb8:	4614      	mov	r4, r2
 8001bba:	461d      	mov	r5, r3
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	18e3      	adds	r3, r4, r3
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	464b      	mov	r3, r9
 8001bc4:	eb45 0303 	adc.w	r3, r5, r3
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	028b      	lsls	r3, r1, #10
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be0:	4621      	mov	r1, r4
 8001be2:	028a      	lsls	r2, r1, #10
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	61fa      	str	r2, [r7, #28]
 8001bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bf4:	f7fe faee 	bl	80001d4 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c1a:	e002      	b.n	8001c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3750      	adds	r7, #80	@ 0x50
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	00f42400 	.word	0x00f42400
 8001c38:	007a1200 	.word	0x007a1200

08001c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200000c8 	.word	0x200000c8

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c58:	f7ff fff0 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	0a9b      	lsrs	r3, r3, #10
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	4903      	ldr	r1, [pc, #12]	@ (8001c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40023800 	.word	0x40023800
 8001c78:	08003068 	.word	0x08003068

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c80:	f7ff ffdc 	bl	8001c3c <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0b5b      	lsrs	r3, r3, #13
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	08003068 	.word	0x08003068

08001ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e041      	b.n	8001d3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7fe fedc 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	f000 fb24 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b082      	sub	sp, #8
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e041      	b.n	8001dd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d106      	bne.n	8001d6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f839 	bl	8001de0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f000 fad5 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_TIM_PWM_Start+0x24>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	bf14      	ite	ne
 8001e10:	2301      	movne	r3, #1
 8001e12:	2300      	moveq	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	e022      	b.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	2b04      	cmp	r3, #4
 8001e1c:	d109      	bne.n	8001e32 <HAL_TIM_PWM_Start+0x3e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	e015      	b.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d109      	bne.n	8001e4c <HAL_TIM_PWM_Start+0x58>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	bf14      	ite	ne
 8001e44:	2301      	movne	r3, #1
 8001e46:	2300      	moveq	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	e008      	b.n	8001e5e <HAL_TIM_PWM_Start+0x6a>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e068      	b.n	8001f38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <HAL_TIM_PWM_Start+0x82>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e74:	e013      	b.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d104      	bne.n	8001e86 <HAL_TIM_PWM_Start+0x92>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e84:	e00b      	b.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d104      	bne.n	8001e96 <HAL_TIM_PWM_Start+0xa2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e94:	e003      	b.n	8001e9e <HAL_TIM_PWM_Start+0xaa>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2202      	movs	r2, #2
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	6839      	ldr	r1, [r7, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fcf4 	bl	8002894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a23      	ldr	r2, [pc, #140]	@ (8001f40 <HAL_TIM_PWM_Start+0x14c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d107      	bne.n	8001ec6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ec4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <HAL_TIM_PWM_Start+0x14c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d018      	beq.n	8001f02 <HAL_TIM_PWM_Start+0x10e>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed8:	d013      	beq.n	8001f02 <HAL_TIM_PWM_Start+0x10e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a19      	ldr	r2, [pc, #100]	@ (8001f44 <HAL_TIM_PWM_Start+0x150>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00e      	beq.n	8001f02 <HAL_TIM_PWM_Start+0x10e>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a17      	ldr	r2, [pc, #92]	@ (8001f48 <HAL_TIM_PWM_Start+0x154>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_TIM_PWM_Start+0x10e>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <HAL_TIM_PWM_Start+0x158>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d004      	beq.n	8001f02 <HAL_TIM_PWM_Start+0x10e>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a14      	ldr	r2, [pc, #80]	@ (8001f50 <HAL_TIM_PWM_Start+0x15c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d111      	bne.n	8001f26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	d010      	beq.n	8001f36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f24:	e007      	b.n	8001f36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40010000 	.word	0x40010000
 8001f44:	40000400 	.word	0x40000400
 8001f48:	40000800 	.word	0x40000800
 8001f4c:	40000c00 	.word	0x40000c00
 8001f50:	40014000 	.word	0x40014000

08001f54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2200      	movs	r2, #0
 8001f64:	6839      	ldr	r1, [r7, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fc94 	bl	8002894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a29      	ldr	r2, [pc, #164]	@ (8002018 <HAL_TIM_PWM_Stop+0xc4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d117      	bne.n	8001fa6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_TIM_PWM_Stop+0x52>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1a      	ldr	r2, [r3, #32]
 8001f8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f90:	4013      	ands	r3, r2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_PWM_Stop+0x52>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6a1a      	ldr	r2, [r3, #32]
 8001fac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_TIM_PWM_Stop+0x82>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6a1a      	ldr	r2, [r3, #32]
 8001fbc:	f240 4344 	movw	r3, #1092	@ 0x444
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_TIM_PWM_Stop+0x82>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0201 	bic.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Stop+0x92>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe4:	e013      	b.n	800200e <HAL_TIM_PWM_Stop+0xba>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d104      	bne.n	8001ff6 <HAL_TIM_PWM_Stop+0xa2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ff4:	e00b      	b.n	800200e <HAL_TIM_PWM_Stop+0xba>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d104      	bne.n	8002006 <HAL_TIM_PWM_Stop+0xb2>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002004:	e003      	b.n	800200e <HAL_TIM_PWM_Stop+0xba>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40010000 	.word	0x40010000

0800201c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002036:	2302      	movs	r3, #2
 8002038:	e0ae      	b.n	8002198 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	f200 809f 	bhi.w	8002188 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800204a:	a201      	add	r2, pc, #4	@ (adr r2, 8002050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800204c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002050:	08002085 	.word	0x08002085
 8002054:	08002189 	.word	0x08002189
 8002058:	08002189 	.word	0x08002189
 800205c:	08002189 	.word	0x08002189
 8002060:	080020c5 	.word	0x080020c5
 8002064:	08002189 	.word	0x08002189
 8002068:	08002189 	.word	0x08002189
 800206c:	08002189 	.word	0x08002189
 8002070:	08002107 	.word	0x08002107
 8002074:	08002189 	.word	0x08002189
 8002078:	08002189 	.word	0x08002189
 800207c:	08002189 	.word	0x08002189
 8002080:	08002147 	.word	0x08002147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f9dc 	bl	8002448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0208 	orr.w	r2, r2, #8
 800209e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0204 	bic.w	r2, r2, #4
 80020ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6999      	ldr	r1, [r3, #24]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	619a      	str	r2, [r3, #24]
      break;
 80020c2:	e064      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fa22 	bl	8002514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6999      	ldr	r1, [r3, #24]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	021a      	lsls	r2, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	619a      	str	r2, [r3, #24]
      break;
 8002104:	e043      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fa6d 	bl	80025ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0208 	orr.w	r2, r2, #8
 8002120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0204 	bic.w	r2, r2, #4
 8002130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69d9      	ldr	r1, [r3, #28]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
      break;
 8002144:	e023      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fab7 	bl	80026c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	69d9      	ldr	r1, [r3, #28]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	021a      	lsls	r2, r3, #8
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	430a      	orrs	r2, r1
 8002184:	61da      	str	r2, [r3, #28]
      break;
 8002186:	e002      	b.n	800218e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	75fb      	strb	r3, [r7, #23]
      break;
 800218c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002196:	7dfb      	ldrb	r3, [r7, #23]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_TIM_ConfigClockSource+0x1c>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0b4      	b.n	8002326 <HAL_TIM_ConfigClockSource+0x186>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80021da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80021e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021f4:	d03e      	beq.n	8002274 <HAL_TIM_ConfigClockSource+0xd4>
 80021f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021fa:	f200 8087 	bhi.w	800230c <HAL_TIM_ConfigClockSource+0x16c>
 80021fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002202:	f000 8086 	beq.w	8002312 <HAL_TIM_ConfigClockSource+0x172>
 8002206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800220a:	d87f      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 800220c:	2b70      	cmp	r3, #112	@ 0x70
 800220e:	d01a      	beq.n	8002246 <HAL_TIM_ConfigClockSource+0xa6>
 8002210:	2b70      	cmp	r3, #112	@ 0x70
 8002212:	d87b      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 8002214:	2b60      	cmp	r3, #96	@ 0x60
 8002216:	d050      	beq.n	80022ba <HAL_TIM_ConfigClockSource+0x11a>
 8002218:	2b60      	cmp	r3, #96	@ 0x60
 800221a:	d877      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 800221c:	2b50      	cmp	r3, #80	@ 0x50
 800221e:	d03c      	beq.n	800229a <HAL_TIM_ConfigClockSource+0xfa>
 8002220:	2b50      	cmp	r3, #80	@ 0x50
 8002222:	d873      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 8002224:	2b40      	cmp	r3, #64	@ 0x40
 8002226:	d058      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x13a>
 8002228:	2b40      	cmp	r3, #64	@ 0x40
 800222a:	d86f      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 800222c:	2b30      	cmp	r3, #48	@ 0x30
 800222e:	d064      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0x15a>
 8002230:	2b30      	cmp	r3, #48	@ 0x30
 8002232:	d86b      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 8002234:	2b20      	cmp	r3, #32
 8002236:	d060      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0x15a>
 8002238:	2b20      	cmp	r3, #32
 800223a:	d867      	bhi.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
 800223c:	2b00      	cmp	r3, #0
 800223e:	d05c      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0x15a>
 8002240:	2b10      	cmp	r3, #16
 8002242:	d05a      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0x15a>
 8002244:	e062      	b.n	800230c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002256:	f000 fafd 	bl	8002854 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002268:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	609a      	str	r2, [r3, #8]
      break;
 8002272:	e04f      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002284:	f000 fae6 	bl	8002854 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002296:	609a      	str	r2, [r3, #8]
      break;
 8002298:	e03c      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022a6:	461a      	mov	r2, r3
 80022a8:	f000 fa5a 	bl	8002760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2150      	movs	r1, #80	@ 0x50
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 fab3 	bl	800281e <TIM_ITRx_SetConfig>
      break;
 80022b8:	e02c      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022c6:	461a      	mov	r2, r3
 80022c8:	f000 fa79 	bl	80027be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2160      	movs	r1, #96	@ 0x60
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 faa3 	bl	800281e <TIM_ITRx_SetConfig>
      break;
 80022d8:	e01c      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e6:	461a      	mov	r2, r3
 80022e8:	f000 fa3a 	bl	8002760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2140      	movs	r1, #64	@ 0x40
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fa93 	bl	800281e <TIM_ITRx_SetConfig>
      break;
 80022f8:	e00c      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f000 fa8a 	bl	800281e <TIM_ITRx_SetConfig>
      break;
 800230a:	e003      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      break;
 8002310:	e000      	b.n	8002314 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3a      	ldr	r2, [pc, #232]	@ (800242c <TIM_Base_SetConfig+0xfc>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00f      	beq.n	8002368 <TIM_Base_SetConfig+0x38>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800234e:	d00b      	beq.n	8002368 <TIM_Base_SetConfig+0x38>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a37      	ldr	r2, [pc, #220]	@ (8002430 <TIM_Base_SetConfig+0x100>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d007      	beq.n	8002368 <TIM_Base_SetConfig+0x38>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a36      	ldr	r2, [pc, #216]	@ (8002434 <TIM_Base_SetConfig+0x104>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d003      	beq.n	8002368 <TIM_Base_SetConfig+0x38>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a35      	ldr	r2, [pc, #212]	@ (8002438 <TIM_Base_SetConfig+0x108>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d108      	bne.n	800237a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800236e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2b      	ldr	r2, [pc, #172]	@ (800242c <TIM_Base_SetConfig+0xfc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01b      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002388:	d017      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a28      	ldr	r2, [pc, #160]	@ (8002430 <TIM_Base_SetConfig+0x100>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a27      	ldr	r2, [pc, #156]	@ (8002434 <TIM_Base_SetConfig+0x104>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00f      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a26      	ldr	r2, [pc, #152]	@ (8002438 <TIM_Base_SetConfig+0x108>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d00b      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a25      	ldr	r2, [pc, #148]	@ (800243c <TIM_Base_SetConfig+0x10c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d007      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a24      	ldr	r2, [pc, #144]	@ (8002440 <TIM_Base_SetConfig+0x110>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d003      	beq.n	80023ba <TIM_Base_SetConfig+0x8a>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a23      	ldr	r2, [pc, #140]	@ (8002444 <TIM_Base_SetConfig+0x114>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d108      	bne.n	80023cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a0e      	ldr	r2, [pc, #56]	@ (800242c <TIM_Base_SetConfig+0xfc>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d103      	bne.n	8002400 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f023 0201 	bic.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
  }
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40014000 	.word	0x40014000
 8002440:	40014400 	.word	0x40014400
 8002444:	40014800 	.word	0x40014800

08002448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 0201 	bic.w	r2, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0303 	bic.w	r3, r3, #3
 800247e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 0302 	bic.w	r3, r3, #2
 8002490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a1c      	ldr	r2, [pc, #112]	@ (8002510 <TIM_OC1_SetConfig+0xc8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d10c      	bne.n	80024be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f023 0308 	bic.w	r3, r3, #8
 80024aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f023 0304 	bic.w	r3, r3, #4
 80024bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <TIM_OC1_SetConfig+0xc8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	621a      	str	r2, [r3, #32]
}
 8002504:	bf00      	nop
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40010000 	.word	0x40010000

08002514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f023 0210 	bic.w	r2, r3, #16
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800254a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f023 0320 	bic.w	r3, r3, #32
 800255e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a1e      	ldr	r2, [pc, #120]	@ (80025e8 <TIM_OC2_SetConfig+0xd4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d10d      	bne.n	8002590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800257a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800258e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a15      	ldr	r2, [pc, #84]	@ (80025e8 <TIM_OC2_SetConfig+0xd4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d113      	bne.n	80025c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800259e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80025a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	40010000 	.word	0x40010000

080025ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800261a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1d      	ldr	r2, [pc, #116]	@ (80026bc <TIM_OC3_SetConfig+0xd0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10d      	bne.n	8002666 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	021b      	lsls	r3, r3, #8
 8002658:	697a      	ldr	r2, [r7, #20]
 800265a:	4313      	orrs	r3, r2
 800265c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a14      	ldr	r2, [pc, #80]	@ (80026bc <TIM_OC3_SetConfig+0xd0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800267c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	40010000 	.word	0x40010000

080026c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80026ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800270a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	031b      	lsls	r3, r3, #12
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a10      	ldr	r2, [pc, #64]	@ (800275c <TIM_OC4_SetConfig+0x9c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d109      	bne.n	8002734 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4313      	orrs	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000

08002760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f023 0201 	bic.w	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800278a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	f023 030a 	bic.w	r3, r3, #10
 800279c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	621a      	str	r2, [r3, #32]
}
 80027b2:	bf00      	nop
 80027b4:	371c      	adds	r7, #28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027be:	b480      	push	{r7}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f023 0210 	bic.w	r2, r3, #16
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80027e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	031b      	lsls	r3, r3, #12
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80027fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	621a      	str	r2, [r3, #32]
}
 8002812:	bf00      	nop
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4313      	orrs	r3, r2
 800283c:	f043 0307 	orr.w	r3, r3, #7
 8002840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	609a      	str	r2, [r3, #8]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800286e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	021a      	lsls	r2, r3, #8
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	431a      	orrs	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	697a      	ldr	r2, [r7, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	609a      	str	r2, [r3, #8]
}
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 031f 	and.w	r3, r3, #31
 80028a6:	2201      	movs	r2, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a1a      	ldr	r2, [r3, #32]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	43db      	mvns	r3, r3
 80028b6:	401a      	ands	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	621a      	str	r2, [r3, #32]
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d101      	bne.n	80028f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028f4:	2302      	movs	r3, #2
 80028f6:	e050      	b.n	800299a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2202      	movs	r2, #2
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800291e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d018      	beq.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002944:	d013      	beq.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d00e      	beq.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a16      	ldr	r2, [pc, #88]	@ (80029b0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a15      	ldr	r2, [pc, #84]	@ (80029b4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d004      	beq.n	800296e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a13      	ldr	r2, [pc, #76]	@ (80029b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d10c      	bne.n	8002988 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002974:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4313      	orrs	r3, r2
 800297e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40000400 	.word	0x40000400
 80029b0:	40000800 	.word	0x40000800
 80029b4:	40000c00 	.word	0x40000c00
 80029b8:	40014000 	.word	0x40014000

080029bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e03d      	b.n	8002a54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	695b      	ldr	r3, [r3, #20]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e042      	b.n	8002af8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fe f85a 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	@ 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002aa2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f82b 	bl	8002b00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ab8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ac8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ad8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b04:	b0c0      	sub	sp, #256	@ 0x100
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	ea40 0301 	orr.w	r3, r0, r1
 8002b28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002b58:	f021 010c 	bic.w	r1, r1, #12
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002b66:	430b      	orrs	r3, r1
 8002b68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7a:	6999      	ldr	r1, [r3, #24]
 8002b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	ea40 0301 	orr.w	r3, r0, r1
 8002b86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b8f      	ldr	r3, [pc, #572]	@ (8002dcc <UART_SetConfig+0x2cc>)
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d005      	beq.n	8002ba0 <UART_SetConfig+0xa0>
 8002b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8002dd0 <UART_SetConfig+0x2d0>)
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d104      	bne.n	8002baa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ba0:	f7ff f86c 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002ba4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ba8:	e003      	b.n	8002bb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002baa:	f7ff f853 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002bae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bbc:	f040 810c 	bne.w	8002dd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002bce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	462b      	mov	r3, r5
 8002bd6:	1891      	adds	r1, r2, r2
 8002bd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bda:	415b      	adcs	r3, r3
 8002bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002be2:	4621      	mov	r1, r4
 8002be4:	eb12 0801 	adds.w	r8, r2, r1
 8002be8:	4629      	mov	r1, r5
 8002bea:	eb43 0901 	adc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	eb18 0303 	adds.w	r3, r8, r3
 8002c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c10:	462b      	mov	r3, r5
 8002c12:	eb49 0303 	adc.w	r3, r9, r3
 8002c16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002c2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c2e:	460b      	mov	r3, r1
 8002c30:	18db      	adds	r3, r3, r3
 8002c32:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c34:	4613      	mov	r3, r2
 8002c36:	eb42 0303 	adc.w	r3, r2, r3
 8002c3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002c40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002c44:	f7fd fac6 	bl	80001d4 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4b61      	ldr	r3, [pc, #388]	@ (8002dd4 <UART_SetConfig+0x2d4>)
 8002c4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	011c      	lsls	r4, r3, #4
 8002c56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002c64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	1891      	adds	r1, r2, r2
 8002c6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002c70:	415b      	adcs	r3, r3
 8002c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c78:	4641      	mov	r1, r8
 8002c7a:	eb12 0a01 	adds.w	sl, r2, r1
 8002c7e:	4649      	mov	r1, r9
 8002c80:	eb43 0b01 	adc.w	fp, r3, r1
 8002c84:	f04f 0200 	mov.w	r2, #0
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c98:	4692      	mov	sl, r2
 8002c9a:	469b      	mov	fp, r3
 8002c9c:	4643      	mov	r3, r8
 8002c9e:	eb1a 0303 	adds.w	r3, sl, r3
 8002ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	eb4b 0303 	adc.w	r3, fp, r3
 8002cac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002cbc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002cc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	18db      	adds	r3, r3, r3
 8002cc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002cca:	4613      	mov	r3, r2
 8002ccc:	eb42 0303 	adc.w	r3, r2, r3
 8002cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002cd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002cda:	f7fd fa7b 	bl	80001d4 <__aeabi_uldivmod>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd4 <UART_SetConfig+0x2d4>)
 8002ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2264      	movs	r2, #100	@ 0x64
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	1acb      	subs	r3, r1, r3
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002cfa:	4b36      	ldr	r3, [pc, #216]	@ (8002dd4 <UART_SetConfig+0x2d4>)
 8002cfc:	fba3 2302 	umull	r2, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002d08:	441c      	add	r4, r3
 8002d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002d18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002d1c:	4642      	mov	r2, r8
 8002d1e:	464b      	mov	r3, r9
 8002d20:	1891      	adds	r1, r2, r2
 8002d22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002d24:	415b      	adcs	r3, r3
 8002d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002d2c:	4641      	mov	r1, r8
 8002d2e:	1851      	adds	r1, r2, r1
 8002d30:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d32:	4649      	mov	r1, r9
 8002d34:	414b      	adcs	r3, r1
 8002d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002d44:	4659      	mov	r1, fp
 8002d46:	00cb      	lsls	r3, r1, #3
 8002d48:	4651      	mov	r1, sl
 8002d4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d4e:	4651      	mov	r1, sl
 8002d50:	00ca      	lsls	r2, r1, #3
 8002d52:	4610      	mov	r0, r2
 8002d54:	4619      	mov	r1, r3
 8002d56:	4603      	mov	r3, r0
 8002d58:	4642      	mov	r2, r8
 8002d5a:	189b      	adds	r3, r3, r2
 8002d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d60:	464b      	mov	r3, r9
 8002d62:	460a      	mov	r2, r1
 8002d64:	eb42 0303 	adc.w	r3, r2, r3
 8002d68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d80:	460b      	mov	r3, r1
 8002d82:	18db      	adds	r3, r3, r3
 8002d84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d86:	4613      	mov	r3, r2
 8002d88:	eb42 0303 	adc.w	r3, r2, r3
 8002d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002d96:	f7fd fa1d 	bl	80001d4 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <UART_SetConfig+0x2d4>)
 8002da0:	fba3 1302 	umull	r1, r3, r3, r2
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	2164      	movs	r1, #100	@ 0x64
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	3332      	adds	r3, #50	@ 0x32
 8002db2:	4a08      	ldr	r2, [pc, #32]	@ (8002dd4 <UART_SetConfig+0x2d4>)
 8002db4:	fba2 2303 	umull	r2, r3, r2, r3
 8002db8:	095b      	lsrs	r3, r3, #5
 8002dba:	f003 0207 	and.w	r2, r3, #7
 8002dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4422      	add	r2, r4
 8002dc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dc8:	e106      	b.n	8002fd8 <UART_SetConfig+0x4d8>
 8002dca:	bf00      	nop
 8002dcc:	40011000 	.word	0x40011000
 8002dd0:	40011400 	.word	0x40011400
 8002dd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002de2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002de6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002dea:	4642      	mov	r2, r8
 8002dec:	464b      	mov	r3, r9
 8002dee:	1891      	adds	r1, r2, r2
 8002df0:	6239      	str	r1, [r7, #32]
 8002df2:	415b      	adcs	r3, r3
 8002df4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002df6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	1854      	adds	r4, r2, r1
 8002dfe:	4649      	mov	r1, r9
 8002e00:	eb43 0501 	adc.w	r5, r3, r1
 8002e04:	f04f 0200 	mov.w	r2, #0
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	00eb      	lsls	r3, r5, #3
 8002e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e12:	00e2      	lsls	r2, r4, #3
 8002e14:	4614      	mov	r4, r2
 8002e16:	461d      	mov	r5, r3
 8002e18:	4643      	mov	r3, r8
 8002e1a:	18e3      	adds	r3, r4, r3
 8002e1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e20:	464b      	mov	r3, r9
 8002e22:	eb45 0303 	adc.w	r3, r5, r3
 8002e26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002e36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e3a:	f04f 0200 	mov.w	r2, #0
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002e46:	4629      	mov	r1, r5
 8002e48:	008b      	lsls	r3, r1, #2
 8002e4a:	4621      	mov	r1, r4
 8002e4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e50:	4621      	mov	r1, r4
 8002e52:	008a      	lsls	r2, r1, #2
 8002e54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002e58:	f7fd f9bc 	bl	80001d4 <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4b60      	ldr	r3, [pc, #384]	@ (8002fe4 <UART_SetConfig+0x4e4>)
 8002e62:	fba3 2302 	umull	r2, r3, r3, r2
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	011c      	lsls	r4, r3, #4
 8002e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	1891      	adds	r1, r2, r2
 8002e82:	61b9      	str	r1, [r7, #24]
 8002e84:	415b      	adcs	r3, r3
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	1851      	adds	r1, r2, r1
 8002e90:	6139      	str	r1, [r7, #16]
 8002e92:	4649      	mov	r1, r9
 8002e94:	414b      	adcs	r3, r1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	00cb      	lsls	r3, r1, #3
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eae:	4651      	mov	r1, sl
 8002eb0:	00ca      	lsls	r2, r1, #3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4642      	mov	r2, r8
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ed6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002ed8:	f04f 0200 	mov.w	r2, #0
 8002edc:	f04f 0300 	mov.w	r3, #0
 8002ee0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ee4:	4649      	mov	r1, r9
 8002ee6:	008b      	lsls	r3, r1, #2
 8002ee8:	4641      	mov	r1, r8
 8002eea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eee:	4641      	mov	r1, r8
 8002ef0:	008a      	lsls	r2, r1, #2
 8002ef2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002ef6:	f7fd f96d 	bl	80001d4 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	4b38      	ldr	r3, [pc, #224]	@ (8002fe4 <UART_SetConfig+0x4e4>)
 8002f02:	fba3 2301 	umull	r2, r3, r3, r1
 8002f06:	095b      	lsrs	r3, r3, #5
 8002f08:	2264      	movs	r2, #100	@ 0x64
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	1acb      	subs	r3, r1, r3
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	3332      	adds	r3, #50	@ 0x32
 8002f14:	4a33      	ldr	r2, [pc, #204]	@ (8002fe4 <UART_SetConfig+0x4e4>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f20:	441c      	add	r4, r3
 8002f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f26:	2200      	movs	r2, #0
 8002f28:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f2a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002f2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002f30:	4642      	mov	r2, r8
 8002f32:	464b      	mov	r3, r9
 8002f34:	1891      	adds	r1, r2, r2
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	415b      	adcs	r3, r3
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f40:	4641      	mov	r1, r8
 8002f42:	1851      	adds	r1, r2, r1
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	4649      	mov	r1, r9
 8002f48:	414b      	adcs	r3, r1
 8002f4a:	607b      	str	r3, [r7, #4]
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002f58:	4659      	mov	r1, fp
 8002f5a:	00cb      	lsls	r3, r1, #3
 8002f5c:	4651      	mov	r1, sl
 8002f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f62:	4651      	mov	r1, sl
 8002f64:	00ca      	lsls	r2, r1, #3
 8002f66:	4610      	mov	r0, r2
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4642      	mov	r2, r8
 8002f6e:	189b      	adds	r3, r3, r2
 8002f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f72:	464b      	mov	r3, r9
 8002f74:	460a      	mov	r2, r1
 8002f76:	eb42 0303 	adc.w	r3, r2, r3
 8002f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f86:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002f94:	4649      	mov	r1, r9
 8002f96:	008b      	lsls	r3, r1, #2
 8002f98:	4641      	mov	r1, r8
 8002f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f9e:	4641      	mov	r1, r8
 8002fa0:	008a      	lsls	r2, r1, #2
 8002fa2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002fa6:	f7fd f915 	bl	80001d4 <__aeabi_uldivmod>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <UART_SetConfig+0x4e4>)
 8002fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	2164      	movs	r1, #100	@ 0x64
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	3332      	adds	r3, #50	@ 0x32
 8002fc2:	4a08      	ldr	r2, [pc, #32]	@ (8002fe4 <UART_SetConfig+0x4e4>)
 8002fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc8:	095b      	lsrs	r3, r3, #5
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4422      	add	r2, r4
 8002fd6:	609a      	str	r2, [r3, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fe4:	51eb851f 	.word	0x51eb851f

08002fe8 <memset>:
 8002fe8:	4402      	add	r2, r0
 8002fea:	4603      	mov	r3, r0
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d100      	bne.n	8002ff2 <memset+0xa>
 8002ff0:	4770      	bx	lr
 8002ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff6:	e7f9      	b.n	8002fec <memset+0x4>

08002ff8 <__libc_init_array>:
 8002ff8:	b570      	push	{r4, r5, r6, lr}
 8002ffa:	4d0d      	ldr	r5, [pc, #52]	@ (8003030 <__libc_init_array+0x38>)
 8002ffc:	4c0d      	ldr	r4, [pc, #52]	@ (8003034 <__libc_init_array+0x3c>)
 8002ffe:	1b64      	subs	r4, r4, r5
 8003000:	10a4      	asrs	r4, r4, #2
 8003002:	2600      	movs	r6, #0
 8003004:	42a6      	cmp	r6, r4
 8003006:	d109      	bne.n	800301c <__libc_init_array+0x24>
 8003008:	4d0b      	ldr	r5, [pc, #44]	@ (8003038 <__libc_init_array+0x40>)
 800300a:	4c0c      	ldr	r4, [pc, #48]	@ (800303c <__libc_init_array+0x44>)
 800300c:	f000 f818 	bl	8003040 <_init>
 8003010:	1b64      	subs	r4, r4, r5
 8003012:	10a4      	asrs	r4, r4, #2
 8003014:	2600      	movs	r6, #0
 8003016:	42a6      	cmp	r6, r4
 8003018:	d105      	bne.n	8003026 <__libc_init_array+0x2e>
 800301a:	bd70      	pop	{r4, r5, r6, pc}
 800301c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003020:	4798      	blx	r3
 8003022:	3601      	adds	r6, #1
 8003024:	e7ee      	b.n	8003004 <__libc_init_array+0xc>
 8003026:	f855 3b04 	ldr.w	r3, [r5], #4
 800302a:	4798      	blx	r3
 800302c:	3601      	adds	r6, #1
 800302e:	e7f2      	b.n	8003016 <__libc_init_array+0x1e>
 8003030:	08003078 	.word	0x08003078
 8003034:	08003078 	.word	0x08003078
 8003038:	08003078 	.word	0x08003078
 800303c:	0800307c 	.word	0x0800307c

08003040 <_init>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	bf00      	nop
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr

0800304c <_fini>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr
